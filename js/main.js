/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 4448:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

  "use strict";
  /**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  /*
   Modernizr 3.0.0pre (Custom Build) | MIT
  */
  var aa=__webpack_require__(7294),ca=__webpack_require__(3840);function p(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+"Capture",b)}
  function ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}
  var ia=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,la=
  {},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
  function qa(a,b,c,d){if(null===b||"undefined"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});
  ["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});
  ["checked","multiple","muted","selected"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});["capture","download"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});["cols","rows","size","span"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});["rowSpan","start"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(ra,
  sa);z[b]=new v(b,1,!1,a,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});
  z.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});
  function ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}
  var ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for("react.element"),wa=Symbol.for("react.portal"),ya=Symbol.for("react.fragment"),za=Symbol.for("react.strict_mode"),Aa=Symbol.for("react.profiler"),Ba=Symbol.for("react.provider"),Ca=Symbol.for("react.context"),Da=Symbol.for("react.forward_ref"),Ea=Symbol.for("react.suspense"),Fa=Symbol.for("react.suspense_list"),Ga=Symbol.for("react.memo"),Ha=Symbol.for("react.lazy");Symbol.for("react.scope");Symbol.for("react.debug_trace_mode");
  var Ia=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden");Symbol.for("react.cache");Symbol.for("react.tracing_marker");var Ja=Symbol.iterator;function Ka(a){if(null===a||"object"!==typeof a)return null;a=Ja&&a[Ja]||a["@@iterator"];return"function"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);La=b&&b[1]||""}return"\n"+La+a}var Na=!1;
  function Oa(a,b){if(!a||Na)return"";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&"string"===typeof l.stack){for(var e=l.stack.split("\n"),
  f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k="\n"+e[g].replace(" at new "," at ");a.displayName&&k.includes("<anonymous>")&&(k=k.replace("<anonymous>",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:"")?Ma(a):""}
  function Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma("Lazy");case 13:return Ma("Suspense");case 19:return Ma("SuspenseList");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return""}}
  function Qa(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ya:return"Fragment";case wa:return"Portal";case Aa:return"Profiler";case za:return"StrictMode";case Ea:return"Suspense";case Fa:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||"Context")+".Consumer";case Ba:return(a._context.displayName||"Context")+".Provider";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||
  b.name||"",a=""!==a?"ForwardRef("+a+")":"ForwardRef");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||"Memo";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}
  function Ra(a){var b=a.type;switch(a.tag){case 24:return"Cache";case 9:return(b.displayName||"Context")+".Consumer";case 10:return(b._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return a=b.render,a=a.displayName||a.name||"",b.displayName||(""!==a?"ForwardRef("+a+")":"ForwardRef");case 7:return"Fragment";case 5:return b;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Qa(b);case 8:return b===za?"StrictMode":"Mode";case 22:return"Offscreen";
  case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"===typeof b)return b.displayName||b.name||null;if("string"===typeof b)return b}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "string":case "undefined":return a;case "object":return a;default:return""}}
  function Ta(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
  function Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
  null;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
  function Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,"checked",b,!1)}
  function bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?cb(a,b.type,c):b.hasOwnProperty("defaultValue")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
  function db(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
  function cb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}var eb=Array.isArray;
  function fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
  function gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:Sa(c)}}
  function ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}
  function lb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?kb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
  var mb,nb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if("http://www.w3.org/2000/svg"!==a.namespaceURI||"innerHTML"in a)a.innerHTML=b;else{mb=mb||document.createElement("div");mb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
  function ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}
  var pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,
  zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=["Webkit","ms","Moz","O"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(""+b).trim():b+"px"}
  function sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=rb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
  function ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if("object"!==typeof b.dangerouslySetInnerHTML||!("__html"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(p(62));}}
  function vb(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;
  function Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}
  function Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==
  typeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,"passive",{get:function(){Lb=!0}});window.addEventListener("test",Mb,Mb);window.removeEventListener("test",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}
  function Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}
  function Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===
  c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}
  var ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&"function"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}
  var oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;
  function tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;
  default:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}
  function vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}
  function wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
  function Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}
  function Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
  function Sc(a,b){switch(a){case "focusin":case "focusout":Lc=null;break;case "dragenter":case "dragleave":Mc=null;break;case "mouseover":case "mouseout":Nc=null;break;case "pointerover":case "pointerout":Oc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Pc.delete(b.pointerId)}}
  function Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
  function Uc(a,b,c,d,e){switch(b){case "focusin":return Lc=Tc(Lc,a,b,c,d,e),!0;case "dragenter":return Mc=Tc(Mc,a,b,c,d,e),!0;case "mouseover":return Nc=Tc(Nc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}
  function Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}
  function Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}
  function ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}
  function bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;
  function ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}
  function fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;
  function Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}
  function jd(a){switch(a){case "cancel":case "click":case "close":case "contextmenu":case "copy":case "cut":case "auxclick":case "dblclick":case "dragend":case "dragstart":case "drop":case "focusin":case "focusout":case "input":case "invalid":case "keydown":case "keypress":case "keyup":case "mousedown":case "mouseup":case "paste":case "pause":case "play":case "pointercancel":case "pointerdown":case "pointerup":case "ratechange":case "reset":case "resize":case "seeked":case "submit":case "touchcancel":case "touchend":case "touchstart":case "volumechange":case "change":case "selectionchange":case "textInput":case "compositionstart":case "compositionend":case "compositionupdate":case "beforeblur":case "afterblur":case "beforeinput":case "blur":case "fullscreenchange":case "focus":case "hashchange":case "popstate":case "select":case "selectstart":return 1;case "drag":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "mousemove":case "mouseout":case "mouseover":case "pointermove":case "pointerout":case "pointerover":case "scroll":case "toggle":case "touchmove":case "wheel":case "mouseenter":case "mouseleave":case "pointerenter":case "pointerleave":return 4;
  case "message":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}
  function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}
  function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
  (a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}
  var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
  a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return"movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
  Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
  119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
  var Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return"keypress"===a.type?od(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===
  a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
  deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&"CompositionEvent"in window,be=null;ia&&"documentMode"in document&&(be=document.documentMode);var ce=ia&&"TextEvent"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;
  function ge(a,b){switch(a){case "keyup":return-1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return!0;default:return!1}}function he(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}
  function ke(a,b){if(ie)return"compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}
  var le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}
  function ve(a,b){if("change"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null)}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}
  function Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae()}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge;
  function Ie(a,b){if(He(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
  function Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
  function Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
  function Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,
  d);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}
  var Pe=ia&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;
  function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}
  function Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Xe={},Ye={};
  ia&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze("animationend"),af=Ze("animationiteration"),bf=Ze("animationstart"),cf=Ze("transitionend"),df=new Map,ef="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
  function ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,"on"+kf)}ff($e,"onAnimationEnd");ff(af,"onAnimationIteration");ff(bf,"onAnimationStart");ff("dblclick","onDoubleClick");ff("focusin","onFocus");ff("focusout","onBlur");ff(cf,"onTransitionEnd");ha("onMouseEnter",["mouseout","mouseover"]);ha("onMouseLeave",["mouseout","mouseover"]);ha("onPointerEnter",["pointerout","pointerover"]);
  ha("onPointerLeave",["pointerout","pointerover"]);fa("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));fa("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));fa("onBeforeInput",["compositionend","keypress","textInput","paste"]);fa("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));fa("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));
  fa("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lf="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),mf=new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
  function nf(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}
  function se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}
  function D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+"__bubble";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf="_reactListening"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){"selectionchange"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf("selectionchange",!1,b))}}
  function pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}
  function hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];
  a:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":n="focus";k=Fd;break;case "focusout":n="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
  Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td}var t=0!==(b&4),J=!t&&"scroll"===a,x=t?null!==h?h+"Capture":null:h;t=[];for(var w=d,u;null!==
  w;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==
  n&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F="onMouseLeave";x="onMouseEnter";w="mouse";if("pointerout"===a||"pointerover"===a)t=Td,F="onPointerLeave",x="onPointerEnter",w="pointer";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+"leave",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+"enter",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=
  vf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);"focusout"===a&&(xa=h._wrapperState)&&
  xa.controlled&&"number"===h.type&&cb(h,"number",h.value)}xa=d?ue(d):window;switch(a){case "focusin":if(me(xa)||"true"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case "compositionstart":var ba="onCompositionStart";break b;case "compositionend":ba="onCompositionEnd";
  break b;case "compositionupdate":ba="onCompositionUpdate";break b}ba=void 0}else ie?ge(a,c)&&(ba="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(ba="onCompositionStart");ba&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==ba?"onCompositionEnd"===ba&&ie&&($a=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),
  0<d.length&&(e=new Ld("onBeforeInput","beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
  function wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\r\n?/g,yf=/\u0000|\uFFFD/g;function zf(a){return("string"===typeof a?a:""+a).replace(xf,"\n").replace(yf,"")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}
  var Cf=null,Df=null;function Ef(a,b){return"textarea"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}
  var Ff="function"===typeof setTimeout?setTimeout:void 0,Gf="function"===typeof clearTimeout?clearTimeout:void 0,Hf="function"===typeof Promise?Promise:void 0,Jf="function"===typeof queueMicrotask?queueMicrotask:"undefined"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}
  function Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,"/$"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else"$"!==c&&"$?"!==c&&"$!"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if("$"===b||"$!"===b||"$?"===b)break;if("/$"===b)return null}}return a}
  function Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--}else"/$"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of="__reactFiber$"+Nf,Pf="__reactProps$"+Nf,uf="__reactContainer$"+Nf,of="__reactEvents$"+Nf,Qf="__reactListeners$"+Nf,Rf="__reactHandles$"+Nf;
  function Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}
  function E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}
  function Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||"Unknown",e));return A({},c,d)}
  function cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}
  function jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg="";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}
  function ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;
  function Ag(a,b){var c=Bg(5,null,null,0);c.elementType="DELETED";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}
  function Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=
  null,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}
  function Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b="head"!==b&&"body"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else"$"!==c&&"$!"!==c&&"$?"!==c||b++}a=a.nextSibling}yg=
  null}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b}
  function Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null)}
  function Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a}}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a)}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}
  function Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}
  function bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function ch(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}
  function dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}
  function fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
  b;c.lastBaseUpdate=b}
  function gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,
  next:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if("function"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r="function"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;
  h=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q}}
  function ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(p(191,e));e.call(d)}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}
  var nh={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=
  lh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d))}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}
  function ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;"object"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
  function qh(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null)}
  function rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,
  "function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4194308)}
  function sh(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if("string"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}
  function th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,"[object Object]"===a?"object with keys {"+Object.keys(b).join(", ")+"}":a));}function uh(a){var b=a._init;return b(a._payload)}
  function vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&
  null===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||"object"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||
  b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if("string"===typeof b&&""!==b||"number"===typeof b)return b=xh(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),
  c.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c&&""!==c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,
  b,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c)}return null}function y(a,b,c,d,e){if("string"===typeof d&&""!==d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d)}return null}
  function n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===
  x.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if("function"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,
  m),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){"object"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if("object"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=
  f.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||"object"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==
  d;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=zh(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f)}return"string"===typeof f&&""!==f||"number"===typeof f?(f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):
  (c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(Eh);G(Eh,b)}function Jh(){E(Eh);E(Fh);E(Gh)}
  function Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c))}function Lh(a){Fh.current===a&&(E(Eh),E(Fh))}var M=Uf(0);
  function Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Nh=[];
  function Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}
  function Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e)}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}
  function ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}
  function ei(a,b){return"function"===typeof b?b(a):b}
  function fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,
  eagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}
  function gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function hi(){}
  function ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e)}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}
  function mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a)}function ki(a,b,c){return c(function(){oi(b)&&pi(a)})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1)}
  function qi(a){var b=ci();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return[b.memoizedState,a]}
  function li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d)}
  function ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d)}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}
  function yi(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
  function Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b()}finally{C=c,Qh.transition=d}}function Fi(){return di().memoizedState}
  function Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d)}}
  function ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d))}}
  function Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}
  var ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,
  4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=
  ci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,
  f,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=":"+b+"R"+c;c=Uh++;0<c&&(b+="H"+c.toString(32));b+=":"}else c=Vh++,b=":"+b+"r"+c.toString(32)+":";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},
  useDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===
  O?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c="",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack}return{value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}
  function Mi(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Ni="function"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b)};return c}
  function Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);"function"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}
  function Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a))}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}
  function Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d)}
  function Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}
  function aj(a,b,c,d,e){if(null===a){var f=c.type;if("function"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}
  function cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}
  function ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d}else null!==
  f?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}
  function ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||
  (h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?("function"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.flags|=4194308)):
  ("function"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m="function"===typeof y||"function"===typeof g.getSnapshotBeforeUpdate)||
  "function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?("function"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),"function"===typeof g.UNSAFE_componentWillUpdate&&
  g.UNSAFE_componentWillUpdate(d,n,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===
  a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return kj(a,b,c,d,f,e)}
  function kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo)}
  function mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return{baseLanes:a,cachePool:null,transitions:null}}
  function pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:"$!"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:"hidden",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=
  g):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:"hidden",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=
  b;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:"visible",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}
  function rj(a,b){b=qj({mode:"visible",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}
  function sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:"visible",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if("$!"===e.data){d=e.nextSibling&&e.nextSibling.dataset;
  if(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;
  0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1))}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if("$?"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c)}
  function xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}
  function yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(M,d);if(0===(b.mode&1))b.memoizedState=
  null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}xj(b,!0,c,null,f);break;case "together":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}
  function jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}
  function zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&
  b.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;
  Aj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Bj=function(){};
  Cj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "select":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&
  (c||(c={}),c[g]="")}else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,
  c)),c=k;else"dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ea.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&D("scroll",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push("style",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4)};
  function Ej(a,b){if(!I)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}
  function S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}
  function Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);
  c=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case "dialog":D("cancel",d);D("close",d);break;case "iframe":case "object":case "embed":D("load",d);break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],d);break;case "source":D("error",d);break;case "img":case "image":case "link":D("error",
  d);D("load",d);break;case "details":D("toggle",d);break;case "input":Za(d,f);D("invalid",d);break;case "select":d._wrapperState={wasMultiple:!!f.multiple};D("invalid",d);break;case "textarea":hb(d,f),D("invalid",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,
  h,a),e=["children",""+h]):ea.hasOwnProperty(g)&&null!=h&&"onScroll"===g&&D("scroll",d)}switch(c){case "input":Va(d);db(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;"http://www.w3.org/1999/xhtml"===a&&(a=kb(c));"http://www.w3.org/1999/xhtml"===a?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):
  "string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case "dialog":D("cancel",a);D("close",a);e=d;break;case "iframe":case "object":case "embed":D("load",a);e=d;break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case "source":D("error",a);e=d;break;case "img":case "image":case "link":D("error",
  a);D("load",a);e=d;break;case "details":D("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);D("invalid",a);break;case "option":e=d;break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D("invalid",a);break;case "textarea":hb(a,d);e=gb(a,d);D("invalid",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?sb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):"children"===f?"string"===typeof k?("textarea"!==
  c||""!==k)&&ob(a,k):"number"===typeof k&&ob(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ea.hasOwnProperty(f)?null!=k&&"onScroll"===f&&D("scroll",a):null!=k&&ta(a,f,k,g))}switch(c){case "input":Va(a);db(a,d,!1);break;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,
  !0);break;default:"function"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case "button":case "input":case "select":case "textarea":d=!!d.autoFocus;break a;case "img":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=
  xg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===
  a){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),
  Bj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,
  g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=
  a.sibling}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304)}else{if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&"hidden"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=
  b,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}
  function Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),
  null;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj="function"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if("function"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Nj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Oj=!1;
  function Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if("selectionStart"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=
  q.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;
  case 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent="":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Oj;Oj=!1;return n}
  function Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f)}e=e.next}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}"function"===typeof b?b(a):b.current=a}}
  function Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}
  function Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}
  function Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}
  function Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling}
  function ak(a,b,c){if(lc&&"function"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;
  Zj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,"function"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==
  c.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c)}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}
  function dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling}
  function ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a)}catch(t){W(a,a.return,t)}try{Qj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,"")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;
  a.updateQueue=null;if(null!==k)try{"input"===h&&"radio"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];"style"===m?sb(e,q):"dangerouslySetInnerHTML"===m?nb(e,q):"children"===m?ob(e,q):ta(e,m,q,l)}switch(h){case "input":bb(e,f);break;case "textarea":ib(e,f);break;case "select":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,
  f.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:"",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||
  null!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if("function"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=
  b.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty("display")?k.display:null,h.style.display=
  rb("display",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?"":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,
  a),fk(a)}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,""),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function ik(a,b,c){V=a;jk(a,b,c)}
  function jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f,b,c),f=f.sibling;V=e;Kj=h;U=l}lk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a,b,c)}}
  function lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=
  b.child.stateNode;break;case 1:c=b.child.stateNode}ih(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case "button":case "input":case "select":case "textarea":k.autoFocus&&c.focus();break;case "img":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;
  default:throw Error(p(163));}U||b.flags&512&&Sj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}
  function kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if("function"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Sj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Sj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}
  var mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}
  function lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg())}
  function Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Gk(c,Hk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}
  function Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else{b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h)}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);
  else{e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===
  d)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}
  function Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a)}
  function Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}
  function Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d))}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}
  function Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg())}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg()}}function Ij(){gj=fj.current;E(fj)}
  function Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij()}c=c.return}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=
  0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}Wg=null}return a}
  function Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Sh=!1}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,
  m.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;
  b&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&("function"===typeof w.getDerivedStateFromError||null!==u&&"function"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return}while(null!==f)}Tk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}
  function uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z)}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e)}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y)}function Mk(){for(;null!==Y&&!cc();)Vk(Y)}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null}
  function Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else{c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d)}finally{pk.transition=e,C=d}return null}
  function Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;
  var g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c,a,e);dc();K=h;C=g;pk.transition=f}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode,d);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}
  function Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else{a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===
  l){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==
  u)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&"function"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,pk.transition=b}}return!1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b))}
  function W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if("function"===typeof b.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return}}
  function Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b)}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c))}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c)}
  function ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c)}var Wk;
  Wk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;"object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=
  null,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,
  d,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=
  f,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c)}b=b.child}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),
  hj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;
  g=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,
  c,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Yi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),
  b.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}
  function al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return!(!a||!a.isReactComponent)}
  function $k(a){if("function"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}
  function wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
  c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
  function yh(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bj(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;
  break a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,""));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}
  function zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
  function bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=
  null}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
  function el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}
  function fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}
  function hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b)}function kl(){return null}var ll="function"===typeof reportError?reportError:function(a){console.error(a)};function ml(a){this._internalRoot=a}
  nl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null)};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null)});b[uf]=null}};function nl(a){this._internalRoot=a}
  nl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function ql(){}
  function rl(a,b,c,d,e){if(e){if("function"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a)}}var g=fl(b,d,a,0,null,!1,!1,"",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if("function"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a)}}var k=cl(a,0,!1,null,null,!1,!1,"",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d)});return k}
  function sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if("function"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a)}}gl(b,g,a,e)}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()))}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c)}}),jl(a,1)}};
  Fc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c)}jl(a,134217728)}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d)}jl(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};
  yb=function(a,b,c){switch(b){case "input":bb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Rk;Hb=Sk;
  var tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"};
  var vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||
  kl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;
  exports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};exports.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d="",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};
  exports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(",");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Sk(a)};exports.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};
  exports.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f="",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,
  e);return new nl(b)};exports.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Rk;
  exports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};exports.version="18.2.0-next-9e3b772b8-20220608";
  
  
  /***/ }),
  
  /***/ 745:
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  var __webpack_unused_export__;
  
  
  var m = __webpack_require__(3935);
  if (true) {
    exports.s = m.createRoot;
    __webpack_unused_export__ = m.hydrateRoot;
  } else { var i; }
  
  
  /***/ }),
  
  /***/ 3935:
  /***/ ((module, __unused_webpack_exports, __webpack_require__) => {
  
  "use strict";
  
  
  function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    if (
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
    ) {
      return;
    }
    if (false) {}
    try {
      // Verify that the code above has been dead code eliminated (DCE'd).
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      // DevTools shouldn't crash React, no matter what.
      // We should still report in case we break this code.
      console.error(err);
    }
  }
  
  if (true) {
    // DCE check should happen before ReactDOM bundle executes so that
    // DevTools can report bad minification during injection.
    checkDCE();
    module.exports = __webpack_require__(4448);
  } else {}
  
  
  /***/ }),
  
  /***/ 2408:
  /***/ ((__unused_webpack_module, exports) => {
  
  "use strict";
  /**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var l=Symbol.for("react.element"),n=Symbol.for("react.portal"),p=Symbol.for("react.fragment"),q=Symbol.for("react.strict_mode"),r=Symbol.for("react.profiler"),t=Symbol.for("react.provider"),u=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),w=Symbol.for("react.suspense"),x=Symbol.for("react.memo"),y=Symbol.for("react.lazy"),z=Symbol.iterator;function A(a){if(null===a||"object"!==typeof a)return null;a=z&&a[z]||a["@@iterator"];return"function"===typeof a?a:null}
  var B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};
  E.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,a,b,"setState")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;
  H.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};
  function M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}
  function N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={"=":"=0",":":"=2"};return"$"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g;function Q(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
  function R(a,b,e,d,c){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=""===d?"."+Q(h,0):d,I(c)?(e="",null!=a&&(e=a.replace(P,"$&/")+"/"),R(c,b,e,"",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?"":(""+c.key).replace(P,"$&/")+"/")+a)),b.push(c)),1;h=0;d=""===d?".":d+":";if(I(a))for(var g=0;g<a.length;g++){k=
  a[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if("object"===k)throw b=String(a),Error("Objects are not valid as a React child (found: "+("[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b)+"). If you meant to render a collection of children, use an array instead.");return h}
  function S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,"","",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}
  var U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error("React.Children.only expected to receive a single React element child.");return a}};exports.Component=E;exports.Fragment=p;
  exports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;
  exports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+a+".");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);
  for(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};
  exports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.");};
  exports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};
  exports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};
  exports.useTransition=function(){return U.current.useTransition()};exports.version="18.2.0";
  
  
  /***/ }),
  
  /***/ 7294:
  /***/ ((module, __unused_webpack_exports, __webpack_require__) => {
  
  "use strict";
  
  
  if (true) {
    module.exports = __webpack_require__(2408);
  } else {}
  
  
  /***/ }),
  
  /***/ 53:
  /***/ ((__unused_webpack_module, exports) => {
  
  "use strict";
  /**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}
  function g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D="function"===typeof setTimeout?setTimeout:null,E="function"===typeof clearTimeout?clearTimeout:null,F="undefined"!==typeof setImmediate?setImmediate:null;
  "undefined"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}
  function J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if("function"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;
  function M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if("function"===typeof F)S=function(){F(R)};else if("undefined"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}
  exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};
  exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};
  exports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};
  exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};
  exports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};
  
  
  /***/ }),
  
  /***/ 3840:
  /***/ ((module, __unused_webpack_exports, __webpack_require__) => {
  
  "use strict";
  
  
  if (true) {
    module.exports = __webpack_require__(53);
  } else {}
  
  
  /***/ }),
  
  /***/ 7061:
  /***/ ((module, __unused_webpack_exports, __webpack_require__) => {
  
  var _typeof = (__webpack_require__(8698)["default"]);
  function _regeneratorRuntime() {
    "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
    module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
      return e;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    var t,
      e = {},
      r = Object.prototype,
      n = r.hasOwnProperty,
      o = Object.defineProperty || function (t, e, r) {
        t[e] = r.value;
      },
      i = "function" == typeof Symbol ? Symbol : {},
      a = i.iterator || "@@iterator",
      c = i.asyncIterator || "@@asyncIterator",
      u = i.toStringTag || "@@toStringTag";
    function define(t, e, r) {
      return Object.defineProperty(t, e, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), t[e];
    }
    try {
      define({}, "");
    } catch (t) {
      define = function define(t, e, r) {
        return t[e] = r;
      };
    }
    function wrap(t, e, r, n) {
      var i = e && e.prototype instanceof Generator ? e : Generator,
        a = Object.create(i.prototype),
        c = new Context(n || []);
      return o(a, "_invoke", {
        value: makeInvokeMethod(t, r, c)
      }), a;
    }
    function tryCatch(t, e, r) {
      try {
        return {
          type: "normal",
          arg: t.call(e, r)
        };
      } catch (t) {
        return {
          type: "throw",
          arg: t
        };
      }
    }
    e.wrap = wrap;
    var h = "suspendedStart",
      l = "suspendedYield",
      f = "executing",
      s = "completed",
      y = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var p = {};
    define(p, a, function () {
      return this;
    });
    var d = Object.getPrototypeOf,
      v = d && d(d(values([])));
    v && v !== r && n.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t) {
      ["next", "throw", "return"].forEach(function (e) {
        define(t, e, function (t) {
          return this._invoke(e, t);
        });
      });
    }
    function AsyncIterator(t, e) {
      function invoke(r, o, i, a) {
        var c = tryCatch(t[r], t, o);
        if ("throw" !== c.type) {
          var u = c.arg,
            h = u.value;
          return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
            invoke("next", t, i, a);
          }, function (t) {
            invoke("throw", t, i, a);
          }) : e.resolve(h).then(function (t) {
            u.value = t, i(u);
          }, function (t) {
            return invoke("throw", t, i, a);
          });
        }
        a(c.arg);
      }
      var r;
      o(this, "_invoke", {
        value: function value(t, n) {
          function callInvokeWithMethodAndArg() {
            return new e(function (e, r) {
              invoke(t, n, e, r);
            });
          }
          return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e, r, n) {
      var o = h;
      return function (i, a) {
        if (o === f) throw new Error("Generator is already running");
        if (o === s) {
          if ("throw" === i) throw a;
          return {
            value: t,
            done: !0
          };
        }
        for (n.method = i, n.arg = a;;) {
          var c = n.delegate;
          if (c) {
            var u = maybeInvokeDelegate(c, n);
            if (u) {
              if (u === y) continue;
              return u;
            }
          }
          if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
            if (o === h) throw o = s, n.arg;
            n.dispatchException(n.arg);
          } else "return" === n.method && n.abrupt("return", n.arg);
          o = f;
          var p = tryCatch(e, r, n);
          if ("normal" === p.type) {
            if (o = n.done ? s : l, p.arg === y) continue;
            return {
              value: p.arg,
              done: n.done
            };
          }
          "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
        }
      };
    }
    function maybeInvokeDelegate(e, r) {
      var n = r.method,
        o = e.iterator[n];
      if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
      var i = tryCatch(o, e.iterator, r.arg);
      if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
      var a = i.arg;
      return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
    }
    function pushTryEntry(t) {
      var e = {
        tryLoc: t[0]
      };
      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
    }
    function resetTryEntry(t) {
      var e = t.completion || {};
      e.type = "normal", delete e.arg, t.completion = e;
    }
    function Context(t) {
      this.tryEntries = [{
        tryLoc: "root"
      }], t.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(e) {
      if (e || "" === e) {
        var r = e[a];
        if (r) return r.call(e);
        if ("function" == typeof e.next) return e;
        if (!isNaN(e.length)) {
          var o = -1,
            i = function next() {
              for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
              return next.value = t, next.done = !0, next;
            };
          return i.next = i;
        }
      }
      throw new TypeError(_typeof(e) + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), o(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
      var e = "function" == typeof t && t.constructor;
      return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
    }, e.mark = function (t) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
    }, e.awrap = function (t) {
      return {
        __await: t
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
      return this;
    }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
      void 0 === i && (i = Promise);
      var a = new AsyncIterator(wrap(t, r, n, o), i);
      return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
        return t.done ? t.value : a.next();
      });
    }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
      return this;
    }), define(g, "toString", function () {
      return "[object Generator]";
    }), e.keys = function (t) {
      var e = Object(t),
        r = [];
      for (var n in e) r.push(n);
      return r.reverse(), function next() {
        for (; r.length;) {
          var t = r.pop();
          if (t in e) return next.value = t, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, e.values = values, Context.prototype = {
      constructor: Context,
      reset: function reset(e) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
      },
      stop: function stop() {
        this.done = !0;
        var t = this.tryEntries[0].completion;
        if ("throw" === t.type) throw t.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(e) {
        if (this.done) throw e;
        var r = this;
        function handle(n, o) {
          return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
        }
        for (var o = this.tryEntries.length - 1; o >= 0; --o) {
          var i = this.tryEntries[o],
            a = i.completion;
          if ("root" === i.tryLoc) return handle("end");
          if (i.tryLoc <= this.prev) {
            var c = n.call(i, "catchLoc"),
              u = n.call(i, "finallyLoc");
            if (c && u) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            } else if (c) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            } else {
              if (!u) throw new Error("try statement without catch or finally");
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(t, e) {
        for (var r = this.tryEntries.length - 1; r >= 0; --r) {
          var o = this.tryEntries[r];
          if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
            var i = o;
            break;
          }
        }
        i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
        var a = i ? i.completion : {};
        return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
      },
      complete: function complete(t, e) {
        if ("throw" === t.type) throw t.arg;
        return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
      },
      finish: function finish(t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
        }
      },
      "catch": function _catch(t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.tryLoc === t) {
            var n = r.completion;
            if ("throw" === n.type) {
              var o = n.arg;
              resetTryEntry(r);
            }
            return o;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(e, r, n) {
        return this.delegate = {
          iterator: values(e),
          resultName: r,
          nextLoc: n
        }, "next" === this.method && (this.arg = t), y;
      }
    }, e;
  }
  module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  
  /***/ }),
  
  /***/ 8698:
  /***/ ((module) => {
  
  function _typeof(o) {
    "@babel/helpers - typeof";
  
    return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
  }
  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  
  /***/ }),
  
  /***/ 4687:
  /***/ ((module, __unused_webpack_exports, __webpack_require__) => {
  
  // TODO(Babel 8): Remove this file.
  
  var runtime = __webpack_require__(7061)();
  module.exports = runtime;
  
  // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  
  
  /***/ })
  
  /******/ 	});
  /************************************************************************/
  /******/ 	// The module cache
  /******/ 	var __webpack_module_cache__ = {};
  /******/ 	
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/ 		// Check if module is in cache
  /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
  /******/ 		if (cachedModule !== undefined) {
  /******/ 			return cachedModule.exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = __webpack_module_cache__[moduleId] = {
  /******/ 			// no module.id needed
  /******/ 			// no module.loaded needed
  /******/ 			exports: {}
  /******/ 		};
  /******/ 	
  /******/ 		// Execute the module function
  /******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
  /******/ 	
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/ 	
  /************************************************************************/
  /******/ 	/* webpack/runtime/compat get default export */
  /******/ 	(() => {
  /******/ 		// getDefaultExport function for compatibility with non-harmony modules
  /******/ 		__webpack_require__.n = (module) => {
  /******/ 			var getter = module && module.__esModule ?
  /******/ 				() => (module['default']) :
  /******/ 				() => (module);
  /******/ 			__webpack_require__.d(getter, { a: getter });
  /******/ 			return getter;
  /******/ 		};
  /******/ 	})();
  /******/ 	
  /******/ 	/* webpack/runtime/define property getters */
  /******/ 	(() => {
  /******/ 		// define getter functions for harmony exports
  /******/ 		__webpack_require__.d = (exports, definition) => {
  /******/ 			for(var key in definition) {
  /******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
  /******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
  /******/ 				}
  /******/ 			}
  /******/ 		};
  /******/ 	})();
  /******/ 	
  /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
  /******/ 	(() => {
  /******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
  /******/ 	})();
  /******/ 	
  /******/ 	/* webpack/runtime/make namespace object */
  /******/ 	(() => {
  /******/ 		// define __esModule on exports
  /******/ 		__webpack_require__.r = (exports) => {
  /******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
  /******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
  /******/ 			}
  /******/ 			Object.defineProperty(exports, '__esModule', { value: true });
  /******/ 		};
  /******/ 	})();
  /******/ 	
  /************************************************************************/
  var __webpack_exports__ = {};
  // This entry need to be wrapped in an IIFE because it need to be in strict mode.
  (() => {
  "use strict";
  
  // NAMESPACE OBJECT: ./node_modules/axios/lib/platform/common/utils.js
  var common_utils_namespaceObject = {};
  __webpack_require__.r(common_utils_namespaceObject);
  __webpack_require__.d(common_utils_namespaceObject, {
    hasBrowserEnv: () => (hasBrowserEnv),
    hasStandardBrowserEnv: () => (hasStandardBrowserEnv),
    hasStandardBrowserWebWorkerEnv: () => (hasStandardBrowserWebWorkerEnv)
  });
  
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  // EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
  var regenerator = __webpack_require__(4687);
  var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/bind.js
  
  
  function bind(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/utils.js
  
  
  
  
  // utils is a library of generic helper functions non-specific to axios
  
  const {toString: utils_toString} = Object.prototype;
  const {getPrototypeOf} = Object;
  
  const kindOf = (cache => thing => {
      const str = utils_toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(Object.create(null));
  
  const kindOfTest = (type) => {
    type = type.toLowerCase();
    return (thing) => kindOf(thing) === type
  }
  
  const typeOfTest = type => thing => typeof thing === type;
  
  /**
   * Determine if a value is an Array
   *
   * @param {Object} val The value to test
   *
   * @returns {boolean} True if value is an Array, otherwise false
   */
  const {isArray} = Array;
  
  /**
   * Determine if a value is undefined
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if the value is undefined, otherwise false
   */
  const isUndefined = typeOfTest('undefined');
  
  /**
   * Determine if a value is a Buffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Buffer, otherwise false
   */
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
      && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  
  /**
   * Determine if a value is an ArrayBuffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is an ArrayBuffer, otherwise false
   */
  const isArrayBuffer = kindOfTest('ArrayBuffer');
  
  
  /**
   * Determine if a value is a view on an ArrayBuffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
   */
  function isArrayBufferView(val) {
    let result;
    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
      result = ArrayBuffer.isView(val);
    } else {
      result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
    }
    return result;
  }
  
  /**
   * Determine if a value is a String
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a String, otherwise false
   */
  const isString = typeOfTest('string');
  
  /**
   * Determine if a value is a Function
   *
   * @param {*} val The value to test
   * @returns {boolean} True if value is a Function, otherwise false
   */
  const isFunction = typeOfTest('function');
  
  /**
   * Determine if a value is a Number
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Number, otherwise false
   */
  const isNumber = typeOfTest('number');
  
  /**
   * Determine if a value is an Object
   *
   * @param {*} thing The value to test
   *
   * @returns {boolean} True if value is an Object, otherwise false
   */
  const utils_isObject = (thing) => thing !== null && typeof thing === 'object';
  
  /**
   * Determine if a value is a Boolean
   *
   * @param {*} thing The value to test
   * @returns {boolean} True if value is a Boolean, otherwise false
   */
  const isBoolean = thing => thing === true || thing === false;
  
  /**
   * Determine if a value is a plain Object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a plain Object, otherwise false
   */
  const isPlainObject = (val) => {
    if (kindOf(val) !== 'object') {
      return false;
    }
  
    const prototype = getPrototypeOf(val);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
  }
  
  /**
   * Determine if a value is a Date
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Date, otherwise false
   */
  const isDate = kindOfTest('Date');
  
  /**
   * Determine if a value is a File
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a File, otherwise false
   */
  const isFile = kindOfTest('File');
  
  /**
   * Determine if a value is a Blob
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Blob, otherwise false
   */
  const isBlob = kindOfTest('Blob');
  
  /**
   * Determine if a value is a FileList
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a File, otherwise false
   */
  const isFileList = kindOfTest('FileList');
  
  /**
   * Determine if a value is a Stream
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Stream, otherwise false
   */
  const isStream = (val) => utils_isObject(val) && isFunction(val.pipe);
  
  /**
   * Determine if a value is a FormData
   *
   * @param {*} thing The value to test
   *
   * @returns {boolean} True if value is an FormData, otherwise false
   */
  const isFormData = (thing) => {
    let kind;
    return thing && (
      (typeof FormData === 'function' && thing instanceof FormData) || (
        isFunction(thing.append) && (
          (kind = kindOf(thing)) === 'formdata' ||
          // detect form-data instance
          (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
        )
      )
    )
  }
  
  /**
   * Determine if a value is a URLSearchParams object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a URLSearchParams object, otherwise false
   */
  const isURLSearchParams = kindOfTest('URLSearchParams');
  
  /**
   * Trim excess whitespace off the beginning and end of a string
   *
   * @param {String} str The String to trim
   *
   * @returns {String} The String freed of excess whitespace
   */
  const trim = (str) => str.trim ?
    str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
  
  /**
   * Iterate over an Array or an Object invoking a function for each item.
   *
   * If `obj` is an Array callback will be called passing
   * the value, index, and complete array for each item.
   *
   * If 'obj' is an Object callback will be called passing
   * the value, key, and complete object for each property.
   *
   * @param {Object|Array} obj The object to iterate
   * @param {Function} fn The callback to invoke for each item
   *
   * @param {Boolean} [allOwnKeys = false]
   * @returns {any}
   */
  function forEach(obj, fn, {allOwnKeys = false} = {}) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
      return;
    }
  
    let i;
    let l;
  
    // Force an array if not already something iterable
    if (typeof obj !== 'object') {
      /*eslint no-param-reassign:0*/
      obj = [obj];
    }
  
    if (isArray(obj)) {
      // Iterate over array values
      for (i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      // Iterate over object keys
      const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys.length;
      let key;
  
      for (i = 0; i < len; i++) {
        key = keys[i];
        fn.call(null, obj[key], key, obj);
      }
    }
  }
  
  function findKey(obj, key) {
    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while (i-- > 0) {
      _key = keys[i];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  
  const _global = (() => {
    /*eslint no-undef:0*/
    if (typeof globalThis !== "undefined") return globalThis;
    return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
  })();
  
  const isContextDefined = (context) => !isUndefined(context) && context !== _global;
  
  /**
   * Accepts varargs expecting each argument to be an object, then
   * immutably merges the properties of each object and returns result.
   *
   * When multiple objects contain the same key the later object in
   * the arguments list will take precedence.
   *
   * Example:
   *
   * ```js
   * var result = merge({foo: 123}, {foo: 456});
   * console.log(result.foo); // outputs 456
   * ```
   *
   * @param {Object} obj1 Object to merge
   *
   * @returns {Object} Result of all merge properties
   */
  function merge(/* obj1, obj2, obj3, ... */) {
    const {caseless} = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key) => {
      const targetKey = caseless && findKey(result, key) || key;
      if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
        result[targetKey] = merge(result[targetKey], val);
      } else if (isPlainObject(val)) {
        result[targetKey] = merge({}, val);
      } else if (isArray(val)) {
        result[targetKey] = val.slice();
      } else {
        result[targetKey] = val;
      }
    }
  
    for (let i = 0, l = arguments.length; i < l; i++) {
      arguments[i] && forEach(arguments[i], assignValue);
    }
    return result;
  }
  
  /**
   * Extends object a by mutably adding to it the properties of object b.
   *
   * @param {Object} a The object to be extended
   * @param {Object} b The object to copy properties from
   * @param {Object} thisArg The object to bind function to
   *
   * @param {Boolean} [allOwnKeys]
   * @returns {Object} The resulting value of object a
   */
  const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
    forEach(b, (val, key) => {
      if (thisArg && isFunction(val)) {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    }, {allOwnKeys});
    return a;
  }
  
  /**
   * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
   *
   * @param {string} content with BOM
   *
   * @returns {string} content value without BOM
   */
  const stripBOM = (content) => {
    if (content.charCodeAt(0) === 0xFEFF) {
      content = content.slice(1);
    }
    return content;
  }
  
  /**
   * Inherit the prototype methods from one constructor into another
   * @param {function} constructor
   * @param {function} superConstructor
   * @param {object} [props]
   * @param {object} [descriptors]
   *
   * @returns {void}
   */
  const inherits = (constructor, superConstructor, props, descriptors) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, 'super', {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  }
  
  /**
   * Resolve object with deep prototype chain to a flat object
   * @param {Object} sourceObj source object
   * @param {Object} [destObj]
   * @param {Function|Boolean} [filter]
   * @param {Function} [propFilter]
   *
   * @returns {Object}
   */
  const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
    let props;
    let i;
    let prop;
    const merged = {};
  
    destObj = destObj || {};
    // eslint-disable-next-line no-eq-null,eqeqeq
    if (sourceObj == null) return destObj;
  
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i = props.length;
      while (i-- > 0) {
        prop = props[i];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
  
    return destObj;
  }
  
  /**
   * Determines whether a string ends with the characters of a specified string
   *
   * @param {String} str
   * @param {String} searchString
   * @param {Number} [position= 0]
   *
   * @returns {boolean}
   */
  const endsWith = (str, searchString, position) => {
    str = String(str);
    if (position === undefined || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  }
  
  
  /**
   * Returns new array from array like object or null if failed
   *
   * @param {*} [thing]
   *
   * @returns {?Array}
   */
  const toArray = (thing) => {
    if (!thing) return null;
    if (isArray(thing)) return thing;
    let i = thing.length;
    if (!isNumber(i)) return null;
    const arr = new Array(i);
    while (i-- > 0) {
      arr[i] = thing[i];
    }
    return arr;
  }
  
  /**
   * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
   * thing passed in is an instance of Uint8Array
   *
   * @param {TypedArray}
   *
   * @returns {Array}
   */
  // eslint-disable-next-line func-names
  const isTypedArray = (TypedArray => {
    // eslint-disable-next-line func-names
    return thing => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));
  
  /**
   * For each entry in the object, call the function with the key and value.
   *
   * @param {Object<any, any>} obj - The object to iterate over.
   * @param {Function} fn - The function to call for each entry.
   *
   * @returns {void}
   */
  const forEachEntry = (obj, fn) => {
    const generator = obj && obj[Symbol.iterator];
  
    const iterator = generator.call(obj);
  
    let result;
  
    while ((result = iterator.next()) && !result.done) {
      const pair = result.value;
      fn.call(obj, pair[0], pair[1]);
    }
  }
  
  /**
   * It takes a regular expression and a string, and returns an array of all the matches
   *
   * @param {string} regExp - The regular expression to match against.
   * @param {string} str - The string to search.
   *
   * @returns {Array<boolean>}
   */
  const matchAll = (regExp, str) => {
    let matches;
    const arr = [];
  
    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }
  
    return arr;
  }
  
  /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
  const isHTMLForm = kindOfTest('HTMLFormElement');
  
  const toCamelCase = str => {
    return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
      function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };
  
  /* Creating a function that will check if an object has a property. */
  const utils_hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);
  
  /**
   * Determine if a value is a RegExp object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a RegExp object, otherwise false
   */
  const isRegExp = kindOfTest('RegExp');
  
  const reduceDescriptors = (obj, reducer) => {
    const descriptors = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
  
    forEach(descriptors, (descriptor, name) => {
      let ret;
      if ((ret = reducer(descriptor, name, obj)) !== false) {
        reducedDescriptors[name] = ret || descriptor;
      }
    });
  
    Object.defineProperties(obj, reducedDescriptors);
  }
  
  /**
   * Makes all methods read-only
   * @param {Object} obj
   */
  
  const freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name) => {
      // skip restricted props in strict mode
      if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
        return false;
      }
  
      const value = obj[name];
  
      if (!isFunction(value)) return;
  
      descriptor.enumerable = false;
  
      if ('writable' in descriptor) {
        descriptor.writable = false;
        return;
      }
  
      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error('Can not rewrite read-only method \'' + name + '\'');
        };
      }
    });
  }
  
  const toObjectSet = (arrayOrString, delimiter) => {
    const obj = {};
  
    const define = (arr) => {
      arr.forEach(value => {
        obj[value] = true;
      });
    }
  
    isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  
    return obj;
  }
  
  const noop = () => {}
  
  const toFiniteNumber = (value, defaultValue) => {
    value = +value;
    return Number.isFinite(value) ? value : defaultValue;
  }
  
  const ALPHA = 'abcdefghijklmnopqrstuvwxyz'
  
  const DIGIT = '0123456789';
  
  const ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
  }
  
  const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
    let str = '';
    const {length} = alphabet;
    while (size--) {
      str += alphabet[Math.random() * length|0]
    }
  
    return str;
  }
  
  /**
   * If the thing is a FormData object, return true, otherwise return false.
   *
   * @param {unknown} thing - The thing to check.
   *
   * @returns {boolean}
   */
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
  }
  
  const toJSONObject = (obj) => {
    const stack = new Array(10);
  
    const visit = (source, i) => {
  
      if (utils_isObject(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }
  
        if(!('toJSON' in source)) {
          stack[i] = source;
          const target = isArray(source) ? [] : {};
  
          forEach(source, (value, key) => {
            const reducedValue = visit(value, i + 1);
            !isUndefined(reducedValue) && (target[key] = reducedValue);
          });
  
          stack[i] = undefined;
  
          return target;
        }
      }
  
      return source;
    }
  
    return visit(obj, 0);
  }
  
  const isAsyncFn = kindOfTest('AsyncFunction');
  
  const isThenable = (thing) =>
    thing && (utils_isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
  
  /* harmony default export */ const utils = ({
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isBoolean,
    isObject: utils_isObject,
    isPlainObject,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction,
    isStream,
    isURLSearchParams,
    isTypedArray,
    isFileList,
    forEach,
    merge,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty: utils_hasOwnProperty,
    hasOwnProp: utils_hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable
  });
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosError.js
  
  
  
  
  /**
   * Create an Error with the specified message, config, error code, request and response.
   *
   * @param {string} message The error message.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [config] The config.
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   *
   * @returns {Error} The created error.
   */
  function AxiosError(message, code, config, request, response) {
    Error.call(this);
  
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = (new Error()).stack;
    }
  
    this.message = message;
    this.name = 'AxiosError';
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
  }
  
  utils.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils.toJSONObject(this.config),
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    }
  });
  
  const AxiosError_prototype = AxiosError.prototype;
  const descriptors = {};
  
  [
    'ERR_BAD_OPTION_VALUE',
    'ERR_BAD_OPTION',
    'ECONNABORTED',
    'ETIMEDOUT',
    'ERR_NETWORK',
    'ERR_FR_TOO_MANY_REDIRECTS',
    'ERR_DEPRECATED',
    'ERR_BAD_RESPONSE',
    'ERR_BAD_REQUEST',
    'ERR_CANCELED',
    'ERR_NOT_SUPPORT',
    'ERR_INVALID_URL'
  // eslint-disable-next-line func-names
  ].forEach(code => {
    descriptors[code] = {value: code};
  });
  
  Object.defineProperties(AxiosError, descriptors);
  Object.defineProperty(AxiosError_prototype, 'isAxiosError', {value: true});
  
  // eslint-disable-next-line func-names
  AxiosError.from = (error, code, config, request, response, customProps) => {
    const axiosError = Object.create(AxiosError_prototype);
  
    utils.toFlatObject(error, axiosError, function filter(obj) {
      return obj !== Error.prototype;
    }, prop => {
      return prop !== 'isAxiosError';
    });
  
    AxiosError.call(axiosError, error.message, code, config, request, response);
  
    axiosError.cause = error;
  
    axiosError.name = error.name;
  
    customProps && Object.assign(axiosError, customProps);
  
    return axiosError;
  };
  
  /* harmony default export */ const core_AxiosError = (AxiosError);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/null.js
  // eslint-disable-next-line strict
  /* harmony default export */ const helpers_null = (null);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toFormData.js
  
  
  
  
  // temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored
  
  
  /**
   * Determines if the given thing is a array or js object.
   *
   * @param {string} thing - The object or array to be visited.
   *
   * @returns {boolean}
   */
  function isVisitable(thing) {
    return utils.isPlainObject(thing) || utils.isArray(thing);
  }
  
  /**
   * It removes the brackets from the end of a string
   *
   * @param {string} key - The key of the parameter.
   *
   * @returns {string} the key without the brackets.
   */
  function removeBrackets(key) {
    return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;
  }
  
  /**
   * It takes a path, a key, and a boolean, and returns a string
   *
   * @param {string} path - The path to the current key.
   * @param {string} key - The key of the current object being iterated over.
   * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
   *
   * @returns {string} The path to the current key.
   */
  function renderKey(path, key, dots) {
    if (!path) return key;
    return path.concat(key).map(function each(token, i) {
      // eslint-disable-next-line no-param-reassign
      token = removeBrackets(token);
      return !dots && i ? '[' + token + ']' : token;
    }).join(dots ? '.' : '');
  }
  
  /**
   * If the array is an array and none of its elements are visitable, then it's a flat array.
   *
   * @param {Array<any>} arr - The array to check
   *
   * @returns {boolean}
   */
  function isFlatArray(arr) {
    return utils.isArray(arr) && !arr.some(isVisitable);
  }
  
  const predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
  });
  
  /**
   * Convert a data object to FormData
   *
   * @param {Object} obj
   * @param {?Object} [formData]
   * @param {?Object} [options]
   * @param {Function} [options.visitor]
   * @param {Boolean} [options.metaTokens = true]
   * @param {Boolean} [options.dots = false]
   * @param {?Boolean} [options.indexes = false]
   *
   * @returns {Object}
   **/
  
  /**
   * It converts an object into a FormData object
   *
   * @param {Object<any, any>} obj - The object to convert to form data.
   * @param {string} formData - The FormData object to append to.
   * @param {Object<string, any>} options
   *
   * @returns
   */
  function toFormData(obj, formData, options) {
    if (!utils.isObject(obj)) {
      throw new TypeError('target must be an object');
    }
  
    // eslint-disable-next-line no-param-reassign
    formData = formData || new (helpers_null || FormData)();
  
    // eslint-disable-next-line no-param-reassign
    options = utils.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      return !utils.isUndefined(source[option]);
    });
  
    const metaTokens = options.metaTokens;
    // eslint-disable-next-line no-use-before-define
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
    const useBlob = _Blob && utils.isSpecCompliantForm(formData);
  
    if (!utils.isFunction(visitor)) {
      throw new TypeError('visitor must be a function');
    }
  
    function convertValue(value) {
      if (value === null) return '';
  
      if (utils.isDate(value)) {
        return value.toISOString();
      }
  
      if (!useBlob && utils.isBlob(value)) {
        throw new core_AxiosError('Blob is not supported. Use a Buffer instead.');
      }
  
      if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
        return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
      }
  
      return value;
    }
  
    /**
     * Default visitor.
     *
     * @param {*} value
     * @param {String|Number} key
     * @param {Array<String|Number>} path
     * @this {FormData}
     *
     * @returns {boolean} return true to visit the each prop of the value recursively
     */
    function defaultVisitor(value, key, path) {
      let arr = value;
  
      if (value && !path && typeof value === 'object') {
        if (utils.endsWith(key, '{}')) {
          // eslint-disable-next-line no-param-reassign
          key = metaTokens ? key : key.slice(0, -2);
          // eslint-disable-next-line no-param-reassign
          value = JSON.stringify(value);
        } else if (
          (utils.isArray(value) && isFlatArray(value)) ||
          ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))
          )) {
          // eslint-disable-next-line no-param-reassign
          key = removeBrackets(key);
  
          arr.forEach(function each(el, index) {
            !(utils.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
              convertValue(el)
            );
          });
          return false;
        }
      }
  
      if (isVisitable(value)) {
        return true;
      }
  
      formData.append(renderKey(path, key, dots), convertValue(value));
  
      return false;
    }
  
    const stack = [];
  
    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });
  
    function build(value, path) {
      if (utils.isUndefined(value)) return;
  
      if (stack.indexOf(value) !== -1) {
        throw Error('Circular reference detected in ' + path.join('.'));
      }
  
      stack.push(value);
  
      utils.forEach(value, function each(el, key) {
        const result = !(utils.isUndefined(el) || el === null) && visitor.call(
          formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers
        );
  
        if (result === true) {
          build(el, path ? path.concat(key) : [key]);
        }
      });
  
      stack.pop();
    }
  
    if (!utils.isObject(obj)) {
      throw new TypeError('data must be an object');
    }
  
    build(obj);
  
    return formData;
  }
  
  /* harmony default export */ const helpers_toFormData = (toFormData);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js
  
  
  
  
  /**
   * It encodes a string by replacing all characters that are not in the unreserved set with
   * their percent-encoded equivalents
   *
   * @param {string} str - The string to encode.
   *
   * @returns {string} The encoded string.
   */
  function encode(str) {
    const charMap = {
      '!': '%21',
      "'": '%27',
      '(': '%28',
      ')': '%29',
      '~': '%7E',
      '%20': '+',
      '%00': '\x00'
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
      return charMap[match];
    });
  }
  
  /**
   * It takes a params object and converts it to a FormData object
   *
   * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
   * @param {Object<string, any>} options - The options object passed to the Axios constructor.
   *
   * @returns {void}
   */
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];
  
    params && helpers_toFormData(params, this, options);
  }
  
  const AxiosURLSearchParams_prototype = AxiosURLSearchParams.prototype;
  
  AxiosURLSearchParams_prototype.append = function append(name, value) {
    this._pairs.push([name, value]);
  };
  
  AxiosURLSearchParams_prototype.toString = function toString(encoder) {
    const _encode = encoder ? function(value) {
      return encoder.call(this, value, encode);
    } : encode;
  
    return this._pairs.map(function each(pair) {
      return _encode(pair[0]) + '=' + _encode(pair[1]);
    }, '').join('&');
  };
  
  /* harmony default export */ const helpers_AxiosURLSearchParams = (AxiosURLSearchParams);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/buildURL.js
  
  
  
  
  
  /**
   * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
   * URI encoded counterparts
   *
   * @param {string} val The value to be encoded.
   *
   * @returns {string} The encoded value.
   */
  function buildURL_encode(val) {
    return encodeURIComponent(val).
      replace(/%3A/gi, ':').
      replace(/%24/g, '$').
      replace(/%2C/gi, ',').
      replace(/%20/g, '+').
      replace(/%5B/gi, '[').
      replace(/%5D/gi, ']');
  }
  
  /**
   * Build a URL by appending params to the end
   *
   * @param {string} url The base of the url (e.g., http://www.google.com)
   * @param {object} [params] The params to be appended
   * @param {?object} options
   *
   * @returns {string} The formatted url
   */
  function buildURL(url, params, options) {
    /*eslint no-param-reassign:0*/
    if (!params) {
      return url;
    }
    
    const _encode = options && options.encode || buildURL_encode;
  
    const serializeFn = options && options.serialize;
  
    let serializedParams;
  
    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils.isURLSearchParams(params) ?
        params.toString() :
        new helpers_AxiosURLSearchParams(params, options).toString(_encode);
    }
  
    if (serializedParams) {
      const hashmarkIndex = url.indexOf("#");
  
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }
  
    return url;
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/core/InterceptorManager.js
  
  
  
  
  class InterceptorManager {
    constructor() {
      this.handlers = [];
    }
  
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }
  
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    }
  
    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }
  
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    }
  }
  
  /* harmony default export */ const core_InterceptorManager = (InterceptorManager);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/transitional.js
  
  
  /* harmony default export */ const defaults_transitional = ({
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  });
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
  
  
  
  /* harmony default export */ const classes_URLSearchParams = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : helpers_AxiosURLSearchParams);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/FormData.js
  
  
  /* harmony default export */ const classes_FormData = (typeof FormData !== 'undefined' ? FormData : null);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/Blob.js
  
  
  /* harmony default export */ const classes_Blob = (typeof Blob !== 'undefined' ? Blob : null);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/index.js
  
  
  
  
  /* harmony default export */ const browser = ({
    isBrowser: true,
    classes: {
      URLSearchParams: classes_URLSearchParams,
      FormData: classes_FormData,
      Blob: classes_Blob
    },
    protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
  });
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/common/utils.js
  const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';
  
  /**
   * Determine if we're running in a standard browser environment
   *
   * This allows axios to run in a web worker, and react-native.
   * Both environments support XMLHttpRequest, but not fully standard globals.
   *
   * web workers:
   *  typeof window -> undefined
   *  typeof document -> undefined
   *
   * react-native:
   *  navigator.product -> 'ReactNative'
   * nativescript
   *  navigator.product -> 'NativeScript' or 'NS'
   *
   * @returns {boolean}
   */
  const hasStandardBrowserEnv = (
    (product) => {
      return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0
    })(typeof navigator !== 'undefined' && navigator.product);
  
  /**
   * Determine if we're running in a standard browser webWorker environment
   *
   * Although the `isStandardBrowserEnv` method indicates that
   * `allows axios to run in a web worker`, the WebWorker will still be
   * filtered out due to its judgment standard
   * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
   * This leads to a problem when axios post `FormData` in webWorker
   */
  const hasStandardBrowserWebWorkerEnv = (() => {
    return (
      typeof WorkerGlobalScope !== 'undefined' &&
      // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope &&
      typeof self.importScripts === 'function'
    );
  })();
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/index.js
  
  
  
  /* harmony default export */ const platform = ({
    ...common_utils_namespaceObject,
    ...browser
  });
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toURLEncodedForm.js
  
  
  
  
  
  
  function toURLEncodedForm(data, options) {
    return helpers_toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
      visitor: function(value, key, path, helpers) {
        if (platform.isNode && utils.isBuffer(value)) {
          this.append(key, value.toString('base64'));
          return false;
        }
  
        return helpers.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/formDataToJSON.js
  
  
  
  
  /**
   * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
   *
   * @param {string} name - The name of the property to get.
   *
   * @returns An array of strings.
   */
  function parsePropPath(name) {
    // foo[x][y][z]
    // foo.x.y.z
    // foo-x-y-z
    // foo x y z
    return utils.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
      return match[0] === '[]' ? '' : match[1] || match[0];
    });
  }
  
  /**
   * Convert an array to an object.
   *
   * @param {Array<any>} arr - The array to convert to an object.
   *
   * @returns An object with the same keys and values as the array.
   */
  function arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      obj[key] = arr[key];
    }
    return obj;
  }
  
  /**
   * It takes a FormData object and returns a JavaScript object
   *
   * @param {string} formData The FormData object to convert to JSON.
   *
   * @returns {Object<string, any> | null} The converted object.
   */
  function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
      let name = path[index++];
      const isNumericKey = Number.isFinite(+name);
      const isLast = index >= path.length;
      name = !name && utils.isArray(target) ? target.length : name;
  
      if (isLast) {
        if (utils.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }
  
        return !isNumericKey;
      }
  
      if (!target[name] || !utils.isObject(target[name])) {
        target[name] = [];
      }
  
      const result = buildPath(path, value, target[name], index);
  
      if (result && utils.isArray(target[name])) {
        target[name] = arrayToObject(target[name]);
      }
  
      return !isNumericKey;
    }
  
    if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
      const obj = {};
  
      utils.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath(name), value, obj, 0);
      });
  
      return obj;
    }
  
    return null;
  }
  
  /* harmony default export */ const helpers_formDataToJSON = (formDataToJSON);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/index.js
  
  
  
  
  
  
  
  
  
  
  /**
   * It takes a string, tries to parse it, and if it fails, it returns the stringified version
   * of the input
   *
   * @param {any} rawValue - The value to be stringified.
   * @param {Function} parser - A function that parses a string into a JavaScript object.
   * @param {Function} encoder - A function that takes a value and returns a string.
   *
   * @returns {string} A stringified version of the rawValue.
   */
  function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
      } catch (e) {
        if (e.name !== 'SyntaxError') {
          throw e;
        }
      }
    }
  
    return (encoder || JSON.stringify)(rawValue);
  }
  
  const defaults = {
  
    transitional: defaults_transitional,
  
    adapter: ['xhr', 'http'],
  
    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || '';
      const hasJSONContentType = contentType.indexOf('application/json') > -1;
      const isObjectPayload = utils.isObject(data);
  
      if (isObjectPayload && utils.isHTMLForm(data)) {
        data = new FormData(data);
      }
  
      const isFormData = utils.isFormData(data);
  
      if (isFormData) {
        if (!hasJSONContentType) {
          return data;
        }
        return hasJSONContentType ? JSON.stringify(helpers_formDataToJSON(data)) : data;
      }
  
      if (utils.isArrayBuffer(data) ||
        utils.isBuffer(data) ||
        utils.isStream(data) ||
        utils.isFile(data) ||
        utils.isBlob(data)
      ) {
        return data;
      }
      if (utils.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils.isURLSearchParams(data)) {
        headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
        return data.toString();
      }
  
      let isFileList;
  
      if (isObjectPayload) {
        if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }
  
        if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
          const _FormData = this.env && this.env.FormData;
  
          return helpers_toFormData(
            isFileList ? {'files[]': data} : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }
  
      if (isObjectPayload || hasJSONContentType ) {
        headers.setContentType('application/json', false);
        return stringifySafely(data);
      }
  
      return data;
    }],
  
    transformResponse: [function transformResponse(data) {
      const transitional = this.transitional || defaults.transitional;
      const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
      const JSONRequested = this.responseType === 'json';
  
      if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
        const silentJSONParsing = transitional && transitional.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
  
        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === 'SyntaxError') {
              throw core_AxiosError.from(e, core_AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }
  
      return data;
    }],
  
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
  
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
  
    maxContentLength: -1,
    maxBodyLength: -1,
  
    env: {
      FormData: platform.classes.FormData,
      Blob: platform.classes.Blob
    },
  
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
  
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*',
        'Content-Type': undefined
      }
    }
  };
  
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
    defaults.headers[method] = {};
  });
  
  /* harmony default export */ const lib_defaults = (defaults);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseHeaders.js
  
  
  
  
  // RawAxiosHeaders whose duplicates are ignored by node
  // c.f. https://nodejs.org/api/http.html#http_message_headers
  const ignoreDuplicateOf = utils.toObjectSet([
    'age', 'authorization', 'content-length', 'content-type', 'etag',
    'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
    'last-modified', 'location', 'max-forwards', 'proxy-authorization',
    'referer', 'retry-after', 'user-agent'
  ]);
  
  /**
   * Parse headers into an object
   *
   * ```
   * Date: Wed, 27 Aug 2014 08:58:49 GMT
   * Content-Type: application/json
   * Connection: keep-alive
   * Transfer-Encoding: chunked
   * ```
   *
   * @param {String} rawHeaders Headers needing to be parsed
   *
   * @returns {Object} Headers parsed into an object
   */
  /* harmony default export */ const parseHeaders = (rawHeaders => {
    const parsed = {};
    let key;
    let val;
    let i;
  
    rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
      i = line.indexOf(':');
      key = line.substring(0, i).trim().toLowerCase();
      val = line.substring(i + 1).trim();
  
      if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
        return;
      }
  
      if (key === 'set-cookie') {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    });
  
    return parsed;
  });
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosHeaders.js
  
  
  
  
  
  const $internals = Symbol('internals');
  
  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }
  
  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }
  
    return utils.isArray(value) ? value.map(normalizeValue) : String(value);
  }
  
  function parseTokens(str) {
    const tokens = Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;
  
    while ((match = tokensRE.exec(str))) {
      tokens[match[1]] = match[2];
    }
  
    return tokens;
  }
  
  const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
  
  function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
    if (utils.isFunction(filter)) {
      return filter.call(this, value, header);
    }
  
    if (isHeaderNameFilter) {
      value = header;
    }
  
    if (!utils.isString(value)) return;
  
    if (utils.isString(filter)) {
      return value.indexOf(filter) !== -1;
    }
  
    if (utils.isRegExp(filter)) {
      return filter.test(value);
    }
  }
  
  function formatHeader(header) {
    return header.trim()
      .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
  }
  
  function buildAccessors(obj, header) {
    const accessorName = utils.toCamelCase(' ' + header);
  
    ['get', 'set', 'has'].forEach(methodName => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  
  class AxiosHeaders {
    constructor(headers) {
      headers && this.set(headers);
    }
  
    set(header, valueOrRewrite, rewrite) {
      const self = this;
  
      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);
  
        if (!lHeader) {
          throw new Error('header name must be a non-empty string');
        }
  
        const key = utils.findKey(self, lHeader);
  
        if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
          self[key || _header] = normalizeValue(_value);
        }
      }
  
      const setHeaders = (headers, _rewrite) =>
        utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
  
      if (utils.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite)
      } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders(header), valueOrRewrite);
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }
  
      return this;
    }
  
    get(header, parser) {
      header = normalizeHeader(header);
  
      if (header) {
        const key = utils.findKey(this, header);
  
        if (key) {
          const value = this[key];
  
          if (!parser) {
            return value;
          }
  
          if (parser === true) {
            return parseTokens(value);
          }
  
          if (utils.isFunction(parser)) {
            return parser.call(this, value, key);
          }
  
          if (utils.isRegExp(parser)) {
            return parser.exec(value);
          }
  
          throw new TypeError('parser must be boolean|regexp|function');
        }
      }
    }
  
    has(header, matcher) {
      header = normalizeHeader(header);
  
      if (header) {
        const key = utils.findKey(this, header);
  
        return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
      }
  
      return false;
    }
  
    delete(header, matcher) {
      const self = this;
      let deleted = false;
  
      function deleteHeader(_header) {
        _header = normalizeHeader(_header);
  
        if (_header) {
          const key = utils.findKey(self, _header);
  
          if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
            delete self[key];
  
            deleted = true;
          }
        }
      }
  
      if (utils.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }
  
      return deleted;
    }
  
    clear(matcher) {
      const keys = Object.keys(this);
      let i = keys.length;
      let deleted = false;
  
      while (i--) {
        const key = keys[i];
        if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
          delete this[key];
          deleted = true;
        }
      }
  
      return deleted;
    }
  
    normalize(format) {
      const self = this;
      const headers = {};
  
      utils.forEach(this, (value, header) => {
        const key = utils.findKey(headers, header);
  
        if (key) {
          self[key] = normalizeValue(value);
          delete self[header];
          return;
        }
  
        const normalized = format ? formatHeader(header) : String(header).trim();
  
        if (normalized !== header) {
          delete self[header];
        }
  
        self[normalized] = normalizeValue(value);
  
        headers[normalized] = true;
      });
  
      return this;
    }
  
    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }
  
    toJSON(asStrings) {
      const obj = Object.create(null);
  
      utils.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);
      });
  
      return obj;
    }
  
    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }
  
    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
    }
  
    get [Symbol.toStringTag]() {
      return 'AxiosHeaders';
    }
  
    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }
  
    static concat(first, ...targets) {
      const computed = new this(first);
  
      targets.forEach((target) => computed.set(target));
  
      return computed;
    }
  
    static accessor(header) {
      const internals = this[$internals] = (this[$internals] = {
        accessors: {}
      });
  
      const accessors = internals.accessors;
      const prototype = this.prototype;
  
      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);
  
        if (!accessors[lHeader]) {
          buildAccessors(prototype, _header);
          accessors[lHeader] = true;
        }
      }
  
      utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
  
      return this;
    }
  }
  
  AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);
  
  // reserved names hotfix
  utils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
    let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
    return {
      get: () => value,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    }
  });
  
  utils.freezeMethods(AxiosHeaders);
  
  /* harmony default export */ const core_AxiosHeaders = (AxiosHeaders);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/core/transformData.js
  
  
  
  
  
  
  /**
   * Transform the data for a request or a response
   *
   * @param {Array|Function} fns A single function or Array of functions
   * @param {?Object} response The response object
   *
   * @returns {*} The resulting transformed data
   */
  function transformData(fns, response) {
    const config = this || lib_defaults;
    const context = response || config;
    const headers = core_AxiosHeaders.from(context.headers);
    let data = context.data;
  
    utils.forEach(fns, function transform(fn) {
      data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
    });
  
    headers.normalize();
  
    return data;
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/isCancel.js
  
  
  function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CanceledError.js
  
  
  
  
  
  /**
   * A `CanceledError` is an object that is thrown when an operation is canceled.
   *
   * @param {string=} message The message.
   * @param {Object=} config The config.
   * @param {Object=} request The request.
   *
   * @returns {CanceledError} The created error.
   */
  function CanceledError(message, config, request) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    core_AxiosError.call(this, message == null ? 'canceled' : message, core_AxiosError.ERR_CANCELED, config, request);
    this.name = 'CanceledError';
  }
  
  utils.inherits(CanceledError, core_AxiosError, {
    __CANCEL__: true
  });
  
  /* harmony default export */ const cancel_CanceledError = (CanceledError);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/core/settle.js
  
  
  
  
  /**
   * Resolve or reject a Promise based on response status.
   *
   * @param {Function} resolve A function that resolves the promise.
   * @param {Function} reject A function that rejects the promise.
   * @param {object} response The response.
   *
   * @returns {object} The response.
   */
  function settle(resolve, reject, response) {
    const validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(new core_AxiosError(
        'Request failed with status code ' + response.status,
        [core_AxiosError.ERR_BAD_REQUEST, core_AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/cookies.js
  
  
  
  /* harmony default export */ const cookies = (platform.hasStandardBrowserEnv ?
  
    // Standard browser envs support document.cookie
    {
      write(name, value, expires, path, domain, secure) {
        const cookie = [name + '=' + encodeURIComponent(value)];
  
        utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());
  
        utils.isString(path) && cookie.push('path=' + path);
  
        utils.isString(domain) && cookie.push('domain=' + domain);
  
        secure === true && cookie.push('secure');
  
        document.cookie = cookie.join('; ');
      },
  
      read(name) {
        const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },
  
      remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    }
  
    :
  
    // Non-standard browser env (web workers, react-native) lack needed support.
    {
      write() {},
      read() {
        return null;
      },
      remove() {}
    });
  
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAbsoluteURL.js
  
  
  /**
   * Determines whether the specified URL is absolute
   *
   * @param {string} url The URL to test
   *
   * @returns {boolean} True if the specified URL is absolute, otherwise false
   */
  function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/combineURLs.js
  
  
  /**
   * Creates a new URL by combining the specified URLs
   *
   * @param {string} baseURL The base URL
   * @param {string} relativeURL The relative URL
   *
   * @returns {string} The combined URL
   */
  function combineURLs(baseURL, relativeURL) {
    return relativeURL
      ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
      : baseURL;
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/core/buildFullPath.js
  
  
  
  
  
  /**
   * Creates a new URL by combining the baseURL with the requestedURL,
   * only when the requestedURL is not already an absolute URL.
   * If the requestURL is absolute, this function returns the requestedURL untouched.
   *
   * @param {string} baseURL The base URL
   * @param {string} requestedURL Absolute or relative URL to combine
   *
   * @returns {string} The combined full path
   */
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isURLSameOrigin.js
  
  
  
  
  
  /* harmony default export */ const isURLSameOrigin = (platform.hasStandardBrowserEnv ?
  
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement('a');
      let originURL;
  
      /**
      * Parse a URL to discover its components
      *
      * @param {String} url The URL to be parsed
      * @returns {Object}
      */
      function resolveURL(url) {
        let href = url;
  
        if (msie) {
          // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }
  
        urlParsingNode.setAttribute('href', href);
  
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }
  
      originURL = resolveURL(window.location.href);
  
      /**
      * Determine if a URL shares the same origin as the current location
      *
      * @param {String} requestURL The URL to test
      * @returns {boolean} True if URL shares the same origin, otherwise false
      */
      return function isURLSameOrigin(requestURL) {
        const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :
  
    // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })());
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseProtocol.js
  
  
  function parseProtocol(url) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || '';
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/speedometer.js
  
  
  /**
   * Calculate data maxRate
   * @param {Number} [samplesCount= 10]
   * @param {Number} [min= 1000]
   * @returns {Function}
   */
  function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
  
    min = min !== undefined ? min : 1000;
  
    return function push(chunkLength) {
      const now = Date.now();
  
      const startedAt = timestamps[tail];
  
      if (!firstSampleTS) {
        firstSampleTS = now;
      }
  
      bytes[head] = chunkLength;
      timestamps[head] = now;
  
      let i = tail;
      let bytesCount = 0;
  
      while (i !== head) {
        bytesCount += bytes[i++];
        i = i % samplesCount;
      }
  
      head = (head + 1) % samplesCount;
  
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
  
      if (now - firstSampleTS < min) {
        return;
      }
  
      const passed = startedAt && now - startedAt;
  
      return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
    };
  }
  
  /* harmony default export */ const helpers_speedometer = (speedometer);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/xhr.js
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  function progressEventReducer(listener, isDownloadStream) {
    let bytesNotified = 0;
    const _speedometer = helpers_speedometer(50, 250);
  
    return e => {
      const loaded = e.loaded;
      const total = e.lengthComputable ? e.total : undefined;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;
  
      bytesNotified = loaded;
  
      const data = {
        loaded,
        total,
        progress: total ? (loaded / total) : undefined,
        bytes: progressBytes,
        rate: rate ? rate : undefined,
        estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
        event: e
      };
  
      data[isDownloadStream ? 'download' : 'upload'] = true;
  
      listener(data);
    };
  }
  
  const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';
  
  /* harmony default export */ const xhr = (isXHRAdapterSupported && function (config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      let requestData = config.data;
      const requestHeaders = core_AxiosHeaders.from(config.headers).normalize();
      let {responseType, withXSRFToken} = config;
      let onCanceled;
      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }
  
        if (config.signal) {
          config.signal.removeEventListener('abort', onCanceled);
        }
      }
  
      let contentType;
  
      if (utils.isFormData(requestData)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          requestHeaders.setContentType(false); // Let the browser set it
        } else if ((contentType = requestHeaders.getContentType()) !== false) {
          // fix semicolon duplication issue for ReactNative FormData implementation
          const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
          requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
        }
      }
  
      let request = new XMLHttpRequest();
  
      // HTTP basic authentication
      if (config.auth) {
        const username = config.auth.username || '';
        const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
        requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
      }
  
      const fullPath = buildFullPath(config.baseURL, config.url);
  
      request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
  
      // Set the request timeout in MS
      request.timeout = config.timeout;
  
      function onloadend() {
        if (!request) {
          return;
        }
        // Prepare the response
        const responseHeaders = core_AxiosHeaders.from(
          'getAllResponseHeaders' in request && request.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
          request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };
  
        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
  
        // Clean up request
        request = null;
      }
  
      if ('onloadend' in request) {
        // Use onloadend if available
        request.onloadend = onloadend;
      } else {
        // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
  
          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }
          // readystate handler is calling before onerror or ontimeout handlers,
          // so we should call onloadend on the next 'tick'
          setTimeout(onloadend);
        };
      }
  
      // Handle browser request cancellation (as opposed to a manual cancellation)
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }
  
        reject(new core_AxiosError('Request aborted', core_AxiosError.ECONNABORTED, config, request));
  
        // Clean up request
        request = null;
      };
  
      // Handle low level network errors
      request.onerror = function handleError() {
        // Real errors are hidden from us by the browser
        // onerror should only fire if it's a network error
        reject(new core_AxiosError('Network Error', core_AxiosError.ERR_NETWORK, config, request));
  
        // Clean up request
        request = null;
      };
  
      // Handle timeout
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
        const transitional = config.transitional || defaults_transitional;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(new core_AxiosError(
          timeoutErrorMessage,
          transitional.clarifyTimeoutError ? core_AxiosError.ETIMEDOUT : core_AxiosError.ECONNABORTED,
          config,
          request));
  
        // Clean up request
        request = null;
      };
  
      // Add xsrf header
      // This is only done if running in a standard browser environment.
      // Specifically not if we're in a web worker, or react-native.
      if(platform.hasStandardBrowserEnv) {
        withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));
  
        if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(fullPath))) {
          // Add xsrf header
          const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);
  
          if (xsrfValue) {
            requestHeaders.set(config.xsrfHeaderName, xsrfValue);
          }
        }
      }
  
      // Remove Content-Type if data is undefined
      requestData === undefined && requestHeaders.setContentType(null);
  
      // Add headers to the request
      if ('setRequestHeader' in request) {
        utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
          request.setRequestHeader(key, val);
        });
      }
  
      // Add withCredentials to request if needed
      if (!utils.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }
  
      // Add responseType to request if needed
      if (responseType && responseType !== 'json') {
        request.responseType = config.responseType;
      }
  
      // Handle progress if needed
      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
      }
  
      // Not all browsers support upload events
      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
      }
  
      if (config.cancelToken || config.signal) {
        // Handle cancellation
        // eslint-disable-next-line func-names
        onCanceled = cancel => {
          if (!request) {
            return;
          }
          reject(!cancel || cancel.type ? new cancel_CanceledError(null, config, request) : cancel);
          request.abort();
          request = null;
        };
  
        config.cancelToken && config.cancelToken.subscribe(onCanceled);
        if (config.signal) {
          config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
        }
      }
  
      const protocol = parseProtocol(fullPath);
  
      if (protocol && platform.protocols.indexOf(protocol) === -1) {
        reject(new core_AxiosError('Unsupported protocol ' + protocol + ':', core_AxiosError.ERR_BAD_REQUEST, config));
        return;
      }
  
  
      // Send the request
      request.send(requestData || null);
    });
  });
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/adapters.js
  
  
  
  
  
  const knownAdapters = {
    http: helpers_null,
    xhr: xhr
  }
  
  utils.forEach(knownAdapters, (fn, value) => {
    if (fn) {
      try {
        Object.defineProperty(fn, 'name', {value});
      } catch (e) {
        // eslint-disable-next-line no-empty
      }
      Object.defineProperty(fn, 'adapterName', {value});
    }
  });
  
  const renderReason = (reason) => `- ${reason}`;
  
  const isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;
  
  /* harmony default export */ const adapters = ({
    getAdapter: (adapters) => {
      adapters = utils.isArray(adapters) ? adapters : [adapters];
  
      const {length} = adapters;
      let nameOrAdapter;
      let adapter;
  
      const rejectedReasons = {};
  
      for (let i = 0; i < length; i++) {
        nameOrAdapter = adapters[i];
        let id;
  
        adapter = nameOrAdapter;
  
        if (!isResolvedHandle(nameOrAdapter)) {
          adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
  
          if (adapter === undefined) {
            throw new core_AxiosError(`Unknown adapter '${id}'`);
          }
        }
  
        if (adapter) {
          break;
        }
  
        rejectedReasons[id || '#' + i] = adapter;
      }
  
      if (!adapter) {
  
        const reasons = Object.entries(rejectedReasons)
          .map(([id, state]) => `adapter ${id} ` +
            (state === false ? 'is not supported by the environment' : 'is not available in the build')
          );
  
        let s = length ?
          (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
          'as no adapter specified';
  
        throw new core_AxiosError(
          `There is no suitable adapter to dispatch the request ` + s,
          'ERR_NOT_SUPPORT'
        );
      }
  
      return adapter;
    },
    adapters: knownAdapters
  });
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/core/dispatchRequest.js
  
  
  
  
  
  
  
  
  
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   *
   * @param {Object} config The config that is to be used for the request
   *
   * @returns {void}
   */
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
  
    if (config.signal && config.signal.aborted) {
      throw new cancel_CanceledError(null, config);
    }
  }
  
  /**
   * Dispatch a request to the server using the configured adapter.
   *
   * @param {object} config The config that is to be used for the request
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);
  
    config.headers = core_AxiosHeaders.from(config.headers);
  
    // Transform request data
    config.data = transformData.call(
      config,
      config.transformRequest
    );
  
    if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
      config.headers.setContentType('application/x-www-form-urlencoded', false);
    }
  
    const adapter = adapters.getAdapter(config.adapter || lib_defaults.adapter);
  
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
  
      // Transform response data
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );
  
      response.headers = core_AxiosHeaders.from(response.headers);
  
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
  
        // Transform response data
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = core_AxiosHeaders.from(reason.response.headers);
        }
      }
  
      return Promise.reject(reason);
    });
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/core/mergeConfig.js
  
  
  
  
  
  const headersToObject = (thing) => thing instanceof core_AxiosHeaders ? thing.toJSON() : thing;
  
  /**
   * Config-specific merge-function which creates a new config-object
   * by merging two configuration objects together.
   *
   * @param {Object} config1
   * @param {Object} config2
   *
   * @returns {Object} New object resulting from merging config2 to config1
   */
  function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    const config = {};
  
    function getMergedValue(target, source, caseless) {
      if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
        return utils.merge.call({caseless}, target, source);
      } else if (utils.isPlainObject(source)) {
        return utils.merge({}, source);
      } else if (utils.isArray(source)) {
        return source.slice();
      }
      return source;
    }
  
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(a, b, caseless) {
      if (!utils.isUndefined(b)) {
        return getMergedValue(a, b, caseless);
      } else if (!utils.isUndefined(a)) {
        return getMergedValue(undefined, a, caseless);
      }
    }
  
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(a, b) {
      if (!utils.isUndefined(b)) {
        return getMergedValue(undefined, b);
      }
    }
  
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(a, b) {
      if (!utils.isUndefined(b)) {
        return getMergedValue(undefined, b);
      } else if (!utils.isUndefined(a)) {
        return getMergedValue(undefined, a);
      }
    }
  
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(undefined, a);
      }
    }
  
    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      withXSRFToken: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
    };
  
    utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
      const merge = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge(config1[prop], config2[prop], prop);
      (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
    });
  
    return config;
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/env/data.js
  const VERSION = "1.6.2";
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/validator.js
  
  
  
  
  
  const validators = {};
  
  // eslint-disable-next-line func-names
  ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
    validators[type] = function validator(thing) {
      return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
  });
  
  const deprecatedWarnings = {};
  
  /**
   * Transitional option validator
   *
   * @param {function|boolean?} validator - set to false if the transitional option has been removed
   * @param {string?} version - deprecated version / removed since version
   * @param {string?} message - some message with additional info
   *
   * @returns {function}
   */
  validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
      return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
    }
  
    // eslint-disable-next-line func-names
    return (value, opt, opts) => {
      if (validator === false) {
        throw new core_AxiosError(
          formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
          core_AxiosError.ERR_DEPRECATED
        );
      }
  
      if (version && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        // eslint-disable-next-line no-console
        console.warn(
          formatMessage(
            opt,
            ' has been deprecated since v' + version + ' and will be removed in the near future'
          )
        );
      }
  
      return validator ? validator(value, opt, opts) : true;
    };
  };
  
  /**
   * Assert object's properties type
   *
   * @param {object} options
   * @param {object} schema
   * @param {boolean?} allowUnknown
   *
   * @returns {object}
   */
  
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== 'object') {
      throw new core_AxiosError('options must be an object', core_AxiosError.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i = keys.length;
    while (i-- > 0) {
      const opt = keys[i];
      const validator = schema[opt];
      if (validator) {
        const value = options[opt];
        const result = value === undefined || validator(value, opt, options);
        if (result !== true) {
          throw new core_AxiosError('option ' + opt + ' must be ' + result, core_AxiosError.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new core_AxiosError('Unknown option ' + opt, core_AxiosError.ERR_BAD_OPTION);
      }
    }
  }
  
  /* harmony default export */ const validator = ({
    assertOptions,
    validators
  });
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/core/Axios.js
  
  
  
  
  
  
  
  
  
  
  
  const Axios_validators = validator.validators;
  
  /**
   * Create a new instance of Axios
   *
   * @param {Object} instanceConfig The default config for the instance
   *
   * @return {Axios} A new instance of Axios
   */
  class Axios {
    constructor(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new core_InterceptorManager(),
        response: new core_InterceptorManager()
      };
    }
  
    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
  
      config = mergeConfig(this.defaults, config);
  
      const {transitional, paramsSerializer, headers} = config;
  
      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: Axios_validators.transitional(Axios_validators.boolean),
          forcedJSONParsing: Axios_validators.transitional(Axios_validators.boolean),
          clarifyTimeoutError: Axios_validators.transitional(Axios_validators.boolean)
        }, false);
      }
  
      if (paramsSerializer != null) {
        if (utils.isFunction(paramsSerializer)) {
          config.paramsSerializer = {
            serialize: paramsSerializer
          }
        } else {
          validator.assertOptions(paramsSerializer, {
            encode: Axios_validators.function,
            serialize: Axios_validators.function
          }, true);
        }
      }
  
      // Set config.method
      config.method = (config.method || this.defaults.method || 'get').toLowerCase();
  
      // Flatten headers
      let contextHeaders = headers && utils.merge(
        headers.common,
        headers[config.method]
      );
  
      headers && utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        (method) => {
          delete headers[method];
        }
      );
  
      config.headers = core_AxiosHeaders.concat(contextHeaders, headers);
  
      // filter out skipped interceptors
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }
  
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
  
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
  
      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
  
      let promise;
      let i = 0;
      let len;
  
      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), undefined];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len = chain.length;
  
        promise = Promise.resolve(config);
  
        while (i < len) {
          promise = promise.then(chain[i++], chain[i++]);
        }
  
        return promise;
      }
  
      len = requestInterceptorChain.length;
  
      let newConfig = config;
  
      i = 0;
  
      while (i < len) {
        const onFulfilled = requestInterceptorChain[i++];
        const onRejected = requestInterceptorChain[i++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }
  
      try {
        promise = dispatchRequest.call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
  
      i = 0;
      len = responseInterceptorChain.length;
  
      while (i < len) {
        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
      }
  
      return promise;
    }
  
    getUri(config) {
      config = mergeConfig(this.defaults, config);
      const fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    }
  }
  
  // Provide aliases for supported request methods
  utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    /*eslint func-names:0*/
    Axios.prototype[method] = function(url, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        url,
        data: (config || {}).data
      }));
    };
  });
  
  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    /*eslint func-names:0*/
  
    function generateHTTPMethod(isForm) {
      return function httpMethod(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          headers: isForm ? {
            'Content-Type': 'multipart/form-data'
          } : {},
          url,
          data
        }));
      };
    }
  
    Axios.prototype[method] = generateHTTPMethod();
  
    Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
  });
  
  /* harmony default export */ const core_Axios = (Axios);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CancelToken.js
  
  
  
  
  /**
   * A `CancelToken` is an object that can be used to request cancellation of an operation.
   *
   * @param {Function} executor The executor function.
   *
   * @returns {CancelToken}
   */
  class CancelToken {
    constructor(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }
  
      let resolvePromise;
  
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
  
      const token = this;
  
      // eslint-disable-next-line func-names
      this.promise.then(cancel => {
        if (!token._listeners) return;
  
        let i = token._listeners.length;
  
        while (i-- > 0) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
  
      // eslint-disable-next-line func-names
      this.promise.then = onfulfilled => {
        let _resolve;
        // eslint-disable-next-line func-names
        const promise = new Promise(resolve => {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
  
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
  
        return promise;
      };
  
      executor(function cancel(message, config, request) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }
  
        token.reason = new cancel_CanceledError(message, config, request);
        resolvePromise(token.reason);
      });
    }
  
    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
  
    /**
     * Subscribe to the cancel signal
     */
  
    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
  
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }
  
    /**
     * Unsubscribe from the cancel signal
     */
  
    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }
  
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel;
      const token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    }
  }
  
  /* harmony default export */ const cancel_CancelToken = (CancelToken);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/spread.js
  
  
  /**
   * Syntactic sugar for invoking a function and expanding an array for arguments.
   *
   * Common use case would be to use `Function.prototype.apply`.
   *
   *  ```js
   *  function f(x, y, z) {}
   *  var args = [1, 2, 3];
   *  f.apply(null, args);
   *  ```
   *
   * With `spread` this example can be re-written.
   *
   *  ```js
   *  spread(function(x, y, z) {})([1, 2, 3]);
   *  ```
   *
   * @param {Function} callback
   *
   * @returns {Function}
   */
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAxiosError.js
  
  
  
  
  /**
   * Determines whether the payload is an error thrown by Axios
   *
   * @param {*} payload The value to test
   *
   * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
   */
  function isAxiosError(payload) {
    return utils.isObject(payload) && (payload.isAxiosError === true);
  }
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/HttpStatusCode.js
  const HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511,
  };
  
  Object.entries(HttpStatusCode).forEach(([key, value]) => {
    HttpStatusCode[value] = key;
  });
  
  /* harmony default export */ const helpers_HttpStatusCode = (HttpStatusCode);
  
  ;// CONCATENATED MODULE: ./node_modules/axios/lib/axios.js
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  /**
   * Create an instance of Axios
   *
   * @param {Object} defaultConfig The default config for the instance
   *
   * @returns {Axios} A new instance of Axios
   */
  function createInstance(defaultConfig) {
    const context = new core_Axios(defaultConfig);
    const instance = bind(core_Axios.prototype.request, context);
  
    // Copy axios.prototype to instance
    utils.extend(instance, core_Axios.prototype, context, {allOwnKeys: true});
  
    // Copy context to instance
    utils.extend(instance, context, null, {allOwnKeys: true});
  
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
  
    return instance;
  }
  
  // Create the default instance to be exported
  const axios = createInstance(lib_defaults);
  
  // Expose Axios class to allow class inheritance
  axios.Axios = core_Axios;
  
  // Expose Cancel & CancelToken
  axios.CanceledError = cancel_CanceledError;
  axios.CancelToken = cancel_CancelToken;
  axios.isCancel = isCancel;
  axios.VERSION = VERSION;
  axios.toFormData = helpers_toFormData;
  
  // Expose AxiosError class
  axios.AxiosError = core_AxiosError;
  
  // alias for CanceledError for backward compatibility
  axios.Cancel = axios.CanceledError;
  
  // Expose all/spread
  axios.all = function all(promises) {
    return Promise.all(promises);
  };
  
  axios.spread = spread;
  
  // Expose isAxiosError
  axios.isAxiosError = isAxiosError;
  
  // Expose mergeConfig
  axios.mergeConfig = mergeConfig;
  
  axios.AxiosHeaders = core_AxiosHeaders;
  
  axios.formToJSON = thing => helpers_formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);
  
  axios.getAdapter = adapters.getAdapter;
  
  axios.HttpStatusCode = helpers_HttpStatusCode;
  
  axios.default = axios;
  
  // this module should only have a default export
  /* harmony default export */ const lib_axios = (axios);
  
  ;// CONCATENATED MODULE: ./node_modules/gsap/gsap-core.js
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  
  /*!
   * GSAP 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  
  /* eslint-disable */
  var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
      _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
      _suppressOverwrites,
      _reverting,
      _context,
      _bigNum = 1e8,
      _tinyNum = 1 / _bigNum,
      _2PI = Math.PI * 2,
      _HALF_PI = _2PI / 4,
      _gsID = 0,
      _sqrt = Math.sqrt,
      _cos = Math.cos,
      _sin = Math.sin,
      _isString = function _isString(value) {
    return typeof value === "string";
  },
      _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
      _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
      _isObject = function _isObject(value) {
    return typeof value === "object";
  },
      _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
      _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
      _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
      // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
  _isArray = Array.isArray,
      _strictNumExp = /(?:-?\.?\d|\.)+/gi,
      //only numbers (including negatives and decimals) but NOT relative values.
  _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
      //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
      _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
      //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
  _relExp = /[+-]=-?[.\d]+/,
      _delimitedValueExp = /[^,'"\[\]\s]+/gi,
      // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
  _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
      _globalTimeline,
      _win,
      _coreInitted,
      _doc,
      _globals = {},
      _installScope = {},
      _coreReady,
      _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap_core_gsap;
  },
      _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
      _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
      _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
      _emptyFunc = function _emptyFunc() {
    return 0;
  },
      _startAtRevertConfig = {
    suppressEvents: true,
    isStart: true,
    kill: false
  },
      _revertConfigNoKill = {
    suppressEvents: true,
    kill: false
  },
      _revertConfig = {
    suppressEvents: true
  },
      _reservedProps = {},
      _lazyTweens = [],
      _lazyLookup = {},
      _lastRenderedFrame,
      _plugins = {},
      _effects = {},
      _nextGCFrame = 30,
      _harnessPlugins = [],
      _callbackNames = "",
      _harness = function _harness(targets) {
    var target = targets[0],
        harnessPlugin,
        i;
    _isObject(target) || _isFunction(target) || (targets = [targets]);
  
    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
      i = _harnessPlugins.length;
  
      while (i-- && !_harnessPlugins[i].targetTest(target)) {}
  
      harnessPlugin = _harnessPlugins[i];
    }
  
    i = targets.length;
  
    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }
  
    return targets;
  },
      _getCache = function _getCache(target) {
    return target._gsap || _harness(gsap_core_toArray(target))[0]._gsap;
  },
      _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
  },
      _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
      //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
  _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
      _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
      // increased precision mostly for timing values.
  _parseRelative = function _parseRelative(start, value) {
    var operator = value.charAt(0),
        end = parseFloat(value.substr(2));
    start = parseFloat(start);
    return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
  },
      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
    var l = toFind.length,
        i = 0;
  
    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}
  
    return i < l;
  },
      _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
        a = _lazyTweens.slice(0),
        i,
        tween;
  
    _lazyLookup = {};
    _lazyTweens.length = 0;
  
    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && !_reverting && _lazyRender();
    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));
    _lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
  },
      _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
  },
      _passThrough = function _passThrough(p) {
    return p;
  },
      _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }
  
    return obj;
  },
      _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
      }
    };
  },
      _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }
  
    return base;
  },
      _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
    }
  
    return base;
  },
      _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
        p;
  
    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }
  
    return copy;
  },
      _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
        func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
  
    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }
  
    return vars;
  },
      _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
        match = i === a2.length;
  
    while (match && i-- && a1[i] === a2[i]) {}
  
    return i < 0;
  },
      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
  
    if (lastProp === void 0) {
      lastProp = "_last";
    }
  
    var prev = parent[lastProp],
        t;
  
    if (sortBy) {
      t = child[sortBy];
  
      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }
  
    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }
  
    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }
  
    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
  
    if (lastProp === void 0) {
      lastProp = "_last";
    }
  
    var prev = child._prev,
        next = child._next;
  
    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }
  
    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }
  
    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
  },
      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
    child._act = 0;
  },
      _uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
      // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
      var a = animation;
  
      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }
  
    return animation;
  },
      _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;
  
    while (parent && parent.parent) {
      //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }
  
    return animation;
  },
      _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
  },
      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
      // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
  _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime /= cycleDuration);
    return tTime && whole === tTime ? whole - 1 : whole;
  },
      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
      _setEnd = function _setEnd(animation) {
    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
      _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
    var parent = animation._dp;
  
    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
  
      _setEnd(animation);
  
      parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
    }
  
    return animation;
  },
  
  /*
  _totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
    let cycleDuration = duration + repeatDelay,
      time = _round(clampedTotalTime % cycleDuration);
    if (time > duration) {
      time = duration;
    }
    return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
  },
  */
  _postAddChecks = function _postAddChecks(timeline, child) {
    var t;
  
    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {
      // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
      t = _parentToChildTotalTime(timeline.rawTime(), child);
  
      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
  
  
    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      //in case any of the ancestors had completed but should now be enabled...
      if (timeline._dur < timeline.duration()) {
        t = timeline;
  
        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.
  
          t = t._dp;
        }
      }
  
      timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
    }
  },
      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));
  
    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
  
    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)
  
    return timeline;
  },
      _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
      _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
    _initTween(tween, time, tTime);
  
    if (!tween._initted) {
      return 1;
    }
  
    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);
  
      tween._lazy = [tTime, suppressEvents];
      return 1;
    }
  },
      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
  },
      // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
  _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
        // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
    repeatDelay = tween._rDelay,
        tTime = 0,
        pt,
        iteration,
        prevIteration;
  
    if (repeatDelay && tween._repeat) {
      // in case there's a zero-duration tween that has a repeat with a repeatDelay
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);
  
      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        // if iteration changed
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }
  
    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
        // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
        return;
      }
  
      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
  
      suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.
  
      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;
  
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
  
      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
  
      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);
  
        if (!suppressEvents && !_reverting) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);
  
          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;
  
    if (time > prevTime) {
      child = animation._first;
  
      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }
  
        child = child._next;
      }
    } else {
      child = animation._last;
  
      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }
  
        child = child._prev;
      }
    }
  },
      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat,
        dur = _roundPrecise(duration) || 0,
        totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
    animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
      _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc,
    totalDuration: _emptyFunc
  },
      _parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels,
        recent = animation._recent || _zeroPosition,
        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
        //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
    i,
        offset,
        isPercent;
  
    if (_isString(position) && (isNaN(position) || position in labels)) {
      //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");
  
      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
      }
  
      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }
  
      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));
  
      if (isPercent && percentAnimation) {
        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
      }
  
      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }
  
    return position == null ? clippedDuration : +position;
  },
      _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber(params[1]),
        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
        vars = params[varsIndex],
        irVars,
        parent;
  
    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;
  
    if (type) {
      irVars = vars;
      parent = timeline;
  
      while (parent && !("immediateRender" in irVars)) {
        // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }
  
      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
    }
  
    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
      _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
      _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
      getUnit = function getUnit(value, v) {
    return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
  },
      // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
  clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
      _slice = [].slice,
      _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
      _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }
  
    return ar.forEach(function (value) {
      var _accumulator;
  
      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, gsap_core_toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
      //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
  gsap_core_toArray = function toArray(value, scope, leaveStrings) {
    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
      selector = function selector(value) {
    value = gsap_core_toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return gsap_core_toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
    };
  },
      shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
      // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
  //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
  distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }
  
    var vars = _isObject(v) ? v : {
      each: v
    },
        //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
    ease = _parseEase(vars.ease),
        from = vars.from || 0,
        base = parseFloat(vars.base) || 0,
        cache = {},
        isDecimal = from > 0 && from < 1,
        ratios = isNaN(from) || isDecimal,
        axis = vars.axis,
        ratioX = from,
        ratioY = from;
  
    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }
  
    return function (i, target, a) {
      var l = (a || vars).length,
          distances = cache[l],
          originX,
          originY,
          x,
          y,
          d,
          j,
          max,
          min,
          wrapAt;
  
      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];
  
        if (!wrapAt) {
          max = -_bigNum;
  
          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}
  
          wrapAt--;
        }
  
        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;
  
        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }
  
        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0; //unit
  
        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }
  
      l = (distances[i] - distances.min) / distances.max || 0;
      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
    };
  },
      _roundModifier = function _roundModifier(v) {
    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())
  
    return function (raw) {
      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
  
      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
    };
  },
      snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
        radius,
        is2D;
  
    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;
  
      if (snapTo.values) {
        snapTo = gsap_core_toArray(snapTo.values);
  
        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }
  
    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
          y = parseFloat(is2D ? raw.y : 0),
          min = _bigNum,
          closest = 0,
          i = snapTo.length,
          dx,
          dy;
  
      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }
  
        if (dx < min) {
          min = dx;
          closest = i;
        }
      }
  
      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
      random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
      pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }
  
    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
      unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
      normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
      _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
      wrap = function wrap(min, max, value) {
    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
      wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
        total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
      _replaceRandom = function _replaceRandom(value) {
    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
    var prev = 0,
        s = "",
        i,
        nums,
        end,
        isArray;
  
    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }
  
    return s + value.substr(prev, value.length - prev);
  },
      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
        outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
      interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };
  
    if (!func) {
      var isString = _isString(start),
          master = {},
          p,
          i,
          interpolators,
          l,
          il;
  
      progress === true && (mutate = 1) && (progress = null);
  
      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;
  
        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
        }
  
        l--;
  
        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };
  
        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }
  
      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }
  
        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }
  
    return _conditionalReturn(progress, func);
  },
      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    //used for nextLabel() and previousLabel()
    var labels = timeline.labels,
        min = _bigNum,
        p,
        distance,
        label;
  
    for (p in labels) {
      distance = labels[p] - fromTime;
  
      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }
  
    return label;
  },
      _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
        callback = v[type],
        prevContext = _context,
        context = animation._ctx,
        params,
        scope,
        result;
  
    if (!callback) {
      return;
    }
  
    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
  
    context && (_context = context);
    result = params ? callback.apply(scope, params) : callback.call(scope);
    _context = prevContext;
    return result;
  },
      _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);
  
    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
    animation.progress() < 1 && _callback(animation, "onInterrupt");
    return animation;
  },
      _quickTween,
      _registerPluginQueue = [],
      _createPlugin = function _createPlugin(config) {
    if (_windowExists() && config) {
      // edge case: some build tools may pass in a null/undefined value
      config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.
  
      var name = config.name,
          isFunc = _isFunction(config),
          Plugin = name && !isFunc && config.init ? function () {
        this._props = [];
      } : config,
          //in case someone passes in an object that's not a plugin, like CustomEase
      instanceDefaults = {
        init: _emptyFunc,
        render: _renderPropTweens,
        add: _addPropTween,
        kill: _killPropTweensOf,
        modifier: _addPluginModifier,
        rawVars: 0
      },
          statics = {
        targetTest: 0,
        get: 0,
        getSetter: _getSetter,
        aliases: {},
        register: 0
      };
  
      _wake();
  
      if (config !== Plugin) {
        if (_plugins[name]) {
          return;
        }
  
        _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods
  
  
        _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods
  
  
        _plugins[Plugin.prop = name] = Plugin;
  
        if (config.targetTest) {
          _harnessPlugins.push(Plugin);
  
          _reservedProps[name] = 1;
        }
  
        name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
      }
  
      _addGlobal(name, Plugin);
  
      config.register && config.register(gsap_core_gsap, Plugin, PropTween);
    } else {
      config && _registerPluginQueue.push(config);
    }
  },
  
  /*
   * --------------------------------------------------------------------------------------
   * COLORS
   * --------------------------------------------------------------------------------------
   */
  _255 = 255,
      _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
      // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
  // let ctx = _doc.createElement("canvas").getContext("2d");
  // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
  _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
      splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
        r,
        g,
        b,
        h,
        s,
        l,
        max,
        min,
        d,
        wasHSL;
  
    if (!a) {
      if (v.substr(-1) === ",") {
        //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
        v = v.substr(0, v.length - 1);
      }
  
      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          //for shorthand like #9F0 or #9F0F (could have alpha)
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }
  
        if (v.length === 9) {
          // hex with alpha, like #fd5e53ff
          a = parseInt(v.substr(1, 6), 16);
          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
        }
  
        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);
  
        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1); //cast as number
  
          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          //if relative values are found, just return the raw strings with the relative prefixes in place.
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }
  
      a = a.map(Number);
    }
  
    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
  
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }
  
      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }
  
    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
      _colorOrderData = function _colorOrderData(v) {
    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
    var values = [],
        c = [],
        i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
      _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
        colors = (s + result).match(_colorExp),
        type = toHSL ? "hsla(" : "rgba(",
        i = 0,
        c,
        shell,
        d,
        l;
  
    if (!colors) {
      return s;
    }
  
    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });
  
    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;
  
      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;
  
        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }
  
    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;
  
      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }
  
    return result + shell[l];
  },
      _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
        //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
    p;
  
    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }
  
    return new RegExp(s + ")", "gi");
  }(),
      _hslExp = /hsl[a]?\(/,
      _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
        toHSL;
    _colorExp.lastIndex = 0;
  
    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.
  
      return true;
    }
  },
  
  /*
   * --------------------------------------------------------------------------------------
   * TICKER
   * --------------------------------------------------------------------------------------
   */
  _tickerActive,
      _ticker = function () {
    var _getTime = Date.now,
        _lagThreshold = 500,
        _adjustedLag = 33,
        _startTime = _getTime(),
        _lastUpdate = _startTime,
        _gap = 1000 / 240,
        _nextTime = _gap,
        _listeners = [],
        _id,
        _req,
        _raf,
        _self,
        _delta,
        _i,
        _tick = function _tick(v) {
      var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;
  
      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
      _lastUpdate += elapsed;
      time = _lastUpdate - _startTime;
      overlap = time - _nextTime;
  
      if (overlap > 0 || manual) {
        frame = ++_self.frame;
        _delta = time - _self.time * 1000;
        _self.time = time = time / 1000;
        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
        dispatch = 1;
      }
  
      manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
  
      if (dispatch) {
        for (_i = 0; _i < _listeners.length; _i++) {
          // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
          _listeners[_i](time, _delta, frame, v);
        }
      }
    };
  
    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap_core_gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap_core_gsap.version);
  
            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});
  
            _raf = _win.requestAnimationFrame;
  
            _registerPluginQueue.forEach(_createPlugin);
          }
  
          _id && _self.sleep();
  
          _req = _raf || function (f) {
            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
          };
  
          _tickerActive = 1;
  
          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited
  
        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback, once, prioritize) {
        var func = once ? function (t, d, f, v) {
          callback(t, d, f, v);
  
          _self.remove(func);
        } : callback;
  
        _self.remove(callback);
  
        _listeners[prioritize ? "unshift" : "push"](func);
  
        _wake();
  
        return func;
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
      },
      _listeners: _listeners
    };
    return _self;
  }(),
      _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
      //also ensures the core classes are initialized.
  
  /*
  * -------------------------------------------------
  * EASING
  * -------------------------------------------------
  */
  _easeMap = {},
      _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
      _quotesExp = /["']/g,
      _parseObjectInString = function _parseObjectInString(value) {
    //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
    var obj = {},
        split = value.substr(1, value.length - 3).split(":"),
        key = split[0],
        i = 1,
        l = split.length,
        index,
        val,
        parsedVal;
  
    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }
  
    return obj;
  },
      _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
        close = value.indexOf(")"),
        nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
  },
      _configEaseFromString = function _configEaseFromString(name) {
    //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
    var split = (name + "").split("("),
        ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
      _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
      // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
  _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
        ease;
  
    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }
  
      child = child._next;
    }
  },
      _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }
  
    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }
  
    var ease = {
      easeIn: easeIn,
      easeOut: easeOut,
      easeInOut: easeInOut
    },
        lowercaseName;
  
    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;
  
      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });
  
    return ease;
  },
      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
      _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
        //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
    p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
        easeOut = function easeOut(p) {
      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);
  
    p2 = _2PI / p2; //precalculate to optimize
  
    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };
  
    return ease;
  },
      _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }
  
    var easeOut = function easeOut(p) {
      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);
  
    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };
  
    return ease;
  }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
  // _weightedEase = ratio => {
  // 	let y = 0.5 + ratio / 2;
  // 	return p => (2 * (1 - p) * p * y + p * p);
  // },
  // a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
  // _weightedEaseStrong = ratio => {
  // 	ratio = .5 + ratio / 2;
  // 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
  // 		b = ratio - o,
  // 		c = ratio + o;
  // 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
  // };
  
  
  _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
    var power = i < 5 ? i + 1 : i;
  
    _insertEase(name + ",Power" + (power - 1), i ? function (p) {
      return Math.pow(p, power);
    } : function (p) {
      return p;
    }, function (p) {
      return 1 - Math.pow(1 - p, power);
    }, function (p) {
      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
    });
  });
  
  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
  
  _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
  
  (function (n, c) {
    var n1 = 1 / c,
        n2 = 2 * n1,
        n3 = 2.5 * n1,
        easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };
  
    _insertEase("Bounce", function (p) {
      return 1 - easeOut(1 - p);
    }, easeOut);
  })(7.5625, 2.75);
  
  _insertEase("Expo", function (p) {
    return p ? Math.pow(2, 10 * (p - 1)) : 0;
  });
  
  _insertEase("Circ", function (p) {
    return -(_sqrt(1 - p * p) - 1);
  });
  
  _insertEase("Sine", function (p) {
    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
  });
  
  _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
  
  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
    config: function config(steps, immediateStart) {
      if (steps === void 0) {
        steps = 1;
      }
  
      var p1 = 1 / steps,
          p2 = steps + (immediateStart ? 0 : 1),
          p3 = immediateStart ? 1 : 0,
          max = 1 - _tinyNum;
      return function (p) {
        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
      };
    }
  };
  _defaults.ease = _easeMap["quad.out"];
  
  _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
    return _callbackNames += name + "," + name + "Params,";
  });
  /*
   * --------------------------------------------------------------------------------------
   * CACHE
   * --------------------------------------------------------------------------------------
   */
  
  
  var GSCache = function GSCache(target, harness) {
    this.id = _gsID++;
    target._gsap = this;
    this.target = target;
    this.harness = harness;
    this.get = harness ? harness.get : _getProperty;
    this.set = harness ? harness.getSetter : _getSetter;
  };
  /*
   * --------------------------------------------------------------------------------------
   * ANIMATION
   * --------------------------------------------------------------------------------------
   */
  
  var Animation = /*#__PURE__*/function () {
    function Animation(vars) {
      this.vars = vars;
      this._delay = +vars.delay || 0;
  
      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
        // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
        this._rDelay = vars.repeatDelay || 0;
        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
      }
  
      this._ts = 1;
  
      _setDuration(this, +vars.duration, 1, 1);
  
      this.data = vars.data;
  
      if (_context) {
        this._ctx = _context;
  
        _context.data.push(this);
      }
  
      _tickerActive || _ticker.wake();
    }
  
    var _proto = Animation.prototype;
  
    _proto.delay = function delay(value) {
      if (value || value === 0) {
        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
        this._delay = value;
        return this;
      }
  
      return this._delay;
    };
  
    _proto.duration = function duration(value) {
      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
    };
  
    _proto.totalDuration = function totalDuration(value) {
      if (!arguments.length) {
        return this._tDur;
      }
  
      this._dirty = 0;
      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
    };
  
    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
      _wake();
  
      if (!arguments.length) {
        return this._tTime;
      }
  
      var parent = this._dp;
  
      if (parent && parent.smoothChildTiming && this._ts) {
        _alignPlayhead(this, _totalTime);
  
        !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
        //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.
  
        while (parent && parent.parent) {
          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
            parent.totalTime(parent._tTime, true);
          }
  
          parent = parent.parent;
        }
  
        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
          //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
          _addToTimeline(this._dp, this, this._start - this._delay);
        }
      }
  
      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
        // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
        this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
        //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
        //   this._lock = 1;
  
        _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
        //}
  
      }
  
      return this;
    };
  
    _proto.time = function time(value, suppressEvents) {
      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
    };
  
    _proto.totalProgress = function totalProgress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
    };
  
    _proto.progress = function progress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
    };
  
    _proto.iteration = function iteration(value, suppressEvents) {
      var cycleDuration = this.duration() + this._rDelay;
  
      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
    } // potential future addition:
    // isPlayingBackwards() {
    // 	let animation = this,
    // 		orientation = 1; // 1 = forward, -1 = backward
    // 	while (animation) {
    // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
    // 		animation = animation.parent;
    // 	}
    // 	return orientation < 0;
    // }
    ;
  
    _proto.timeScale = function timeScale(value) {
      if (!arguments.length) {
        return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
      }
  
      if (this._rts === value) {
        return this;
      }
  
      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
      // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
      //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
      // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.
  
      this._rts = +value || 0;
      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.
  
      this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), true);
  
      _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.
  
  
      return _recacheAncestors(this);
    };
  
    _proto.paused = function paused(value) {
      if (!arguments.length) {
        return this._ps;
      }
  
      if (this._ps !== value) {
        this._ps = value;
  
        if (value) {
          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.
  
          this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
        } else {
          _wake();
  
          this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.
  
          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
        }
      }
  
      return this;
    };
  
    _proto.startTime = function startTime(value) {
      if (arguments.length) {
        this._start = value;
        var parent = this.parent || this._dp;
        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
        return this;
      }
  
      return this._start;
    };
  
    _proto.endTime = function endTime(includeRepeats) {
      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
    };
  
    _proto.rawTime = function rawTime(wrapRepeats) {
      var parent = this.parent || this._dp; // _dp = detached parent
  
      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
    };
  
    _proto.revert = function revert(config) {
      if (config === void 0) {
        config = _revertConfig;
      }
  
      var prevIsReverting = _reverting;
      _reverting = config;
  
      if (this._initted || this._startAt) {
        this.timeline && this.timeline.revert(config);
        this.totalTime(-0.01, config.suppressEvents);
      }
  
      this.data !== "nested" && config.kill !== false && this.kill();
      _reverting = prevIsReverting;
      return this;
    };
  
    _proto.globalTime = function globalTime(rawTime) {
      var animation = this,
          time = arguments.length ? rawTime : animation.rawTime();
  
      while (animation) {
        time = animation._start + time / (animation._ts || 1);
        animation = animation._dp;
      }
  
      return !this.parent && this._sat ? this._sat.vars.immediateRender ? -Infinity : this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
    };
  
    _proto.repeat = function repeat(value) {
      if (arguments.length) {
        this._repeat = value === Infinity ? -2 : value;
        return _onUpdateTotalDuration(this);
      }
  
      return this._repeat === -2 ? Infinity : this._repeat;
    };
  
    _proto.repeatDelay = function repeatDelay(value) {
      if (arguments.length) {
        var time = this._time;
        this._rDelay = value;
  
        _onUpdateTotalDuration(this);
  
        return time ? this.time(time) : this;
      }
  
      return this._rDelay;
    };
  
    _proto.yoyo = function yoyo(value) {
      if (arguments.length) {
        this._yoyo = value;
        return this;
      }
  
      return this._yoyo;
    };
  
    _proto.seek = function seek(position, suppressEvents) {
      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
    };
  
    _proto.restart = function restart(includeDelay, suppressEvents) {
      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
    };
  
    _proto.play = function play(from, suppressEvents) {
      from != null && this.seek(from, suppressEvents);
      return this.reversed(false).paused(false);
    };
  
    _proto.reverse = function reverse(from, suppressEvents) {
      from != null && this.seek(from || this.totalDuration(), suppressEvents);
      return this.reversed(true).paused(false);
    };
  
    _proto.pause = function pause(atTime, suppressEvents) {
      atTime != null && this.seek(atTime, suppressEvents);
      return this.paused(true);
    };
  
    _proto.resume = function resume() {
      return this.paused(false);
    };
  
    _proto.reversed = function reversed(value) {
      if (arguments.length) {
        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.
  
        return this;
      }
  
      return this._rts < 0;
    };
  
    _proto.invalidate = function invalidate() {
      this._initted = this._act = 0;
      this._zTime = -_tinyNum;
      return this;
    };
  
    _proto.isActive = function isActive() {
      var parent = this.parent || this._dp,
          start = this._start,
          rawTime;
      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
    };
  
    _proto.eventCallback = function eventCallback(type, callback, params) {
      var vars = this.vars;
  
      if (arguments.length > 1) {
        if (!callback) {
          delete vars[type];
        } else {
          vars[type] = callback;
          params && (vars[type + "Params"] = params);
          type === "onUpdate" && (this._onUpdate = callback);
        }
  
        return this;
      }
  
      return vars[type];
    };
  
    _proto.then = function then(onFulfilled) {
      var self = this;
      return new Promise(function (resolve) {
        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
            _resolve = function _resolve() {
          var _then = self.then;
          self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)
  
          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };
  
        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
          _resolve();
        } else {
          self._prom = _resolve;
        }
      });
    };
  
    _proto.kill = function kill() {
      _interrupt(this);
    };
  
    return Animation;
  }();
  
  _setDefaults(Animation.prototype, {
    _time: 0,
    _start: 0,
    _end: 0,
    _tTime: 0,
    _tDur: 0,
    _dirty: 0,
    _repeat: 0,
    _yoyo: false,
    parent: null,
    _initted: false,
    _rDelay: 0,
    _ts: 1,
    _dp: 0,
    ratio: 0,
    _zTime: -_tinyNum,
    _prom: 0,
    _ps: false,
    _rts: 1
  });
  /*
   * -------------------------------------------------
   * TIMELINE
   * -------------------------------------------------
   */
  
  
  var Timeline = /*#__PURE__*/function (_Animation) {
    _inheritsLoose(Timeline, _Animation);
  
    function Timeline(vars, position) {
      var _this;
  
      if (vars === void 0) {
        vars = {};
      }
  
      _this = _Animation.call(this, vars) || this;
      _this.labels = {};
      _this.smoothChildTiming = !!vars.smoothChildTiming;
      _this.autoRemoveChildren = !!vars.autoRemoveChildren;
      _this._sort = _isNotFalse(vars.sortChildren);
      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
      vars.reversed && _this.reverse();
      vars.paused && _this.paused(true);
      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
      return _this;
    }
  
    var _proto2 = Timeline.prototype;
  
    _proto2.to = function to(targets, vars, position) {
      _createTweenType(0, arguments, this);
  
      return this;
    };
  
    _proto2.from = function from(targets, vars, position) {
      _createTweenType(1, arguments, this);
  
      return this;
    };
  
    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
      _createTweenType(2, arguments, this);
  
      return this;
    };
  
    _proto2.set = function set(targets, vars, position) {
      vars.duration = 0;
      vars.parent = this;
      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
      vars.immediateRender = !!vars.immediateRender;
      new Tween(targets, vars, _parsePosition(this, position), 1);
      return this;
    };
  
    _proto2.call = function call(callback, params, position) {
      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
    } //ONLY for backward compatibility! Maybe delete?
    ;
  
    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.duration = duration;
      vars.stagger = vars.stagger || stagger;
      vars.onComplete = onCompleteAll;
      vars.onCompleteParams = onCompleteAllParams;
      vars.parent = this;
      new Tween(targets, vars, _parsePosition(this, position));
      return this;
    };
  
    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.runBackwards = 1;
      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
    };
  
    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
      toVars.startAt = fromVars;
      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
    };
  
    _proto2.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._dirty ? this.totalDuration() : this._tDur,
          dur = this._dur,
          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
          // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
      crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
          time,
          child,
          next,
          iteration,
          cycleDuration,
          prevPaused,
          pauseTween,
          timeScale,
          prevStart,
          prevIteration,
          yoyo,
          isYoyo;
      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
  
      if (tTime !== this._tTime || force || crossingStart) {
        if (prevTime !== this._time && dur) {
          //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
          tTime += this._time - prevTime;
          totalTime += this._time - prevTime;
        }
  
        time = tTime;
        prevStart = this._start;
        timeScale = this._ts;
        prevPaused = !timeScale;
  
        if (crossingStart) {
          dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
  
          (totalTime || !suppressEvents) && (this._zTime = totalTime);
        }
  
        if (this._repeat) {
          //adjust the time for repeats and yoyos
          yoyo = this._yoyo;
          cycleDuration = dur + this._rDelay;
  
          if (this._repeat < -1 && totalTime < 0) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }
  
          time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
  
          if (tTime === tDur) {
            // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);
  
            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }
  
            time > dur && (time = dur);
          }
  
          prevIteration = _animationCycle(this._tTime, cycleDuration);
          !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion
  
          if (yoyo && iteration & 1) {
            time = dur - time;
            isYoyo = 1;
          }
          /*
          make sure children at the end/beginning of the timeline are rendered properly. If, for example,
          a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
          would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
          could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
          we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
          ensure that zero-duration tweens at the very beginning or end of the Timeline work.
          */
  
  
          if (iteration !== prevIteration && !this._lock) {
            var rewinding = yoyo && prevIteration & 1,
                doesWrap = rewinding === (yoyo && iteration & 1);
            iteration < prevIteration && (rewinding = !rewinding);
            prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.
  
            this._lock = 1;
            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
            this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.
  
            !suppressEvents && this.parent && _callback(this, "onRepeat");
            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
  
            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
              // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
              return this;
            }
  
            dur = this._dur; // in case the duration changed in the onRepeat
  
            tDur = this._tDur;
  
            if (doesWrap) {
              this._lock = 2;
              prevTime = rewinding ? dur : -0.0001;
              this.render(prevTime, true);
              this.vars.repeatRefresh && !isYoyo && this.invalidate();
            }
  
            this._lock = 0;
  
            if (!this._ts && !prevPaused) {
              return this;
            } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.
  
  
            _propagateYoyoEase(this, isYoyo);
          }
        }
  
        if (this._hasPause && !this._forcing && this._lock < 2) {
          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
  
          if (pauseTween) {
            tTime -= time - (time = pauseTween._start);
          }
        }
  
        this._tTime = tTime;
        this._time = time;
        this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
  
        if (!this._initted) {
          this._onUpdate = this.vars.onUpdate;
          this._initted = 1;
          this._zTime = totalTime;
          prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
        }
  
        if (!prevTime && time && !suppressEvents && !iteration) {
          _callback(this, "onStart");
  
          if (this._tTime !== tTime) {
            // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
            return this;
          }
        }
  
        if (time >= prevTime && totalTime >= 0) {
          child = this._first;
  
          while (child) {
            next = child._next;
  
            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                return this.render(totalTime, suppressEvents, force);
              }
  
              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
  
              if (time !== this._time || !this._ts && !prevPaused) {
                //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                pauseTween = 0;
                next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)
  
                break;
              }
            }
  
            child = next;
          }
        } else {
          child = this._last;
          var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.
  
          while (child) {
            next = child._prev;
  
            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                return this.render(totalTime, suppressEvents, force);
              }
  
              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.
  
              if (time !== this._time || !this._ts && !prevPaused) {
                //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                pauseTween = 0;
                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)
  
                break;
              }
            }
  
            child = next;
          }
        }
  
        if (pauseTween && !suppressEvents) {
          this.pause();
          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
  
          if (this._ts) {
            //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
            this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.
  
            _setEnd(this);
  
            return this.render(totalTime, suppressEvents, force);
          }
        }
  
        this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
        if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
          // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
  
          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
            _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);
  
            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }
  
      return this;
    };
  
    _proto2.add = function add(child, position) {
      var _this2 = this;
  
      _isNumber(position) || (position = _parsePosition(this, position, child));
  
      if (!(child instanceof Animation)) {
        if (_isArray(child)) {
          child.forEach(function (obj) {
            return _this2.add(obj, position);
          });
          return this;
        }
  
        if (_isString(child)) {
          return this.addLabel(child, position);
        }
  
        if (_isFunction(child)) {
          child = Tween.delayedCall(0, child);
        } else {
          return this;
        }
      }
  
      return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
    };
  
    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
      if (nested === void 0) {
        nested = true;
      }
  
      if (tweens === void 0) {
        tweens = true;
      }
  
      if (timelines === void 0) {
        timelines = true;
      }
  
      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = -_bigNum;
      }
  
      var a = [],
          child = this._first;
  
      while (child) {
        if (child._start >= ignoreBeforeTime) {
          if (child instanceof Tween) {
            tweens && a.push(child);
          } else {
            timelines && a.push(child);
            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
          }
        }
  
        child = child._next;
      }
  
      return a;
    };
  
    _proto2.getById = function getById(id) {
      var animations = this.getChildren(1, 1, 1),
          i = animations.length;
  
      while (i--) {
        if (animations[i].vars.id === id) {
          return animations[i];
        }
      }
    };
  
    _proto2.remove = function remove(child) {
      if (_isString(child)) {
        return this.removeLabel(child);
      }
  
      if (_isFunction(child)) {
        return this.killTweensOf(child);
      }
  
      _removeLinkedListItem(this, child);
  
      if (child === this._recent) {
        this._recent = this._last;
      }
  
      return _uncache(this);
    };
  
    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
      if (!arguments.length) {
        return this._tTime;
      }
  
      this._forcing = 1;
  
      if (!this._dp && this._ts) {
        //special case for the global timeline (or any other that has no parent or detached parent).
        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
      }
  
      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);
  
      this._forcing = 0;
      return this;
    };
  
    _proto2.addLabel = function addLabel(label, position) {
      this.labels[label] = _parsePosition(this, position);
      return this;
    };
  
    _proto2.removeLabel = function removeLabel(label) {
      delete this.labels[label];
      return this;
    };
  
    _proto2.addPause = function addPause(position, callback, params) {
      var t = Tween.delayedCall(0, callback || _emptyFunc, params);
      t.data = "isPause";
      this._hasPause = 1;
      return _addToTimeline(this, t, _parsePosition(this, position));
    };
  
    _proto2.removePause = function removePause(position) {
      var child = this._first;
      position = _parsePosition(this, position);
  
      while (child) {
        if (child._start === position && child.data === "isPause") {
          _removeFromParent(child);
        }
  
        child = child._next;
      }
    };
  
    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      var tweens = this.getTweensOf(targets, onlyActive),
          i = tweens.length;
  
      while (i--) {
        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
      }
  
      return this;
    };
  
    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
      var a = [],
          parsedTargets = gsap_core_toArray(targets),
          child = this._first,
          isGlobalTime = _isNumber(onlyActive),
          // a number is interpreted as a global time. If the animation spans
      children;
  
      while (child) {
        if (child instanceof Tween) {
          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
            // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
            a.push(child);
          }
        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
          a.push.apply(a, children);
        }
  
        child = child._next;
      }
  
      return a;
    } // potential future feature - targets() on timelines
    // targets() {
    // 	let result = [];
    // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
    // 	return result.filter((v, i) => result.indexOf(v) === i);
    // }
    ;
  
    _proto2.tweenTo = function tweenTo(position, vars) {
      vars = vars || {};
  
      var tl = this,
          endTime = _parsePosition(tl, position),
          _vars = vars,
          startAt = _vars.startAt,
          _onStart = _vars.onStart,
          onStartParams = _vars.onStartParams,
          immediateRender = _vars.immediateRender,
          initted,
          tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();
  
          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }
  
          _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
        }
      }, vars));
  
      return immediateRender ? tween.render(0) : tween;
    };
  
    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
      return this.tweenTo(toPosition, _setDefaults({
        startAt: {
          time: _parsePosition(this, fromPosition)
        }
      }, vars));
    };
  
    _proto2.recent = function recent() {
      return this._recent;
    };
  
    _proto2.nextLabel = function nextLabel(afterTime) {
      if (afterTime === void 0) {
        afterTime = this._time;
      }
  
      return _getLabelInDirection(this, _parsePosition(this, afterTime));
    };
  
    _proto2.previousLabel = function previousLabel(beforeTime) {
      if (beforeTime === void 0) {
        beforeTime = this._time;
      }
  
      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
    };
  
    _proto2.currentLabel = function currentLabel(value) {
      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
    };
  
    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = 0;
      }
  
      var child = this._first,
          labels = this.labels,
          p;
  
      while (child) {
        if (child._start >= ignoreBeforeTime) {
          child._start += amount;
          child._end += amount;
        }
  
        child = child._next;
      }
  
      if (adjustLabels) {
        for (p in labels) {
          if (labels[p] >= ignoreBeforeTime) {
            labels[p] += amount;
          }
        }
      }
  
      return _uncache(this);
    };
  
    _proto2.invalidate = function invalidate(soft) {
      var child = this._first;
      this._lock = 0;
  
      while (child) {
        child.invalidate(soft);
        child = child._next;
      }
  
      return _Animation.prototype.invalidate.call(this, soft);
    };
  
    _proto2.clear = function clear(includeLabels) {
      if (includeLabels === void 0) {
        includeLabels = true;
      }
  
      var child = this._first,
          next;
  
      while (child) {
        next = child._next;
        this.remove(child);
        child = next;
      }
  
      this._dp && (this._time = this._tTime = this._pTime = 0);
      includeLabels && (this.labels = {});
      return _uncache(this);
    };
  
    _proto2.totalDuration = function totalDuration(value) {
      var max = 0,
          self = this,
          child = self._last,
          prevStart = _bigNum,
          prev,
          start,
          parent;
  
      if (arguments.length) {
        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
      }
  
      if (self._dirty) {
        parent = self.parent;
  
        while (child) {
          prev = child._prev; //record it here in case the tween changes position in the sequence...
  
          child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.
  
          start = child._start;
  
          if (start > prevStart && self._sort && child._ts && !self._lock) {
            //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
            self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().
  
            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
          } else {
            prevStart = start;
          }
  
          if (start < 0 && child._ts) {
            //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
            max -= start;
  
            if (!parent && !self._dp || parent && parent.smoothChildTiming) {
              self._start += start / self._ts;
              self._time -= start;
              self._tTime -= start;
            }
  
            self.shiftChildren(-start, false, -1e999);
            prevStart = 0;
          }
  
          child._end > max && child._ts && (max = child._end);
          child = prev;
        }
  
        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);
  
        self._dirty = 0;
      }
  
      return self._tDur;
    };
  
    Timeline.updateRoot = function updateRoot(time) {
      if (_globalTimeline._ts) {
        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
  
        _lastRenderedFrame = _ticker.frame;
      }
  
      if (_ticker.frame >= _nextGCFrame) {
        _nextGCFrame += _config.autoSleep || 120;
        var child = _globalTimeline._first;
        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
          while (child && !child._ts) {
            child = child._next;
          }
  
          child || _ticker.sleep();
        }
      }
    };
  
    return Timeline;
  }(Animation);
  
  _setDefaults(Timeline.prototype, {
    _lock: 0,
    _hasPause: 0,
    _forcing: 0
  });
  
  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
        index = 0,
        matchIndex = 0,
        result,
        startNums,
        color,
        endNum,
        chunk,
        startNum,
        hasRandom,
        a;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings
  
    end += "";
  
    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }
  
    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
  
      start = a[0];
      end = a[1];
    }
  
    startNums = start.match(_complexStringNumExp) || [];
  
    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);
  
      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }
  
      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
  
        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }
  
    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
  
    pt.fp = funcParam;
  
    if (_relExp.test(end) || hasRandom) {
      pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    }
  
    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
  
    return pt;
  },
      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
        parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
        pt;
  
    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }
  
      if (end.charAt(1) === "=") {
        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
  
        if (pt || pt === 0) {
          // to avoid isNaN, like if someone passes in a value like "!= whatever"
          end = pt;
        }
      }
    }
  
    if (!optional || parsedStart !== end || _forceAllPropTweens) {
      if (!isNaN(parsedStart * end) && end !== "") {
        // fun fact: any number multiplied by "" is evaluated as the number 0!
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }
  
      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
      //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
  _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
  
    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }
  
    var copy = {},
        p;
  
    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }
  
    return copy;
  },
      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;
  
    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
  
      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.
  
        i = plugin._props.length;
  
        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }
  
    return plugin;
  },
      _overwritingTween,
      //store a reference temporarily so we can avoid overwriting itself.
  _forceAllPropTweens,
      _initTween = function _initTween(tween, time, tTime) {
    var vars = tween.vars,
        ease = vars.ease,
        startAt = vars.startAt,
        immediateRender = vars.immediateRender,
        lazy = vars.lazy,
        onUpdate = vars.onUpdate,
        onUpdateParams = vars.onUpdateParams,
        callbackScope = vars.callbackScope,
        runBackwards = vars.runBackwards,
        yoyoEase = vars.yoyoEase,
        keyframes = vars.keyframes,
        autoRevert = vars.autoRevert,
        dur = tween._dur,
        prevStartAt = tween._startAt,
        targets = tween._targets,
        parent = tween.parent,
        fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
        autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
        tl = tween.timeline,
        cleanVars,
        i,
        p,
        pt,
        target,
        hasPriority,
        gsData,
        harness,
        plugin,
        ptLookup,
        index,
        harnessVars,
        overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
  
    if (yoyoEase && tween._yoyo && !tween._repeat) {
      //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }
  
    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.
  
    if (!tl || keyframes && !vars.stagger) {
      //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.
  
      cleanVars = _copyExcluding(vars, _reservedProps);
  
      if (prevStartAt) {
        prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.
  
        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
        // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.
  
        prevStartAt._lazy = 0;
      }
  
      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: !prevStartAt && _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate,
          onUpdateParams: onUpdateParams,
          callbackScope: callbackScope,
          stagger: 0
        }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);
  
  
        tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.
  
        tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween
  
        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.
  
        if (immediateRender) {
          if (dur && time <= 0 && tTime <= 0) {
            // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
            time && (tween._zTime = time);
            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
          }
        }
      } else if (runBackwards && dur) {
        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
        if (!prevStartAt) {
          time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
  
          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
            lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
            immediateRender: immediateRender,
            //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
            stagger: 0,
            parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
  
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})
  
          _removeFromParent(tween._startAt = Tween.set(targets, p));
  
          tween._startAt._dp = 0; // don't allow it to get put back into root timeline!
  
          tween._startAt._sat = tween; // used in globalTime()
  
          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
          tween._zTime = time;
  
          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
  
          } else if (!time) {
            return;
          }
        }
      }
  
      tween._pt = tween._ptCache = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;
  
      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
  
        index = fullTargets === targets ? i : fullTargets.indexOf(target);
  
        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
  
          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });
  
          plugin.priority && (hasPriority = 1);
        }
  
        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }
  
        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
  
        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;
  
          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!
  
  
          overwritten = !tween.parent;
          _overwritingTween = 0;
        }
  
        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }
  
      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
    }
  
    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.
  
    keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
  },
      _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {
    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
        pt,
        rootPT,
        lookup,
        i;
  
    if (!ptCache) {
      ptCache = tween._ptCache[property] = [];
      lookup = tween._ptLookup;
      i = tween._targets.length;
  
      while (i--) {
        pt = lookup[i][property];
  
        if (pt && pt.d && pt.d._pt) {
          // it's a plugin, so find the nested PropTween
          pt = pt.d._pt;
  
          while (pt && pt.p !== property && pt.fp !== property) {
            // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
            pt = pt._next;
          }
        }
  
        if (!pt) {
          // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
          // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
          _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.
  
          tween.vars[property] = "+=0";
  
          _initTween(tween, time);
  
          _forceAllPropTweens = 0;
          return 1;
        }
  
        ptCache.push(pt);
      }
    }
  
    i = ptCache.length;
  
    while (i--) {
      rootPT = ptCache[i];
      pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.
  
      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
      pt.c = value - pt.s;
      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)
  
      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
    }
  },
      _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
        propertyAliases = harness && harness.aliases,
        copy,
        p,
        i,
        aliases;
  
    if (!propertyAliases) {
      return vars;
    }
  
    copy = _merge({}, vars);
  
    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;
  
        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }
  
    return copy;
  },
      // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
  _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
        p,
        a;
  
    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease
  
      obj.forEach(function (value, i) {
        return a.push({
          t: i / (obj.length - 1) * 100,
          v: value,
          e: ease
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
          t: parseFloat(prop),
          v: obj[p],
          e: ease
        });
      }
    }
  },
      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
      _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
      _staggerPropsToSkip = {};
  
  _forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
    return _staggerPropsToSkip[name] = 1;
  });
  /*
   * --------------------------------------------------------------------------------------
   * TWEEN
   * --------------------------------------------------------------------------------------
   */
  
  
  var Tween = /*#__PURE__*/function (_Animation2) {
    _inheritsLoose(Tween, _Animation2);
  
    function Tween(targets, vars, position, skipInherit) {
      var _this3;
  
      if (typeof vars === "number") {
        position.duration = vars;
        vars = position;
        position = null;
      }
  
      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
      var _this3$vars = _this3.vars,
          duration = _this3$vars.duration,
          delay = _this3$vars.delay,
          immediateRender = _this3$vars.immediateRender,
          stagger = _this3$vars.stagger,
          overwrite = _this3$vars.overwrite,
          keyframes = _this3$vars.keyframes,
          defaults = _this3$vars.defaults,
          scrollTrigger = _this3$vars.scrollTrigger,
          yoyoEase = _this3$vars.yoyoEase,
          parent = vars.parent || _globalTimeline,
          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : gsap_core_toArray(targets),
          tl,
          i,
          copy,
          l,
          p,
          curTarget,
          staggerFunc,
          staggerVarsToMerge;
      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
      _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property
  
      _this3._overwrite = overwrite;
  
      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        vars = _this3.vars;
        tl = _this3.timeline = new Timeline({
          data: "nested",
          defaults: defaults || {},
          targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
        }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.
  
        tl.kill();
        tl.parent = tl._dp = _assertThisInitialized(_this3);
        tl._start = 0;
  
        if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
          l = parsedTargets.length;
          staggerFunc = stagger && distribute(stagger);
  
          if (_isObject(stagger)) {
            //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
            for (p in stagger) {
              if (~_staggerTweenProps.indexOf(p)) {
                staggerVarsToMerge || (staggerVarsToMerge = {});
                staggerVarsToMerge[p] = stagger[p];
              }
            }
          }
  
          for (i = 0; i < l; i++) {
            copy = _copyExcluding(vars, _staggerPropsToSkip);
            copy.stagger = 0;
            yoyoEase && (copy.yoyoEase = yoyoEase);
            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
            curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.
  
            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;
  
            if (!stagger && l === 1 && copy.delay) {
              // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
              _this3._delay = delay = copy.delay;
              _this3._start += delay;
              copy.delay = 0;
            }
  
            tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
            tl._ease = _easeMap.none;
          }
  
          tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
        } else if (keyframes) {
          _inheritDefaults(_setDefaults(tl.vars.defaults, {
            ease: "none"
          }));
  
          tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
          var time = 0,
              a,
              kf,
              v;
  
          if (_isArray(keyframes)) {
            keyframes.forEach(function (frame) {
              return tl.to(parsedTargets, frame, ">");
            });
            tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
          } else {
            copy = {};
  
            for (p in keyframes) {
              p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
            }
  
            for (p in copy) {
              a = copy[p].sort(function (a, b) {
                return a.t - b.t;
              });
              time = 0;
  
              for (i = 0; i < a.length; i++) {
                kf = a[i];
                v = {
                  ease: kf.e,
                  duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
                };
                v[p] = kf.v;
                tl.to(parsedTargets, v, time);
                time += v.duration;
              }
            }
  
            tl.duration() < duration && tl.to({}, {
              duration: duration - tl.duration()
            }); // in case keyframes didn't go to 100%
          }
        }
  
        duration || _this3.duration(duration = tl.duration());
      } else {
        _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
      }
  
      if (overwrite === true && !_suppressOverwrites) {
        _overwritingTween = _assertThisInitialized(_this3);
  
        _globalTimeline.killTweensOf(parsedTargets);
  
        _overwritingTween = 0;
      }
  
      _addToTimeline(parent, _assertThisInitialized(_this3), position);
  
      vars.reversed && _this3.reverse();
      vars.paused && _this3.paused(true);
  
      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
        _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
  
        _this3.render(Math.max(0, -delay) || 0); //in case delay is negative
  
      }
  
      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
      return _this3;
    }
  
    var _proto3 = Tween.prototype;
  
    _proto3.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._tDur,
          dur = this._dur,
          isNegative = totalTime < 0,
          tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
          time,
          pt,
          iteration,
          cycleDuration,
          prevIteration,
          isYoyo,
          ratio,
          timeline,
          yoyoEase;
  
      if (!dur) {
        _renderZeroDurationTween(this, totalTime, suppressEvents, force);
      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {
        //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
        time = tTime;
        timeline = this.timeline;
  
        if (this._repeat) {
          //adjust the time for repeats and yoyos
          cycleDuration = dur + this._rDelay;
  
          if (this._repeat < -1 && isNegative) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }
  
          time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
  
          if (tTime === tDur) {
            // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);
  
            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }
  
            time > dur && (time = dur);
          }
  
          isYoyo = this._yoyo && iteration & 1;
  
          if (isYoyo) {
            yoyoEase = this._yEase;
            time = dur - time;
          }
  
          prevIteration = _animationCycle(this._tTime, cycleDuration);
  
          if (time === prevTime && !force && this._initted) {
            //could be during the repeatDelay part. No need to render and fire callbacks.
            this._tTime = tTime;
            return this;
          }
  
          if (iteration !== prevIteration) {
            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality
  
            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
              this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.
  
              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
            }
          }
        }
  
        if (!this._initted) {
          if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
            this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.
  
            return this;
          }
  
          if (prevTime !== this._time) {
            // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values.
            return this;
          }
  
          if (dur !== this._dur) {
            // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
            return this.render(totalTime, suppressEvents, force);
          }
        }
  
        this._tTime = tTime;
        this._time = time;
  
        if (!this._act && this._ts) {
          this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
  
          this._lazy = 0;
        }
  
        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
  
        if (this._from) {
          this.ratio = ratio = 1 - ratio;
        }
  
        if (time && !prevTime && !suppressEvents && !iteration) {
          _callback(this, "onStart");
  
          if (this._tTime !== tTime) {
            // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
            return this;
          }
        }
  
        pt = this._pt;
  
        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }
  
        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);
  
        if (this._onUpdate && !suppressEvents) {
          isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
  
          _callback(this, "onUpdate");
        }
  
        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
  
        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
          isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
  
          if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
            // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);
  
            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }
  
      return this;
    };
  
    _proto3.targets = function targets() {
      return this._targets;
    };
  
    _proto3.invalidate = function invalidate(soft) {
      // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
      (!soft || !this.vars.runBackwards) && (this._startAt = 0);
      this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
      this._ptLookup = [];
      this.timeline && this.timeline.invalidate(soft);
      return _Animation2.prototype.invalidate.call(this, soft);
    };
  
    _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {
      _tickerActive || _ticker.wake();
      this._ts || this.play();
      var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
          ratio;
      this._initted || _initTween(this, time);
      ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
      // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
      // if (_isObject(property)) { // performance optimization
      // 	for (p in property) {
      // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
      // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
      // 		}
      // 	}
      // } else {
  
      if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {
        return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
      } //}
  
  
      _alignPlayhead(this, 0);
  
      this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
      return this.render(0);
    };
  
    _proto3.kill = function kill(targets, vars) {
      if (vars === void 0) {
        vars = "all";
      }
  
      if (!targets && (!vars || vars === "all")) {
        this._lazy = this._pt = 0;
        return this.parent ? _interrupt(this) : this;
      }
  
      if (this.timeline) {
        var tDur = this.timeline.totalDuration();
        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.
  
        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.
  
        return this;
      }
  
      var parsedTargets = this._targets,
          killingTargets = targets ? gsap_core_toArray(targets) : parsedTargets,
          propTweenLookup = this._ptLookup,
          firstPT = this._pt,
          overwrittenProps,
          curLookup,
          curOverwriteProps,
          props,
          p,
          pt,
          i;
  
      if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
        vars === "all" && (this._pt = 0);
        return _interrupt(this);
      }
  
      overwrittenProps = this._op = this._op || [];
  
      if (vars !== "all") {
        //so people can pass in a comma-delimited list of property names
        if (_isString(vars)) {
          p = {};
  
          _forEachName(vars, function (name) {
            return p[name] = 1;
          });
  
          vars = p;
        }
  
        vars = _addAliasesToVars(parsedTargets, vars);
      }
  
      i = parsedTargets.length;
  
      while (i--) {
        if (~killingTargets.indexOf(parsedTargets[i])) {
          curLookup = propTweenLookup[i];
  
          if (vars === "all") {
            overwrittenProps[i] = vars;
            props = curLookup;
            curOverwriteProps = {};
          } else {
            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
            props = vars;
          }
  
          for (p in props) {
            pt = curLookup && curLookup[p];
  
            if (pt) {
              if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                _removeLinkedListItem(this, pt, "_pt");
              }
  
              delete curLookup[p];
            }
  
            if (curOverwriteProps !== "all") {
              curOverwriteProps[p] = 1;
            }
          }
        }
      }
  
      this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
  
      return this;
    };
  
    Tween.to = function to(targets, vars) {
      return new Tween(targets, vars, arguments[2]);
    };
  
    Tween.from = function from(targets, vars) {
      return _createTweenType(1, arguments);
    };
  
    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
      return new Tween(callback, 0, {
        immediateRender: false,
        lazy: false,
        overwrite: false,
        delay: delay,
        onComplete: callback,
        onReverseComplete: callback,
        onCompleteParams: params,
        onReverseCompleteParams: params,
        callbackScope: scope
      }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
    };
  
    Tween.fromTo = function fromTo(targets, fromVars, toVars) {
      return _createTweenType(2, arguments);
    };
  
    Tween.set = function set(targets, vars) {
      vars.duration = 0;
      vars.repeatDelay || (vars.repeat = 0);
      return new Tween(targets, vars);
    };
  
    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      return _globalTimeline.killTweensOf(targets, props, onlyActive);
    };
  
    return Tween;
  }(Animation);
  
  _setDefaults(Tween.prototype, {
    _targets: [],
    _lazy: 0,
    _startAt: 0,
    _op: 0,
    _onInit: 0
  }); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
  // _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
  // 	Tween.prototype[name] = function() {
  // 		let tl = new Timeline();
  // 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
  // 	}
  // });
  //for backward compatibility. Leverage the timeline calls.
  
  
  _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
    Tween[name] = function () {
      var tl = new Timeline(),
          params = _slice.call(arguments, 0);
  
      params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
      return tl[name].apply(tl, params);
    };
  });
  /*
   * --------------------------------------------------------------------------------------
   * PROPTWEEN
   * --------------------------------------------------------------------------------------
   */
  
  
  var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
      _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
      _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
      _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
      _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
  },
      _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
      _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
        s = "";
  
    if (!ratio && data.b) {
      //b = beginning string
      s = data.b;
    } else if (ratio === 1 && data.e) {
      //e = ending string
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.
  
        pt = pt._next;
      }
  
      s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
    }
  
    data.set(data.t, data.p, s, data);
  },
      _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;
  
    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
        next;
  
    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
      _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
        hasNonDependentRemaining,
        next;
  
    while (pt) {
      next = pt._next;
  
      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }
  
      pt = next;
    }
  
    return !hasNonDependentRemaining;
  },
      _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
        next,
        pt2,
        first,
        last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)
  
    while (pt) {
      next = pt._next;
      pt2 = first;
  
      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }
  
      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }
  
      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }
  
      pt = next;
    }
  
    parent._pt = first;
  }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)
  
  
  var PropTween = /*#__PURE__*/function () {
    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
      this.t = target;
      this.s = start;
      this.c = change;
      this.p = prop;
      this.r = renderer || _renderPlain;
      this.d = data || this;
      this.set = setter || _setterPlain;
      this.pr = priority || 0;
      this._next = next;
  
      if (next) {
        next._prev = this;
      }
    }
  
    var _proto4 = PropTween.prototype;
  
    _proto4.modifier = function modifier(func, tween, target) {
      this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)
  
      this.set = _setterWithModifier;
      this.m = func;
      this.mt = target; //modifier target
  
      this.tween = tween;
    };
  
    return PropTween;
  }(); //Initialization tasks
  
  _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
    return _reservedProps[name] = 1;
  });
  
  _globals.TweenMax = _globals.TweenLite = Tween;
  _globals.TimelineLite = _globals.TimelineMax = Timeline;
  _globalTimeline = new Timeline({
    sortChildren: false,
    defaults: _defaults,
    autoRemoveChildren: true,
    id: "root",
    smoothChildTiming: true
  });
  _config.stringFilter = _colorStringFilter;
  
  var _media = [],
      _listeners = {},
      _emptyArray = [],
      _lastMediaTime = 0,
      _contextID = 0,
      _dispatch = function _dispatch(type) {
    return (_listeners[type] || _emptyArray).map(function (f) {
      return f();
    });
  },
      _onMediaChange = function _onMediaChange() {
    var time = Date.now(),
        matches = [];
  
    if (time - _lastMediaTime > 2) {
      _dispatch("matchMediaInit");
  
      _media.forEach(function (c) {
        var queries = c.queries,
            conditions = c.conditions,
            match,
            p,
            anyMatch,
            toggled;
  
        for (p in queries) {
          match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.
  
          match && (anyMatch = 1);
  
          if (match !== conditions[p]) {
            conditions[p] = match;
            toggled = 1;
          }
        }
  
        if (toggled) {
          c.revert();
          anyMatch && matches.push(c);
        }
      });
  
      _dispatch("matchMediaRevert");
  
      matches.forEach(function (c) {
        return c.onMatch(c);
      });
      _lastMediaTime = time;
  
      _dispatch("matchMedia");
    }
  };
  
  var Context = /*#__PURE__*/function () {
    function Context(func, scope) {
      this.selector = scope && selector(scope);
      this.data = [];
      this._r = []; // returned/cleanup functions
  
      this.isReverted = false;
      this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely
  
      func && this.add(func);
    }
  
    var _proto5 = Context.prototype;
  
    _proto5.add = function add(name, func, scope) {
      // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
      // if (name && _isFunction(name.revert)) {
      // 	this.data.push(name);
      // 	return (name._ctx = this);
      // }
      if (_isFunction(name)) {
        scope = func;
        func = name;
        name = _isFunction;
      }
  
      var self = this,
          f = function f() {
        var prev = _context,
            prevSelector = self.selector,
            result;
        prev && prev !== self && prev.data.push(self);
        scope && (self.selector = selector(scope));
        _context = self;
        result = func.apply(self, arguments);
        _isFunction(result) && self._r.push(result);
        _context = prev;
        self.selector = prevSelector;
        self.isReverted = false;
        return result;
      };
  
      self.last = f;
      return name === _isFunction ? f(self) : name ? self[name] = f : f;
    };
  
    _proto5.ignore = function ignore(func) {
      var prev = _context;
      _context = null;
      func(this);
      _context = prev;
    };
  
    _proto5.getTweens = function getTweens() {
      var a = [];
      this.data.forEach(function (e) {
        return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
      });
      return a;
    };
  
    _proto5.clear = function clear() {
      this._r.length = this.data.length = 0;
    };
  
    _proto5.kill = function kill(revert, matchMedia) {
      var _this4 = this;
  
      if (revert) {
        var tweens = this.getTweens();
        this.data.forEach(function (t) {
          // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
          if (t.data === "isFlip") {
            t.revert();
            t.getChildren(true, true, false).forEach(function (tween) {
              return tweens.splice(tweens.indexOf(tween), 1);
            });
          }
        }); // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort
  
        tweens.map(function (t) {
          return {
            g: t.globalTime(0),
            t: t
          };
        }).sort(function (a, b) {
          return b.g - a.g || -Infinity;
        }).forEach(function (o) {
          return o.t.revert(revert);
        }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.
  
        this.data.forEach(function (e) {
          return !(e instanceof Tween) && e.revert && e.revert(revert);
        });
  
        this._r.forEach(function (f) {
          return f(revert, _this4);
        });
  
        this.isReverted = true;
      } else {
        this.data.forEach(function (e) {
          return e.kill && e.kill();
        });
      }
  
      this.clear();
  
      if (matchMedia) {
        var i = _media.length;
  
        while (i--) {
          // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
          _media[i].id === this.id && _media.splice(i, 1);
        }
      }
    };
  
    _proto5.revert = function revert(config) {
      this.kill(config || {});
    };
  
    return Context;
  }();
  
  var MatchMedia = /*#__PURE__*/function () {
    function MatchMedia(scope) {
      this.contexts = [];
      this.scope = scope;
    }
  
    var _proto6 = MatchMedia.prototype;
  
    _proto6.add = function add(conditions, func, scope) {
      _isObject(conditions) || (conditions = {
        matches: conditions
      });
      var context = new Context(0, scope || this.scope),
          cond = context.conditions = {},
          mq,
          p,
          active;
      _context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()
  
      this.contexts.push(context);
      func = context.add("onMatch", func);
      context.queries = conditions;
  
      for (p in conditions) {
        if (p === "all") {
          active = 1;
        } else {
          mq = _win.matchMedia(conditions[p]);
  
          if (mq) {
            _media.indexOf(context) < 0 && _media.push(context);
            (cond[p] = mq.matches) && (active = 1);
            mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
          }
        }
      }
  
      active && func(context);
      return this;
    } // refresh() {
    // 	let time = _lastMediaTime,
    // 		media = _media;
    // 	_lastMediaTime = -1;
    // 	_media = this.contexts;
    // 	_onMediaChange();
    // 	_lastMediaTime = time;
    // 	_media = media;
    // }
    ;
  
    _proto6.revert = function revert(config) {
      this.kill(config || {});
    };
  
    _proto6.kill = function kill(revert) {
      this.contexts.forEach(function (c) {
        return c.kill(revert, true);
      });
    };
  
    return MatchMedia;
  }();
  /*
   * --------------------------------------------------------------------------------------
   * GSAP
   * --------------------------------------------------------------------------------------
   */
  
  
  var _gsap = {
    registerPlugin: function registerPlugin() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
  
      args.forEach(function (config) {
        return _createPlugin(config);
      });
    },
    timeline: function timeline(vars) {
      return new Timeline(vars);
    },
    getTweensOf: function getTweensOf(targets, onlyActive) {
      return _globalTimeline.getTweensOf(targets, onlyActive);
    },
    getProperty: function getProperty(target, property, unit, uncache) {
      _isString(target) && (target = gsap_core_toArray(target)[0]); //in case selector text or an array is passed in
  
      var getter = _getCache(target || {}).get,
          format = unit ? _passThrough : _numericIfPossible;
  
      unit === "native" && (unit = "");
      return !target ? target : !property ? function (property, unit, uncache) {
        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    },
    quickSetter: function quickSetter(target, property, unit) {
      target = gsap_core_toArray(target);
  
      if (target.length > 1) {
        var setters = target.map(function (t) {
          return gsap_core_gsap.quickSetter(t, property, unit);
        }),
            l = setters.length;
        return function (value) {
          var i = l;
  
          while (i--) {
            setters[i](value);
          }
        };
      }
  
      target = target[0] || {};
  
      var Plugin = _plugins[property],
          cache = _getCache(target),
          p = cache.harness && (cache.harness.aliases || {})[property] || property,
          // in case it's an alias, like "rotate" for "rotation".
      setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);
  
      return Plugin ? setter : function (value) {
        return setter(target, p, unit ? value + unit : value, cache, 1);
      };
    },
    quickTo: function quickTo(target, property, vars) {
      var _merge2;
  
      var tween = gsap_core_gsap.to(target, _merge((_merge2 = {}, _merge2[property] = "+=0.1", _merge2.paused = true, _merge2), vars || {})),
          func = function func(value, start, startIsRelative) {
        return tween.resetTo(property, value, start, startIsRelative);
      };
  
      func.tween = tween;
      return func;
    },
    isTweening: function isTweening(targets) {
      return _globalTimeline.getTweensOf(targets, true).length > 0;
    },
    defaults: function defaults(value) {
      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
      return _mergeDeep(_defaults, value || {});
    },
    config: function config(value) {
      return _mergeDeep(_config, value || {});
    },
    registerEffect: function registerEffect(_ref3) {
      var name = _ref3.name,
          effect = _ref3.effect,
          plugins = _ref3.plugins,
          defaults = _ref3.defaults,
          extendTimeline = _ref3.extendTimeline;
      (plugins || "").split(",").forEach(function (pluginName) {
        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
      });
  
      _effects[name] = function (targets, vars, tl) {
        return effect(gsap_core_toArray(targets), _setDefaults(vars || {}, defaults), tl);
      };
  
      if (extendTimeline) {
        Timeline.prototype[name] = function (targets, vars, position) {
          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
        };
      }
    },
    registerEase: function registerEase(name, ease) {
      _easeMap[name] = _parseEase(ease);
    },
    parseEase: function parseEase(ease, defaultEase) {
      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
    },
    getById: function getById(id) {
      return _globalTimeline.getById(id);
    },
    exportRoot: function exportRoot(vars, includeDelayedCalls) {
      if (vars === void 0) {
        vars = {};
      }
  
      var tl = new Timeline(vars),
          child,
          next;
      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
  
      _globalTimeline.remove(tl);
  
      tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).
  
      tl._time = tl._tTime = _globalTimeline._time;
      child = _globalTimeline._first;
  
      while (child) {
        next = child._next;
  
        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
          _addToTimeline(tl, child, child._start - child._delay);
        }
  
        child = next;
      }
  
      _addToTimeline(_globalTimeline, tl, 0);
  
      return tl;
    },
    context: function context(func, scope) {
      return func ? new Context(func, scope) : _context;
    },
    matchMedia: function matchMedia(scope) {
      return new MatchMedia(scope);
    },
    matchMediaRefresh: function matchMediaRefresh() {
      return _media.forEach(function (c) {
        var cond = c.conditions,
            found,
            p;
  
        for (p in cond) {
          if (cond[p]) {
            cond[p] = false;
            found = 1;
          }
        }
  
        found && c.revert();
      }) || _onMediaChange();
    },
    addEventListener: function addEventListener(type, callback) {
      var a = _listeners[type] || (_listeners[type] = []);
      ~a.indexOf(callback) || a.push(callback);
    },
    removeEventListener: function removeEventListener(type, callback) {
      var a = _listeners[type],
          i = a && a.indexOf(callback);
      i >= 0 && a.splice(i, 1);
    },
    utils: {
      wrap: wrap,
      wrapYoyo: wrapYoyo,
      distribute: distribute,
      random: random,
      snap: snap,
      normalize: normalize,
      getUnit: getUnit,
      clamp: clamp,
      splitColor: splitColor,
      toArray: gsap_core_toArray,
      selector: selector,
      mapRange: mapRange,
      pipe: pipe,
      unitize: unitize,
      interpolate: interpolate,
      shuffle: shuffle
    },
    install: _install,
    effects: _effects,
    ticker: _ticker,
    updateRoot: Timeline.updateRoot,
    plugins: _plugins,
    globalTimeline: _globalTimeline,
    core: {
      PropTween: PropTween,
      globals: _addGlobal,
      Tween: Tween,
      Timeline: Timeline,
      Animation: Animation,
      getCache: _getCache,
      _removeLinkedListItem: _removeLinkedListItem,
      reverting: function reverting() {
        return _reverting;
      },
      context: function context(toAdd) {
        if (toAdd && _context) {
          _context.data.push(toAdd);
  
          toAdd._ctx = _context;
        }
  
        return _context;
      },
      suppressOverwrites: function suppressOverwrites(value) {
        return _suppressOverwrites = value;
      }
    }
  };
  
  _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
    return _gsap[name] = Tween[name];
  });
  
  _ticker.add(Timeline.updateRoot);
  
  _quickTween = _gsap.to({}, {
    duration: 0
  }); // ---- EXTRA PLUGINS --------------------------------------------------------
  
  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;
  
    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }
  
    return pt;
  },
      _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
        p,
        i,
        pt;
  
    for (p in modifiers) {
      i = targets.length;
  
      while (i--) {
        pt = tween._ptLookup[i][p];
  
        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            // is a plugin
            pt = _getPluginPropTween(pt, p);
          }
  
          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      //don't pre-process function-based values or "random()" strings.
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;
  
          if (_isString(vars)) {
            temp = {};
  
            _forEachName(vars, function (name) {
              return temp[name] = 1;
            }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.
  
  
            vars = temp;
          }
  
          if (modifier) {
            temp = {};
  
            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }
  
            vars = temp;
          }
  
          _addModifiers(tween, vars);
        };
      }
    };
  }; //register core plugins
  
  
  var gsap_core_gsap = _gsap.registerPlugin({
    name: "attr",
    init: function init(target, vars, tween, index, targets) {
      var p, pt, v;
      this.tween = tween;
  
      for (p in vars) {
        v = target.getAttribute(p) || "";
        pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
        pt.op = p;
        pt.b = v; // record the beginning value so we can revert()
  
        this._props.push(p);
      }
    },
    render: function render(ratio, data) {
      var pt = data._pt;
  
      while (pt) {
        _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)
  
        pt = pt._next;
      }
    }
  }, {
    name: "endArray",
    init: function init(target, value) {
      var i = value.length;
  
      while (i--) {
        this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
      }
    }
  }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.
  
  Tween.version = Timeline.version = gsap_core_gsap.version = "3.12.2";
  _coreReady = 1;
  _windowExists() && _wake();
  var Power0 = _easeMap.Power0,
      Power1 = _easeMap.Power1,
      Power2 = _easeMap.Power2,
      Power3 = _easeMap.Power3,
      Power4 = _easeMap.Power4,
      Linear = _easeMap.Linear,
      Quad = _easeMap.Quad,
      Cubic = _easeMap.Cubic,
      Quart = _easeMap.Quart,
      gsap_core_Quint = _easeMap.Quint,
      Strong = _easeMap.Strong,
      Elastic = _easeMap.Elastic,
      Back = _easeMap.Back,
      SteppedEase = _easeMap.SteppedEase,
      Bounce = _easeMap.Bounce,
      Sine = _easeMap.Sine,
      Expo = _easeMap.Expo,
      Circ = _easeMap.Circ;
  
   //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.
  
  
  ;// CONCATENATED MODULE: ./node_modules/gsap/CSSPlugin.js
  /*!
   * CSSPlugin 3.12.2
   * https://greensock.com
   *
   * Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  
  /* eslint-disable */
  
  
  var CSSPlugin_win,
      CSSPlugin_doc,
      _docElement,
      _pluginInitted,
      _tempDiv,
      _tempDivStyler,
      _recentSetterPlugin,
      CSSPlugin_reverting,
      CSSPlugin_windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      _transformProps = {},
      _RAD2DEG = 180 / Math.PI,
      _DEG2RAD = Math.PI / 180,
      _atan2 = Math.atan2,
      CSSPlugin_bigNum = 1e8,
      _capsExp = /([A-Z])/g,
      _horizontalExp = /(left|right|width|margin|padding|x)/i,
      _complexExp = /[\s,\(]\S/,
      _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
      _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
      //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
  _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
      _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
      _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
      _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
      _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
      _transformProp = "transform",
      _transformOriginProp = _transformProp + "Origin",
      _saveStyle = function _saveStyle(property, isNotCSS) {
    var _this = this;
  
    var target = this.target,
        style = target.style;
  
    if (property in _transformProps && style) {
      this.tfm = this.tfm || {};
  
      if (property !== "transform") {
        property = _propertyAliases[property] || property;
        ~property.indexOf(",") ? property.split(",").forEach(function (a) {
          return _this.tfm[a] = _get(target, a);
        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.
      } else {
        return _propertyAliases.transform.split(",").forEach(function (p) {
          return _saveStyle.call(_this, p, isNotCSS);
        });
      }
  
      if (this.props.indexOf(_transformProp) >= 0) {
        return;
      }
  
      if (target._gsap.svg) {
        this.svgo = target.getAttribute("data-svg-origin");
        this.props.push(_transformOriginProp, isNotCSS, "");
      }
  
      property = _transformProp;
    }
  
    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
  },
      _removeIndependentTransforms = function _removeIndependentTransforms(style) {
    if (style.translate) {
      style.removeProperty("translate");
      style.removeProperty("scale");
      style.removeProperty("rotate");
    }
  },
      _revertStyle = function _revertStyle() {
    var props = this.props,
        target = this.target,
        style = target.style,
        cache = target._gsap,
        i,
        p;
  
    for (i = 0; i < props.length; i += 3) {
      // stored like this: property, isNotCSS, value
      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
    }
  
    if (this.tfm) {
      for (p in this.tfm) {
        cache[p] = this.tfm[p];
      }
  
      if (cache.svg) {
        cache.renderTransform();
        target.setAttribute("data-svg-origin", this.svgo || "");
      }
  
      i = CSSPlugin_reverting();
  
      if ((!i || !i.isStart) && !style[_transformProp]) {
        _removeIndependentTransforms(style);
  
        cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
      }
    }
  },
      _getStyleSaver = function _getStyleSaver(target, properties) {
    var saver = {
      target: target,
      props: [],
      revert: _revertStyle,
      save: _saveStyle
    };
    target._gsap || gsap_core_gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.
  
    properties && properties.split(",").forEach(function (p) {
      return saver.save(p);
    });
    return saver;
  },
      _supports3D,
      _createElement = function _createElement(type, ns) {
    var e = CSSPlugin_doc.createElementNS ? CSSPlugin_doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : CSSPlugin_doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
  
    return e.style ? e : CSSPlugin_doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
  },
      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
  },
      _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
        s = e.style,
        i = 5;
  
    if (property in s && !preferPrefix) {
      return property;
    }
  
    property = property.charAt(0).toUpperCase() + property.substr(1);
  
    while (i-- && !(_prefixes[i] + property in s)) {}
  
    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
      _initCore = function _initCore() {
    if (CSSPlugin_windowExists() && window.document) {
      CSSPlugin_win = window;
      CSSPlugin_doc = CSSPlugin_win.document;
      _docElement = CSSPlugin_doc.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.
  
      _supports3D = !!_checkPropPrefix("perspective");
      CSSPlugin_reverting = gsap_core_gsap.core.reverting;
      _pluginInitted = 1;
    }
  },
      _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
        oldParent = this.parentNode,
        oldSibling = this.nextSibling,
        oldCSS = this.style.cssText,
        bbox;
  
    _docElement.appendChild(svg);
  
    svg.appendChild(this);
    this.style.display = "block";
  
    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox; //store the original
  
        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }
  
    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }
  
    _docElement.removeChild(svg);
  
    this.style.cssText = oldCSS;
    return bbox;
  },
      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;
  
    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
      _getBBox = function _getBBox(target) {
    var bounds;
  
    try {
      bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }
  
    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
  
    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
      _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
      //reports if the element is an SVG on which getBBox() actually works
  _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style;
  
      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }
  
      if (style.removeProperty) {
        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
          //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
          property = "-" + property;
        }
  
        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
        style.removeAttribute(property);
      }
    }
  },
      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;
  
    plugin._props.push(property);
  
    return pt;
  },
      _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
      _nonStandardLayouts = {
    grid: 1,
    flex: 1
  },
      //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
  _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
        curUnit = (value + "").trim().substr((curValue + "").length) || "px",
        // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
    style = _tempDiv.style,
        horizontal = _horizontalExp.test(property),
        isRootSVG = target.tagName.toLowerCase() === "svg",
        measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
        amount = 100,
        toPixels = unit === "px",
        toPercent = unit === "%",
        px,
        parent,
        cache,
        isSVG;
  
    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }
  
    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);
  
    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
    }
  
    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;
  
    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }
  
    if (!parent || parent === CSSPlugin_doc || !parent.appendChild) {
      parent = CSSPlugin_doc.body;
    }
  
    cache = parent._gsap;
  
    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {
      return _round(curValue / cache.width * amount);
    } else {
      (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
      parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.
  
      parent.appendChild(_tempDiv);
      px = _tempDiv[measureProperty];
      parent.removeChild(_tempDiv);
      style.position = "absolute";
  
      if (horizontal && toPercent) {
        cache = _getCache(parent);
        cache.time = _ticker.time;
        cache.width = parent[measureProperty];
      }
    }
  
    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
      _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();
  
    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];
  
      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }
  
    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];
  
      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
      }
    }
  
    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    if (!start || start === "none") {
      // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
      var p = _checkPropPrefix(prop, target, 1),
          s = p && _getComputedProperty(target, p, 1);
  
      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
      }
    }
  
    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
        index = 0,
        matchIndex = 0,
        a,
        result,
        startValues,
        startNum,
        color,
        startValue,
        endValue,
        endNum,
        chunk,
        endUnit,
        startUnit,
        endValues;
    pt.b = start;
    pt.e = end;
    start += ""; // ensure values are strings
  
    end += "";
  
    if (end === "auto") {
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      target.style[prop] = start;
    }
  
    a = [start, end];
  
    _colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().
  
  
    start = a[0];
    end = a[1];
    startValues = start.match(_numWithUnitExp) || [];
    endValues = end.match(_numWithUnitExp) || [];
  
    if (endValues.length) {
      while (result = _numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);
  
        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }
  
        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          endValue.charAt(1) === "=" && (endValue = _parseRelative(startNum, endValue) + startUnit);
          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _numWithUnitExp.lastIndex - endUnit.length;
  
          if (!endUnit) {
            //if something like "perspective:300" is passed in and we must add a unit to the end
            endUnit = endUnit || _config.units[prop] || startUnit;
  
            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }
  
          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
  
  
          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum - startNum,
            m: color && color < 4 || prop === "zIndex" ? Math.round : 0
          };
        }
      }
  
      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }
  
    _relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
  
    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.
  
    return pt;
  },
      _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
        x = split[0],
        y = split[1] || "50%";
  
    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      //the user provided them in the wrong order, so flip them
      value = x;
      x = y;
      y = value;
    }
  
    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
      _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
          style = target.style,
          props = data.u,
          cache = target._gsap,
          prop,
          clearTransforms,
          i;
  
      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;
  
        while (--i > -1) {
          prop = props[i];
  
          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }
  
          _removeProperty(target, prop);
        }
      }
  
      if (clearTransforms) {
        _removeProperty(target, _transformProp);
  
        if (cache) {
          cache.svg && target.removeAttribute("transform");
  
          _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.
  
  
          cache.uncache = 1;
  
          _removeIndependentTransforms(style);
        }
      }
    }
  },
      // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
  _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;
  
        plugin._props.push(property);
  
        return 1;
      }
    }
    /* className feature (about 0.4kb gzipped).
    , className(plugin, target, property, endValue, tween) {
      let _renderClassName = (ratio, data) => {
          data.css.render(ratio, data.css);
          if (!ratio || ratio === 1) {
            let inline = data.rmv,
              target = data.t,
              p;
            target.setAttribute("class", ratio ? data.e : data.b);
            for (p in inline) {
              _removeProperty(target, p);
            }
          }
        },
        _getAllStyles = (target) => {
          let styles = {},
            computed = getComputedStyle(target),
            p;
          for (p in computed) {
            if (isNaN(p) && p !== "cssText" && p !== "length") {
              styles[p] = computed[p];
            }
          }
          _setDefaults(styles, _parseTransform(target, 1));
          return styles;
        },
        startClassList = target.getAttribute("class"),
        style = target.style,
        cssText = style.cssText,
        cache = target._gsap,
        classPT = cache.classPT,
        inlineToRemoveAtEnd = {},
        data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
        changingVars = {},
        startVars = _getAllStyles(target),
        transformRelated = /(transform|perspective)/i,
        endVars, p;
      if (classPT) {
        classPT.r(1, classPT.d);
        _removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
      }
      target.setAttribute("class", data.e);
      endVars = _getAllStyles(target, true);
      target.setAttribute("class", startClassList);
      for (p in endVars) {
        if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
          changingVars[p] = endVars[p];
          if (!style[p] && style[p] !== "0") {
            inlineToRemoveAtEnd[p] = 1;
          }
        }
      }
      cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
      if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
        style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
      }
      _parseTransform(target, true); //to clear the caching of transforms
      data.css = new gsap.plugins.css();
      data.css.init(target, changingVars, tween);
      plugin._props.push(...data.css._props);
      return 1;
    }
    */
  
  },
  
  /*
   * --------------------------------------------------------------------------------------
   * TRANSFORMS
   * --------------------------------------------------------------------------------------
   */
  _identity2DMatrix = [1, 0, 0, 1, 0, 0],
      _rotationalProperties = {},
      _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);
  
    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
  },
      _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || _getCache(target),
        style = target.style,
        matrix = _getComputedTransformMatrixAsArray(target),
        parent,
        nextSibling,
        temp,
        addedToDOM;
  
    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.
  
      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
      //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;
  
      if (!parent || !target.offsetParent) {
        // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
        addedToDOM = 1; //flag
  
        nextSibling = target.nextElementSibling;
  
        _docElement.appendChild(target); //we must add it to the DOM in order to get values properly
  
      }
  
      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");
  
      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }
  
    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
        matrix = matrixArray || _getMatrix(target, true),
        xOriginOld = cache.xOrigin || 0,
        yOriginOld = cache.yOrigin || 0,
        xOffsetOld = cache.xOffset || 0,
        yOffsetOld = cache.yOffset || 0,
        a = matrix[0],
        b = matrix[1],
        c = matrix[2],
        d = matrix[3],
        tx = matrix[4],
        ty = matrix[5],
        originSplit = origin.split(" "),
        xOrigin = parseFloat(originSplit[0]) || 0,
        yOrigin = parseFloat(originSplit[1]) || 0,
        bounds,
        determinant,
        x,
        y;
  
    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y;
    }
  
    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }
  
    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).
  
    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
  
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
  
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
  
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }
  
    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
      _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new GSCache(target);
  
    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }
  
    var style = target.style,
        invertedScaleX = cache.scaleX < 0,
        px = "px",
        deg = "deg",
        cs = getComputedStyle(target),
        origin = _getComputedProperty(target, _transformOriginProp) || "0",
        x,
        y,
        z,
        scaleX,
        scaleY,
        rotation,
        rotationX,
        rotationY,
        skewX,
        skewY,
        perspective,
        xOrigin,
        yOrigin,
        matrix,
        angle,
        cos,
        sin,
        a,
        b,
        c,
        d,
        a12,
        a22,
        t1,
        t2,
        t3,
        a13,
        a23,
        a33,
        a42,
        a43,
        a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));
  
    if (cs.translate) {
      // accommodate independent transforms by combining them into normal ones.
      if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
        style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
      }
  
      style.scale = style.rotate = style.translate = "none";
    }
  
    matrix = _getMatrix(target, cache.svg);
  
    if (cache.svg) {
      if (cache.uncache) {
        // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
        t2 = target.getBBox();
        origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
        t1 = "";
      } else {
        t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
      }
  
      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }
  
    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;
  
    if (matrix !== _identity2DMatrix) {
      a = matrix[0]; //a11
  
      b = matrix[1]; //a21
  
      c = matrix[2]; //a31
  
      d = matrix[3]; //a41
  
      x = a12 = matrix[4];
      y = a22 = matrix[5]; //2D matrix
  
      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
  
        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
  
        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        } //3D matrix
  
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG; //rotationX
  
        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        } //rotationY
  
  
        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;
  
        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        } //rotationZ
  
  
        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;
  
        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }
  
        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }
  
        scaleX = _round(Math.sqrt(a * a + b * b + c * c));
        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }
  
      if (cache.svg) {
        //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }
  
    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }
  
    uncache = uncache || cache.uncache;
    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = _round(scaleX);
    cache.scaleY = _round(scaleY);
    cache.rotation = _round(rotation) + deg;
    cache.rotationX = _round(rotationX) + deg;
    cache.rotationY = _round(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;
  
    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }
  
    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
      _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
      //for handling transformOrigin values, stripping out the 3rd dimension
  _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = getUnit(start);
    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;
  
    _renderCSSTransforms(ratio, cache);
  },
      _zeroDeg = "0deg",
      _zeroPx = "0px",
      _endParenthesis = ") ",
      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
        xPercent = _ref.xPercent,
        yPercent = _ref.yPercent,
        x = _ref.x,
        y = _ref.y,
        z = _ref.z,
        rotation = _ref.rotation,
        rotationY = _ref.rotationY,
        rotationX = _ref.rotationX,
        skewX = _ref.skewX,
        skewY = _ref.skewY,
        scaleX = _ref.scaleX,
        scaleY = _ref.scaleY,
        transformPerspective = _ref.transformPerspective,
        force3D = _ref.force3D,
        target = _ref.target,
        zOrigin = _ref.zOrigin,
        transforms = "",
        use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)
  
  
    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
          a13 = Math.sin(angle),
          a33 = Math.cos(angle),
          cos;
  
      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }
  
    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }
  
    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }
  
    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }
  
    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }
  
    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }
  
    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }
  
    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }
  
    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }
  
    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
        xPercent = _ref2.xPercent,
        yPercent = _ref2.yPercent,
        x = _ref2.x,
        y = _ref2.y,
        rotation = _ref2.rotation,
        skewX = _ref2.skewX,
        skewY = _ref2.skewY,
        scaleX = _ref2.scaleX,
        scaleY = _ref2.scaleY,
        target = _ref2.target,
        xOrigin = _ref2.xOrigin,
        yOrigin = _ref2.yOrigin,
        xOffset = _ref2.xOffset,
        yOffset = _ref2.yOffset,
        forceCSS = _ref2.forceCSS,
        tx = parseFloat(x),
        ty = parseFloat(y),
        a11,
        a21,
        a12,
        a22,
        temp;
  
    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);
  
    if (skewY) {
      //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }
  
    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;
  
      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;
  
        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }
  
      a11 = _round(a11);
      a21 = _round(a21);
      a12 = _round(a12);
      a22 = _round(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }
  
    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }
  
    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }
  
    if (xPercent || yPercent) {
      //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
      temp = target.getBBox();
      tx = _round(tx + xPercent / 100 * temp.width);
      ty = _round(ty + yPercent / 100 * temp.height);
    }
  
    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
  },
      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
    var cap = 360,
        isString = _isString(endValue),
        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
        change = endNum - startNum,
        finalValue = startNum + change + "deg",
        direction,
        pt;
  
    if (isString) {
      direction = endValue.split("_")[1];
  
      if (direction === "short") {
        change %= cap;
  
        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }
  
      if (direction === "cw" && change < 0) {
        change = (change + cap * CSSPlugin_bigNum) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * CSSPlugin_bigNum) % cap - ~~(change / cap) * cap;
      }
    }
  
    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";
  
    plugin._props.push(property);
  
    return pt;
  },
      _assign = function _assign(target, source) {
    // Internet Explorer doesn't have Object.assign(), so we recreate it here.
    for (var p in source) {
      target[p] = source[p];
    }
  
    return target;
  },
      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
    var startCache = _assign({}, target._gsap),
        exclude = "perspective,force3D,transformOrigin,svgOrigin",
        style = target.style,
        endCache,
        p,
        startValue,
        endValue,
        startNum,
        endNum,
        startUnit,
        endUnit;
  
    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
  
      _removeProperty(target, _transformProp);
  
      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp];
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp] = startValue;
    }
  
    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];
  
      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
        startUnit = getUnit(startValue);
        endUnit = getUnit(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;
  
        plugin._props.push(p);
      }
    }
  
    _assign(endCache, startCache);
  }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.
  
  
  _forEachName("padding,margin,Width,Radius", function (name, index) {
    var t = "Top",
        r = "Right",
        b = "Bottom",
        l = "Left",
        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });
  
    _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
      var a, vars;
  
      if (arguments.length < 4) {
        // getter, passed target, property, and unit (from _get())
        a = props.map(function (prop) {
          return _get(plugin, prop, property);
        });
        vars = a.join(" ");
        return vars.split(a[0]).length === 5 ? a[0] : vars;
      }
  
      a = (endValue + "").split(" ");
      vars = {};
      props.forEach(function (prop, i) {
        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
      });
      plugin.init(target, vars, tween);
    };
  });
  
  var CSSPlugin = {
    name: "css",
    register: _initCore,
    targetTest: function targetTest(target) {
      return target.style && target.nodeType;
    },
    init: function init(target, vars, tween, index, targets) {
      var props = this._props,
          style = target.style,
          startAt = tween.vars.startAt,
          startValue,
          endValue,
          endNum,
          startNum,
          type,
          specialProp,
          p,
          startUnit,
          endUnit,
          relative,
          isTransformRelated,
          transformPropTween,
          cache,
          smooth,
          hasPriority,
          inlineProps;
      _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps
  
      this.styles = this.styles || _getStyleSaver(target);
      inlineProps = this.styles.props;
      this.tween = tween;
  
      for (p in vars) {
        if (p === "autoRound") {
          continue;
        }
  
        endValue = vars[p];
  
        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
          // plugins
          continue;
        }
  
        type = typeof endValue;
        specialProp = _specialProps[p];
  
        if (type === "function") {
          endValue = endValue.call(tween, index, target, targets);
          type = typeof endValue;
        }
  
        if (type === "string" && ~endValue.indexOf("random(")) {
          endValue = _replaceRandom(endValue);
        }
  
        if (specialProp) {
          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
        } else if (p.substr(0, 2) === "--") {
          //CSS variable
          startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
          endValue += "";
          _colorExp.lastIndex = 0;
  
          if (!_colorExp.test(startValue)) {
            // colors don't have units
            startUnit = getUnit(startValue);
            endUnit = getUnit(endValue);
          }
  
          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
          this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
          props.push(p);
          inlineProps.push(p, 0, style[p]);
        } else if (type !== "undefined") {
          if (startAt && p in startAt) {
            // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
            startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
            _isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
            getUnit(startValue + "") || (startValue += _config.units[p] || getUnit(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.
  
            (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
          } else {
            startValue = _get(target, p);
          }
  
          startNum = parseFloat(startValue);
          relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
          relative && (endValue = endValue.substr(2));
          endNum = parseFloat(endValue);
  
          if (p in _propertyAliases) {
            if (p === "autoAlpha") {
              //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
              if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
                //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                startNum = 0;
              }
  
              inlineProps.push("visibility", 0, style.visibility);
  
              _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
            }
  
            if (p !== "scale" && p !== "transform") {
              p = _propertyAliases[p];
              ~p.indexOf(",") && (p = p.split(",")[0]);
            }
          }
  
          isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---
  
          if (isTransformRelated) {
            this.styles.save(p);
  
            if (!transformPropTween) {
              cache = target._gsap;
              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.
  
              smooth = vars.smoothOrigin !== false && cache.smooth;
              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)
  
              transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
            }
  
            if (p === "scale") {
              this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);
              this._pt.u = 0;
              props.push("scaleY", p);
              p += "X";
            } else if (p === "transformOrigin") {
              inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
              endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.
  
              if (cache.svg) {
                _applySVGOrigin(target, endValue, 0, smooth, 0, this);
              } else {
                endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!
  
                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
  
                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
              }
  
              continue;
            } else if (p === "svgOrigin") {
              _applySVGOrigin(target, endValue, 1, smooth, 0, this);
  
              continue;
            } else if (p in _rotationalProperties) {
              _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);
  
              continue;
            } else if (p === "smoothOrigin") {
              _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
  
              continue;
            } else if (p === "force3D") {
              cache[p] = endValue;
              continue;
            } else if (p === "transform") {
              _addRawTransformPTs(this, endValue, target);
  
              continue;
            }
          } else if (!(p in style)) {
            p = _checkPropPrefix(p) || p;
          }
  
          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
            startUnit = (startValue + "").substr((startNum + "").length);
            endNum || (endNum = 0); // protect against NaN
  
            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);
            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
            this._pt.u = endUnit || 0;
  
            if (startUnit !== endUnit && endUnit !== "%") {
              //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
              this._pt.b = startValue;
              this._pt.r = _renderCSSPropWithBeginning;
            }
          } else if (!(p in style)) {
            if (p in target) {
              //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
              this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
            } else if (p !== "parseTransform") {
              _missingPlugin(p, endValue);
  
              continue;
            }
          } else {
            _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
          }
  
          isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
          props.push(p);
        }
      }
  
      hasPriority && _sortPropTweensByPriority(this);
    },
    render: function render(ratio, data) {
      if (data.tween._time || !CSSPlugin_reverting()) {
        var pt = data._pt;
  
        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }
      } else {
        data.styles.revert();
      }
    },
    get: _get,
    aliases: _propertyAliases,
    getSetter: function getSetter(target, property, plugin) {
      //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
      var p = _propertyAliases[property];
      p && p.indexOf(",") < 0 && (property = p);
      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
    },
    core: {
      _removeProperty: _removeProperty,
      _getMatrix: _getMatrix
    }
  };
  gsap_core_gsap.utils.checkPrefix = _checkPropPrefix;
  gsap_core_gsap.core.getStyleSaver = _getStyleSaver;
  
  (function (positionAndScale, rotation, others, aliases) {
    var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
      _transformProps[name] = 1;
    });
  
    _forEachName(rotation, function (name) {
      _config.units[name] = "deg";
      _rotationalProperties[name] = 1;
    });
  
    _propertyAliases[all[13]] = positionAndScale + "," + rotation;
  
    _forEachName(aliases, function (name) {
      var split = name.split(":");
      _propertyAliases[split[1]] = all[split[0]];
    });
  })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
  
  _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
    _config.units[name] = "px";
  });
  
  gsap_core_gsap.registerPlugin(CSSPlugin);
  
  ;// CONCATENATED MODULE: ./node_modules/gsap/index.js
  
  
  var gsapWithCSS = gsap_core_gsap.registerPlugin(CSSPlugin) || gsap_core_gsap,
      // to protect from tree shaking
  TweenMaxWithCSS = gsapWithCSS.core.Tween;
  
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(o) {
    "@babel/helpers - typeof";
  
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  
  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  
  
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js
  
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  ;// CONCATENATED MODULE: ./node_modules/gsap/Observer.js
  function Observer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
  
  function Observer_createClass(Constructor, protoProps, staticProps) { if (protoProps) Observer_defineProperties(Constructor.prototype, protoProps); if (staticProps) Observer_defineProperties(Constructor, staticProps); return Constructor; }
  
  /*!
   * Observer 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  
  /* eslint-disable */
  var Observer_gsap,
      Observer_coreInitted,
      Observer_clamp,
      Observer_win,
      Observer_doc,
      _docEl,
      _body,
      _isTouch,
      _pointerType,
      ScrollTrigger,
      _root,
      _normalizer,
      _eventTypes,
      Observer_context,
      _getGSAP = function _getGSAP() {
    return Observer_gsap || typeof window !== "undefined" && (Observer_gsap = window.gsap) && Observer_gsap.registerPlugin && Observer_gsap;
  },
      _startup = 1,
      _observers = [],
      _scrollers = [],
      _proxies = [],
      _getTime = Date.now,
      _bridge = function _bridge(name, value) {
    return value;
  },
      _integrate = function _integrate() {
    var core = ScrollTrigger.core,
        data = core.bridge || {},
        scrollers = core._scrollers,
        proxies = core._proxies;
    scrollers.push.apply(scrollers, _scrollers);
    proxies.push.apply(proxies, _proxies);
    _scrollers = scrollers;
    _proxies = proxies;
  
    _bridge = function _bridge(name, value) {
      return data[name](value);
    };
  },
      _getProxyProp = function _getProxyProp(element, property) {
    return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];
  },
      _isViewport = function _isViewport(el) {
    return !!~_root.indexOf(el);
  },
      _addListener = function _addListener(element, type, func, nonPassive, capture) {
    return element.addEventListener(type, func, {
      passive: !nonPassive,
      capture: !!capture
    });
  },
      _removeListener = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
      _scrollLeft = "scrollLeft",
      _scrollTop = "scrollTop",
      _onScroll = function _onScroll() {
    return _normalizer && _normalizer.isPressed || _scrollers.cache++;
  },
      _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {
    var cachingFunc = function cachingFunc(value) {
      // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
      if (value || value === 0) {
        _startup && (Observer_win.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.
  
        var isNormalizing = _normalizer && _normalizer.isPressed;
        value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!
  
        f(value);
        cachingFunc.cacheID = _scrollers.cache;
        isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
      } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
        cachingFunc.cacheID = _scrollers.cache;
        cachingFunc.v = f();
      }
  
      return cachingFunc.v + cachingFunc.offset;
    };
  
    cachingFunc.offset = 0;
    return f && cachingFunc;
  },
      _horizontal = {
    s: _scrollLeft,
    p: "left",
    p2: "Left",
    os: "right",
    os2: "Right",
    d: "width",
    d2: "Width",
    a: "x",
    sc: _scrollCacheFunc(function (value) {
      return arguments.length ? Observer_win.scrollTo(value, _vertical.sc()) : Observer_win.pageXOffset || Observer_doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;
    })
  },
      _vertical = {
    s: _scrollTop,
    p: "top",
    p2: "Top",
    os: "bottom",
    os2: "Bottom",
    d: "height",
    d2: "Height",
    a: "y",
    op: _horizontal,
    sc: _scrollCacheFunc(function (value) {
      return arguments.length ? Observer_win.scrollTo(_horizontal.sc(), value) : Observer_win.pageYOffset || Observer_doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;
    })
  },
      _getTarget = function _getTarget(t, self) {
    return (self && self._ctx && self._ctx.selector || Observer_gsap.utils.toArray)(t)[0] || (typeof t === "string" && Observer_gsap.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null);
  },
      _getScrollFunc = function _getScrollFunc(element, _ref) {
    var s = _ref.s,
        sc = _ref.sc;
    // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
    _isViewport(element) && (element = Observer_doc.scrollingElement || _docEl);
  
    var i = _scrollers.indexOf(element),
        offset = sc === _vertical.sc ? 1 : 2;
  
    !~i && (i = _scrollers.push(element) - 1);
    _scrollers[i + offset] || _addListener(element, "scroll", _onScroll); // clear the cache when a scroll occurs
  
    var prev = _scrollers[i + offset],
        func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function (value) {
      return arguments.length ? element[s] = value : element[s];
    })));
    func.target = element;
    prev || (func.smooth = Observer_gsap.getProperty(element, "scrollBehavior") === "smooth"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.
  
    return func;
  },
      _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {
    var v1 = value,
        v2 = value,
        t1 = _getTime(),
        t2 = t1,
        min = minTimeRefresh || 50,
        dropToZeroTime = Math.max(500, min * 3),
        update = function update(value, force) {
      var t = _getTime();
  
      if (force || t - t1 > min) {
        v2 = v1;
        v1 = value;
        t2 = t1;
        t1 = t;
      } else if (useDelta) {
        v1 += value;
      } else {
        // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
        v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
      }
    },
        reset = function reset() {
      v2 = v1 = useDelta ? 0 : v1;
      t2 = t1 = 0;
    },
        getVelocity = function getVelocity(latestValue) {
      var tOld = t2,
          vOld = v2,
          t = _getTime();
  
      (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
      return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
    };
  
    return {
      update: update,
      reset: reset,
      getVelocity: getVelocity
    };
  },
      _getEvent = function _getEvent(e, preventDefault) {
    preventDefault && !e._gsapAllow && e.preventDefault();
    return e.changedTouches ? e.changedTouches[0] : e;
  },
      _getAbsoluteMax = function _getAbsoluteMax(a) {
    var max = Math.max.apply(Math, a),
        min = Math.min.apply(Math, a);
    return Math.abs(max) >= Math.abs(min) ? max : min;
  },
      _setScrollTrigger = function _setScrollTrigger() {
    ScrollTrigger = Observer_gsap.core.globals().ScrollTrigger;
    ScrollTrigger && ScrollTrigger.core && _integrate();
  },
      Observer_initCore = function _initCore(core) {
    Observer_gsap = core || _getGSAP();
  
    if (Observer_gsap && typeof document !== "undefined" && document.body) {
      Observer_win = window;
      Observer_doc = document;
      _docEl = Observer_doc.documentElement;
      _body = Observer_doc.body;
      _root = [Observer_win, Observer_doc, _docEl, _body];
      Observer_clamp = Observer_gsap.utils.clamp;
  
      Observer_context = Observer_gsap.core.context || function () {};
  
      _pointerType = "onpointerenter" in _body ? "pointer" : "mouse"; // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
  
      _isTouch = Observer.isTouch = Observer_win.matchMedia && Observer_win.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : "ontouchstart" in Observer_win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;
      _eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
      setTimeout(function () {
        return _startup = 0;
      }, 500);
  
      _setScrollTrigger();
  
      Observer_coreInitted = 1;
    }
  
    return Observer_coreInitted;
  };
  
  _horizontal.op = _vertical;
  _scrollers.cache = 0;
  var Observer = /*#__PURE__*/function () {
    function Observer(vars) {
      this.init(vars);
    }
  
    var _proto = Observer.prototype;
  
    _proto.init = function init(vars) {
      Observer_coreInitted || Observer_initCore(Observer_gsap) || console.warn("Please gsap.registerPlugin(Observer)");
      ScrollTrigger || _setScrollTrigger();
      var tolerance = vars.tolerance,
          dragMinimum = vars.dragMinimum,
          type = vars.type,
          target = vars.target,
          lineHeight = vars.lineHeight,
          debounce = vars.debounce,
          preventDefault = vars.preventDefault,
          onStop = vars.onStop,
          onStopDelay = vars.onStopDelay,
          ignore = vars.ignore,
          wheelSpeed = vars.wheelSpeed,
          event = vars.event,
          onDragStart = vars.onDragStart,
          onDragEnd = vars.onDragEnd,
          onDrag = vars.onDrag,
          onPress = vars.onPress,
          onRelease = vars.onRelease,
          onRight = vars.onRight,
          onLeft = vars.onLeft,
          onUp = vars.onUp,
          onDown = vars.onDown,
          onChangeX = vars.onChangeX,
          onChangeY = vars.onChangeY,
          onChange = vars.onChange,
          onToggleX = vars.onToggleX,
          onToggleY = vars.onToggleY,
          onHover = vars.onHover,
          onHoverEnd = vars.onHoverEnd,
          onMove = vars.onMove,
          ignoreCheck = vars.ignoreCheck,
          isNormalizer = vars.isNormalizer,
          onGestureStart = vars.onGestureStart,
          onGestureEnd = vars.onGestureEnd,
          onWheel = vars.onWheel,
          onEnable = vars.onEnable,
          onDisable = vars.onDisable,
          onClick = vars.onClick,
          scrollSpeed = vars.scrollSpeed,
          capture = vars.capture,
          allowClicks = vars.allowClicks,
          lockAxis = vars.lockAxis,
          onLockAxis = vars.onLockAxis;
      this.target = target = _getTarget(target) || _docEl;
      this.vars = vars;
      ignore && (ignore = Observer_gsap.utils.toArray(ignore));
      tolerance = tolerance || 1e-9;
      dragMinimum = dragMinimum || 0;
      wheelSpeed = wheelSpeed || 1;
      scrollSpeed = scrollSpeed || 1;
      type = type || "wheel,touch,pointer";
      debounce = debounce !== false;
      lineHeight || (lineHeight = parseFloat(Observer_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report "normal", so default to 22.
  
      var id,
          onStopDelayedCall,
          dragged,
          moved,
          wheeled,
          locked,
          axis,
          self = this,
          prevDeltaX = 0,
          prevDeltaY = 0,
          scrollFuncX = _getScrollFunc(target, _horizontal),
          scrollFuncY = _getScrollFunc(target, _vertical),
          scrollX = scrollFuncX(),
          scrollY = scrollFuncY(),
          limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown",
          // for devices that accommodate mouse events and touch events, we need to distinguish.
      isViewport = _isViewport(target),
          ownerDoc = target.ownerDocument || Observer_doc,
          deltaX = [0, 0, 0],
          // wheel, scroll, pointer/touch
      deltaY = [0, 0, 0],
          onClickTime = 0,
          clickCapture = function clickCapture() {
        return onClickTime = _getTime();
      },
          _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {
        return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== "touch" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);
      },
          onStopFunc = function onStopFunc() {
        self._vx.reset();
  
        self._vy.reset();
  
        onStopDelayedCall.pause();
        onStop && onStop(self);
      },
          update = function update() {
        var dx = self.deltaX = _getAbsoluteMax(deltaX),
            dy = self.deltaY = _getAbsoluteMax(deltaY),
            changedX = Math.abs(dx) >= tolerance,
            changedY = Math.abs(dy) >= tolerance;
  
        onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.
  
        if (changedX) {
          onRight && self.deltaX > 0 && onRight(self);
          onLeft && self.deltaX < 0 && onLeft(self);
          onChangeX && onChangeX(self);
          onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);
          prevDeltaX = self.deltaX;
          deltaX[0] = deltaX[1] = deltaX[2] = 0;
        }
  
        if (changedY) {
          onDown && self.deltaY > 0 && onDown(self);
          onUp && self.deltaY < 0 && onUp(self);
          onChangeY && onChangeY(self);
          onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);
          prevDeltaY = self.deltaY;
          deltaY[0] = deltaY[1] = deltaY[2] = 0;
        }
  
        if (moved || dragged) {
          onMove && onMove(self);
  
          if (dragged) {
            onDrag(self);
            dragged = false;
          }
  
          moved = false;
        }
  
        locked && !(locked = false) && onLockAxis && onLockAxis(self);
  
        if (wheeled) {
          onWheel(self);
          wheeled = false;
        }
  
        id = 0;
      },
          onDelta = function onDelta(x, y, index) {
        deltaX[index] += x;
        deltaY[index] += y;
  
        self._vx.update(x);
  
        self._vy.update(y);
  
        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
          onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {
        if (lockAxis && !axis) {
          self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
          locked = true;
        }
  
        if (axis !== "y") {
          deltaX[2] += x;
  
          self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.
  
        }
  
        if (axis !== "x") {
          deltaY[2] += y;
  
          self._vy.update(y, true);
        }
  
        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
          _onDrag = function _onDrag(e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }
  
        e = _getEvent(e, preventDefault);
        var x = e.clientX,
            y = e.clientY,
            dx = x - self.x,
            dy = y - self.y,
            isDragging = self.isDragging;
        self.x = x;
        self.y = y;
  
        if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {
          onDrag && (dragged = true);
          isDragging || (self.isDragging = true);
          onTouchOrPointerDelta(dx, dy);
          isDragging || onDragStart && onDragStart(self);
        }
      },
          _onPress = self.onPress = function (e) {
        if (_ignoreCheck(e, 1) || e && e.button) {
          return;
        }
  
        self.axis = axis = null;
        onStopDelayedCall.pause();
        self.isPressed = true;
        e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.
  
        prevDeltaX = prevDeltaY = 0;
        self.startX = self.x = e.clientX;
        self.startY = self.y = e.clientY;
  
        self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.
  
  
        self._vy.reset();
  
        _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, preventDefault, true);
  
        self.deltaX = self.deltaY = 0;
        onPress && onPress(self);
      },
          _onRelease = self.onRelease = function (e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }
  
        _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
  
        var isTrackingDrag = !isNaN(self.y - self.startY),
            wasDragging = self.isDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),
            // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
        eventData = _getEvent(e);
  
        if (!wasDragging && isTrackingDrag) {
          self._vx.reset();
  
          self._vy.reset();
  
          if (preventDefault && allowClicks) {
            Observer_gsap.delayedCall(0.08, function () {
              // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
              if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {
                if (e.target.click) {
                  //some browsers (like mobile Safari) don't properly trigger the click event
                  e.target.click();
                } else if (ownerDoc.createEvent) {
                  var syntheticEvent = ownerDoc.createEvent("MouseEvents");
                  syntheticEvent.initMouseEvent("click", true, true, Observer_win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
                  e.target.dispatchEvent(syntheticEvent);
                }
              }
            });
          }
        }
  
        self.isDragging = self.isGesturing = self.isPressed = false;
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
        onDragEnd && wasDragging && onDragEnd(self);
        onRelease && onRelease(self, wasDragging);
      },
          _onGestureStart = function _onGestureStart(e) {
        return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);
      },
          _onGestureEnd = function _onGestureEnd() {
        return (self.isGesturing = false) || onGestureEnd(self);
      },
          onScroll = function onScroll(e) {
        if (_ignoreCheck(e)) {
          return;
        }
  
        var x = scrollFuncX(),
            y = scrollFuncY();
        onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
        scrollX = x;
        scrollY = y;
        onStop && onStopDelayedCall.restart(true);
      },
          _onWheel = function _onWheel(e) {
        if (_ignoreCheck(e)) {
          return;
        }
  
        e = _getEvent(e, preventDefault);
        onWheel && (wheeled = true);
        var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? Observer_win.innerHeight : 1) * wheelSpeed;
        onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
      },
          _onMove = function _onMove(e) {
        if (_ignoreCheck(e)) {
          return;
        }
  
        var x = e.clientX,
            y = e.clientY,
            dx = x - self.x,
            dy = y - self.y;
        self.x = x;
        self.y = y;
        moved = true;
        (dx || dy) && onTouchOrPointerDelta(dx, dy);
      },
          _onHover = function _onHover(e) {
        self.event = e;
        onHover(self);
      },
          _onHoverEnd = function _onHoverEnd(e) {
        self.event = e;
        onHoverEnd(self);
      },
          _onClick = function _onClick(e) {
        return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);
      };
  
      onStopDelayedCall = self._dc = Observer_gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
      self.deltaX = self.deltaY = 0;
      self._vx = _getVelocityProp(0, 50, true);
      self._vy = _getVelocityProp(0, 50, true);
      self.scrollX = scrollFuncX;
      self.scrollY = scrollFuncY;
      self.isDragging = self.isGesturing = self.isPressed = false;
  
      Observer_context(this);
  
      self.enable = function (e) {
        if (!self.isEnabled) {
          _addListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
  
          type.indexOf("scroll") >= 0 && _addListener(isViewport ? ownerDoc : target, "scroll", onScroll, preventDefault, capture);
          type.indexOf("wheel") >= 0 && _addListener(target, "wheel", _onWheel, preventDefault, capture);
  
          if (type.indexOf("touch") >= 0 && _isTouch || type.indexOf("pointer") >= 0) {
            _addListener(target, _eventTypes[0], _onPress, preventDefault, capture);
  
            _addListener(ownerDoc, _eventTypes[2], _onRelease);
  
            _addListener(ownerDoc, _eventTypes[3], _onRelease);
  
            allowClicks && _addListener(target, "click", clickCapture, false, true);
            onClick && _addListener(target, "click", _onClick);
            onGestureStart && _addListener(ownerDoc, "gesturestart", _onGestureStart);
            onGestureEnd && _addListener(ownerDoc, "gestureend", _onGestureEnd);
            onHover && _addListener(target, _pointerType + "enter", _onHover);
            onHoverEnd && _addListener(target, _pointerType + "leave", _onHoverEnd);
            onMove && _addListener(target, _pointerType + "move", _onMove);
          }
  
          self.isEnabled = true;
          e && e.type && _onPress(e);
          onEnable && onEnable(self);
        }
  
        return self;
      };
  
      self.disable = function () {
        if (self.isEnabled) {
          // only remove the _onScroll listener if there aren't any others that rely on the functionality.
          _observers.filter(function (o) {
            return o !== self && _isViewport(o.target);
          }).length || _removeListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
  
          if (self.isPressed) {
            self._vx.reset();
  
            self._vy.reset();
  
            _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
          }
  
          _removeListener(isViewport ? ownerDoc : target, "scroll", onScroll, capture);
  
          _removeListener(target, "wheel", _onWheel, capture);
  
          _removeListener(target, _eventTypes[0], _onPress, capture);
  
          _removeListener(ownerDoc, _eventTypes[2], _onRelease);
  
          _removeListener(ownerDoc, _eventTypes[3], _onRelease);
  
          _removeListener(target, "click", clickCapture, true);
  
          _removeListener(target, "click", _onClick);
  
          _removeListener(ownerDoc, "gesturestart", _onGestureStart);
  
          _removeListener(ownerDoc, "gestureend", _onGestureEnd);
  
          _removeListener(target, _pointerType + "enter", _onHover);
  
          _removeListener(target, _pointerType + "leave", _onHoverEnd);
  
          _removeListener(target, _pointerType + "move", _onMove);
  
          self.isEnabled = self.isPressed = self.isDragging = false;
          onDisable && onDisable(self);
        }
      };
  
      self.kill = self.revert = function () {
        self.disable();
  
        var i = _observers.indexOf(self);
  
        i >= 0 && _observers.splice(i, 1);
        _normalizer === self && (_normalizer = 0);
      };
  
      _observers.push(self);
  
      isNormalizer && _isViewport(target) && (_normalizer = self);
      self.enable(event);
    };
  
    Observer_createClass(Observer, [{
      key: "velocityX",
      get: function get() {
        return this._vx.getVelocity();
      }
    }, {
      key: "velocityY",
      get: function get() {
        return this._vy.getVelocity();
      }
    }]);
  
    return Observer;
  }();
  Observer.version = "3.12.2";
  
  Observer.create = function (vars) {
    return new Observer(vars);
  };
  
  Observer.register = Observer_initCore;
  
  Observer.getAll = function () {
    return _observers.slice();
  };
  
  Observer.getById = function (id) {
    return _observers.filter(function (o) {
      return o.vars.id === id;
    })[0];
  };
  
  _getGSAP() && Observer_gsap.registerPlugin(Observer);
  
  ;// CONCATENATED MODULE: ./node_modules/gsap/ScrollTrigger.js
  /*!
   * ScrollTrigger 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  
  /* eslint-disable */
  
  
  var ScrollTrigger_gsap,
      ScrollTrigger_coreInitted,
      ScrollTrigger_win,
      ScrollTrigger_doc,
      ScrollTrigger_docEl,
      ScrollTrigger_body,
      ScrollTrigger_root,
      _resizeDelay,
      _toArray,
      ScrollTrigger_clamp,
      _time2,
      _syncInterval,
      _refreshing,
      _pointerIsDown,
      ScrollTrigger_transformProp,
      _i,
      _prevWidth,
      _prevHeight,
      _autoRefresh,
      _sort,
      ScrollTrigger_suppressOverwrites,
      _ignoreResize,
      ScrollTrigger_normalizer,
      _ignoreMobileResize,
      _baseScreenHeight,
      _baseScreenWidth,
      _fixIOSBug,
      ScrollTrigger_context,
      _scrollRestoration,
      _div100vh,
      _100vh,
      _limitCallbacks,
      // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
  ScrollTrigger_startup = 1,
      ScrollTrigger_getTime = Date.now,
      _time1 = ScrollTrigger_getTime(),
      _lastScrollTime = 0,
      _enabled = 0,
      _parseClamp = function _parseClamp(value, type, self) {
    var clamp = ScrollTrigger_isString(value) && (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1);
    self["_" + type + "Clamp"] = clamp;
    return clamp ? value.substr(6, value.length - 7) : value;
  },
      _keepClamp = function _keepClamp(value, clamp) {
    return clamp && (!ScrollTrigger_isString(value) || value.substr(0, 6) !== "clamp(") ? "clamp(" + value + ")" : value;
  },
      _rafBugFix = function _rafBugFix() {
    return _enabled && requestAnimationFrame(_rafBugFix);
  },
      // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.
  _pointerDownHandler = function _pointerDownHandler() {
    return _pointerIsDown = 1;
  },
      _pointerUpHandler = function _pointerUpHandler() {
    return _pointerIsDown = 0;
  },
      ScrollTrigger_passThrough = function _passThrough(v) {
    return v;
  },
      ScrollTrigger_round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
      ScrollTrigger_windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      ScrollTrigger_getGSAP = function _getGSAP() {
    return ScrollTrigger_gsap || ScrollTrigger_windowExists() && (ScrollTrigger_gsap = window.gsap) && ScrollTrigger_gsap.registerPlugin && ScrollTrigger_gsap;
  },
      ScrollTrigger_isViewport = function _isViewport(e) {
    return !!~ScrollTrigger_root.indexOf(e);
  },
      _getViewportDimension = function _getViewportDimension(dimensionProperty) {
    return (dimensionProperty === "Height" ? _100vh : ScrollTrigger_win["inner" + dimensionProperty]) || ScrollTrigger_docEl["client" + dimensionProperty] || ScrollTrigger_body["client" + dimensionProperty];
  },
      _getBoundsFunc = function _getBoundsFunc(element) {
    return _getProxyProp(element, "getBoundingClientRect") || (ScrollTrigger_isViewport(element) ? function () {
      _winOffsets.width = ScrollTrigger_win.innerWidth;
      _winOffsets.height = _100vh;
      return _winOffsets;
    } : function () {
      return _getBounds(element);
    });
  },
      _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {
    var d = _ref.d,
        d2 = _ref.d2,
        a = _ref.a;
    return (a = _getProxyProp(scroller, "getBoundingClientRect")) ? function () {
      return a()[d];
    } : function () {
      return (isViewport ? _getViewportDimension(d2) : scroller["client" + d2]) || 0;
    };
  },
      _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {
    return !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : function () {
      return _winOffsets;
    };
  },
      _maxScroll = function _maxScroll(element, _ref2) {
    var s = _ref2.s,
        d2 = _ref2.d2,
        d = _ref2.d,
        a = _ref2.a;
    return Math.max(0, (s = "scroll" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : ScrollTrigger_isViewport(element) ? (ScrollTrigger_docEl[s] || ScrollTrigger_body[s]) - _getViewportDimension(d2) : element[s] - element["offset" + d2]);
  },
      _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {
    for (var i = 0; i < _autoRefresh.length; i += 3) {
      (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);
    }
  },
      ScrollTrigger_isString = function _isString(value) {
    return typeof value === "string";
  },
      ScrollTrigger_isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      ScrollTrigger_isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
      ScrollTrigger_isObject = function _isObject(value) {
    return typeof value === "object";
  },
      _endAnimation = function _endAnimation(animation, reversed, pause) {
    return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();
  },
      ScrollTrigger_callback = function _callback(self, func) {
    if (self.enabled) {
      var result = func(self);
      result && result.totalTime && (self.callbackAnimation = result);
    }
  },
      _abs = Math.abs,
      _left = "left",
      _top = "top",
      _right = "right",
      _bottom = "bottom",
      _width = "width",
      _height = "height",
      _Right = "Right",
      _Left = "Left",
      _Top = "Top",
      _Bottom = "Bottom",
      _padding = "padding",
      _margin = "margin",
      _Width = "Width",
      _Height = "Height",
      _px = "px",
      _getComputedStyle = function _getComputedStyle(element) {
    return ScrollTrigger_win.getComputedStyle(element);
  },
      _makePositionable = function _makePositionable(element) {
    // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
    var position = _getComputedStyle(element).position;
  
    element.style.position = position === "absolute" || position === "fixed" ? position : "relative";
  },
      ScrollTrigger_setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }
  
    return obj;
  },
      _getBounds = function _getBounds(element, withoutTransforms) {
    var tween = withoutTransforms && _getComputedStyle(element)[ScrollTrigger_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && ScrollTrigger_gsap.to(element, {
      x: 0,
      y: 0,
      xPercent: 0,
      yPercent: 0,
      rotation: 0,
      rotationX: 0,
      rotationY: 0,
      scale: 1,
      skewX: 0,
      skewY: 0
    }).progress(1),
        bounds = element.getBoundingClientRect();
    tween && tween.progress(0).kill();
    return bounds;
  },
      _getSize = function _getSize(element, _ref3) {
    var d2 = _ref3.d2;
    return element["offset" + d2] || element["client" + d2] || 0;
  },
      _getLabelRatioArray = function _getLabelRatioArray(timeline) {
    var a = [],
        labels = timeline.labels,
        duration = timeline.duration(),
        p;
  
    for (p in labels) {
      a.push(labels[p] / duration);
    }
  
    return a;
  },
      _getClosestLabel = function _getClosestLabel(animation) {
    return function (value) {
      return ScrollTrigger_gsap.utils.snap(_getLabelRatioArray(animation), value);
    };
  },
      _snapDirectional = function _snapDirectional(snapIncrementOrArray) {
    var snap = ScrollTrigger_gsap.utils.snap(snapIncrementOrArray),
        a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {
      return a - b;
    });
    return a ? function (value, direction, threshold) {
      if (threshold === void 0) {
        threshold = 1e-3;
      }
  
      var i;
  
      if (!direction) {
        return snap(value);
      }
  
      if (direction > 0) {
        value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.
  
        for (i = 0; i < a.length; i++) {
          if (a[i] >= value) {
            return a[i];
          }
        }
  
        return a[i - 1];
      } else {
        i = a.length;
        value += threshold;
  
        while (i--) {
          if (a[i] <= value) {
            return a[i];
          }
        }
      }
  
      return a[0];
    } : function (value, direction, threshold) {
      if (threshold === void 0) {
        threshold = 1e-3;
      }
  
      var snapped = snap(value);
      return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
    };
  },
      _getLabelAtDirection = function _getLabelAtDirection(timeline) {
    return function (value, st) {
      return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);
    };
  },
      _multiListener = function _multiListener(func, element, types, callback) {
    return types.split(",").forEach(function (type) {
      return func(element, type, callback);
    });
  },
      ScrollTrigger_addListener = function _addListener(element, type, func, nonPassive, capture) {
    return element.addEventListener(type, func, {
      passive: !nonPassive,
      capture: !!capture
    });
  },
      ScrollTrigger_removeListener = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
      _wheelListener = function _wheelListener(func, el, scrollFunc) {
    scrollFunc = scrollFunc && scrollFunc.wheelHandler;
  
    if (scrollFunc) {
      func(el, "wheel", scrollFunc);
      func(el, "touchmove", scrollFunc);
    }
  },
      _markerDefaults = {
    startColor: "green",
    endColor: "red",
    indent: 0,
    fontSize: "16px",
    fontWeight: "normal"
  },
      ScrollTrigger_defaults = {
    toggleActions: "play",
    anticipatePin: 0
  },
      _keywords = {
    top: 0,
    left: 0,
    center: 0.5,
    bottom: 1,
    right: 1
  },
      _offsetToPx = function _offsetToPx(value, size) {
    if (ScrollTrigger_isString(value)) {
      var eqIndex = value.indexOf("="),
          relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;
  
      if (~eqIndex) {
        value.indexOf("%") > eqIndex && (relative *= size / 100);
        value = value.substr(0, eqIndex - 1);
      }
  
      value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
    }
  
    return value;
  },
      _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {
    var startColor = _ref4.startColor,
        endColor = _ref4.endColor,
        fontSize = _ref4.fontSize,
        indent = _ref4.indent,
        fontWeight = _ref4.fontWeight;
  
    var e = ScrollTrigger_doc.createElement("div"),
        useFixedPosition = ScrollTrigger_isViewport(container) || _getProxyProp(container, "pinType") === "fixed",
        isScroller = type.indexOf("scroller") !== -1,
        parent = useFixedPosition ? ScrollTrigger_body : container,
        isStart = type.indexOf("start") !== -1,
        color = isStart ? startColor : endColor,
        css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";
  
    css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
    (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
    matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
    e._isStart = isStart;
    e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
    e.style.cssText = css;
    e.innerText = name || name === 0 ? type + "-" + name : type;
    parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
    e._offset = e["offset" + direction.op.d2];
  
    _positionMarker(e, 0, direction, isStart);
  
    return e;
  },
      _positionMarker = function _positionMarker(marker, start, direction, flipped) {
    var vars = {
      display: "block"
    },
        side = direction[flipped ? "os2" : "p2"],
        oppositeSide = direction[flipped ? "p2" : "os2"];
    marker._isFlipped = flipped;
    vars[direction.a + "Percent"] = flipped ? -100 : 0;
    vars[direction.a] = flipped ? "1px" : 0;
    vars["border" + side + _Width] = 1;
    vars["border" + oppositeSide + _Width] = 0;
    vars[direction.p] = start + "px";
    ScrollTrigger_gsap.set(marker, vars);
  },
      _triggers = [],
      _ids = {},
      _rafID,
      _sync = function _sync() {
    return ScrollTrigger_getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));
  },
      ScrollTrigger_onScroll = function _onScroll() {
    // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
    if (!ScrollTrigger_normalizer || !ScrollTrigger_normalizer.isPressed || ScrollTrigger_normalizer.startX > ScrollTrigger_body.clientWidth) {
      // if the user is dragging the scrollbar, allow it.
      _scrollers.cache++;
  
      if (ScrollTrigger_normalizer) {
        _rafID || (_rafID = requestAnimationFrame(_updateAll));
      } else {
        _updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110
  
      }
  
      _lastScrollTime || ScrollTrigger_dispatch("scrollStart");
      _lastScrollTime = ScrollTrigger_getTime();
    }
  },
      _setBaseDimensions = function _setBaseDimensions() {
    _baseScreenWidth = ScrollTrigger_win.innerWidth;
    _baseScreenHeight = ScrollTrigger_win.innerHeight;
  },
      _onResize = function _onResize() {
    _scrollers.cache++;
    !_refreshing && !_ignoreResize && !ScrollTrigger_doc.fullscreenElement && !ScrollTrigger_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== ScrollTrigger_win.innerWidth || Math.abs(ScrollTrigger_win.innerHeight - _baseScreenHeight) > ScrollTrigger_win.innerHeight * 0.25) && _resizeDelay.restart(true);
  },
      // ignore resizes triggered by refresh()
  ScrollTrigger_listeners = {},
      ScrollTrigger_emptyArray = [],
      _softRefresh = function _softRefresh() {
    return ScrollTrigger_removeListener(ScrollTrigger_ScrollTrigger, "scrollEnd", _softRefresh) || _refreshAll(true);
  },
      ScrollTrigger_dispatch = function _dispatch(type) {
    return ScrollTrigger_listeners[type] && ScrollTrigger_listeners[type].map(function (f) {
      return f();
    }) || ScrollTrigger_emptyArray;
  },
      _savedStyles = [],
      // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
  _revertRecorded = function _revertRecorded(media) {
    for (var i = 0; i < _savedStyles.length; i += 5) {
      if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {
        _savedStyles[i].style.cssText = _savedStyles[i + 1];
        _savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i + 2] || "");
        _savedStyles[i + 3].uncache = 1;
      }
    }
  },
      _revertAll = function _revertAll(kill, media) {
    var trigger;
  
    for (_i = 0; _i < _triggers.length; _i++) {
      trigger = _triggers[_i];
  
      if (trigger && (!media || trigger._ctx === media)) {
        if (kill) {
          trigger.kill(1);
        } else {
          trigger.revert(true, true);
        }
      }
    }
  
    media && _revertRecorded(media);
    media || ScrollTrigger_dispatch("revert");
  },
      _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {
    // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
    _scrollers.cache++;
    (force || !_refreshingAll) && _scrollers.forEach(function (obj) {
      return ScrollTrigger_isFunction(obj) && obj.cacheID++ && (obj.rec = 0);
    });
    ScrollTrigger_isString(scrollRestoration) && (ScrollTrigger_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);
  },
      _refreshingAll,
      _refreshID = 0,
      _queueRefreshID,
      _queueRefreshAll = function _queueRefreshAll() {
    // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's "load" or "DOMContentLoaded" events to trigger it.
    if (_queueRefreshID !== _refreshID) {
      var id = _queueRefreshID = _refreshID;
      requestAnimationFrame(function () {
        return id === _refreshID && _refreshAll(true);
      });
    }
  },
      _refresh100vh = function _refresh100vh() {
    ScrollTrigger_body.appendChild(_div100vh);
  
    _100vh = _div100vh.offsetHeight || ScrollTrigger_win.innerHeight;
  
    ScrollTrigger_body.removeChild(_div100vh);
  },
      _refreshAll = function _refreshAll(force, skipRevert) {
    if (_lastScrollTime && !force) {
      ScrollTrigger_addListener(ScrollTrigger_ScrollTrigger, "scrollEnd", _softRefresh);
  
      return;
    }
  
    _refresh100vh();
  
    _refreshingAll = ScrollTrigger_ScrollTrigger.isRefreshing = true;
  
    _scrollers.forEach(function (obj) {
      return ScrollTrigger_isFunction(obj) && ++obj.cacheID && (obj.rec = obj());
    }); // force the clearing of the cache because some browsers take a little while to dispatch the "scroll" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away
  
  
    var refreshInits = ScrollTrigger_dispatch("refreshInit");
  
    _sort && ScrollTrigger_ScrollTrigger.sort();
    skipRevert || _revertAll();
  
    _scrollers.forEach(function (obj) {
      if (ScrollTrigger_isFunction(obj)) {
        obj.smooth && (obj.target.style.scrollBehavior = "auto"); // smooth scrolling interferes
  
        obj(0);
      }
    });
  
    _triggers.slice(0).forEach(function (t) {
      return t.refresh();
    }); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.
  
  
    _triggers.forEach(function (t, i) {
      // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
      if (t._subPinOffset && t.pin) {
        var prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
            original = t.pin[prop];
        t.revert(true, 1);
        t.adjustPinSpacing(t.pin[prop] - original);
        t.refresh();
      }
    });
  
    _triggers.forEach(function (t) {
      // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max". Same for anything with a clamped end
      var max = _maxScroll(t.scroller, t._dir);
  
      (t.vars.end === "max" || t._endClamp && t.end > max) && t.setPositions(t.start, Math.max(t.start + 1, max), true);
    });
  
    refreshInits.forEach(function (result) {
      return result && result.render && result.render(-1);
    }); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.
  
    _scrollers.forEach(function (obj) {
      if (ScrollTrigger_isFunction(obj)) {
        obj.smooth && requestAnimationFrame(function () {
          return obj.target.style.scrollBehavior = "smooth";
        });
        obj.rec && obj(obj.rec);
      }
    });
  
    _clearScrollMemory(_scrollRestoration, 1);
  
    _resizeDelay.pause();
  
    _refreshID++;
    _refreshingAll = 2;
  
    _updateAll(2);
  
    _triggers.forEach(function (t) {
      return ScrollTrigger_isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);
    });
  
    _refreshingAll = ScrollTrigger_ScrollTrigger.isRefreshing = false;
  
    ScrollTrigger_dispatch("refresh");
  },
      _lastScroll = 0,
      _direction = 1,
      _primary,
      _updateAll = function _updateAll(force) {
    if (!_refreshingAll || force === 2) {
      ScrollTrigger_ScrollTrigger.isUpdating = true;
      _primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.
  
      var l = _triggers.length,
          time = ScrollTrigger_getTime(),
          recordVelocity = time - _time1 >= 50,
          scroll = l && _triggers[0].scroll();
  
      _direction = _lastScroll > scroll ? -1 : 1;
      _refreshingAll || (_lastScroll = scroll);
  
      if (recordVelocity) {
        if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
          _lastScrollTime = 0;
  
          ScrollTrigger_dispatch("scrollEnd");
        }
  
        _time2 = _time1;
        _time1 = time;
      }
  
      if (_direction < 0) {
        _i = l;
  
        while (_i-- > 0) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }
  
        _direction = 1;
      } else {
        for (_i = 0; _i < l; _i++) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }
      }
  
      ScrollTrigger_ScrollTrigger.isUpdating = false;
    }
  
    _rafID = 0;
  },
      _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
      _stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
      _swapPinOut = function _swapPinOut(pin, spacer, state) {
    _setState(state);
  
    var cache = pin._gsap;
  
    if (cache.spacerIsNative) {
      _setState(cache.spacerState);
    } else if (pin._gsap.swappedIn) {
      var parent = spacer.parentNode;
  
      if (parent) {
        parent.insertBefore(pin, spacer);
        parent.removeChild(spacer);
      }
    }
  
    pin._gsap.swappedIn = false;
  },
      _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {
    if (!pin._gsap.swappedIn) {
      var i = _propNamesToCopy.length,
          spacerStyle = spacer.style,
          pinStyle = pin.style,
          p;
  
      while (i--) {
        p = _propNamesToCopy[i];
        spacerStyle[p] = cs[p];
      }
  
      spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
      cs.display === "inline" && (spacerStyle.display = "inline-block");
      pinStyle[_bottom] = pinStyle[_right] = "auto";
      spacerStyle.flexBasis = cs.flexBasis || "auto";
      spacerStyle.overflow = "visible";
      spacerStyle.boxSizing = "border-box";
      spacerStyle[_width] = _getSize(pin, _horizontal) + _px;
      spacerStyle[_height] = _getSize(pin, _vertical) + _px;
      spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";
  
      _setState(spacerState);
  
      pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
      pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
      pinStyle[_padding] = cs[_padding];
  
      if (pin.parentNode !== spacer) {
        pin.parentNode.insertBefore(spacer, pin);
        spacer.appendChild(pin);
      }
  
      pin._gsap.swappedIn = true;
    }
  },
      ScrollTrigger_capsExp = /([A-Z])/g,
      _setState = function _setState(state) {
    if (state) {
      var style = state.t.style,
          l = state.length,
          i = 0,
          p,
          value;
      (state.t._gsap || ScrollTrigger_gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off
  
      for (; i < l; i += 2) {
        value = state[i + 1];
        p = state[i];
  
        if (value) {
          style[p] = value;
        } else if (style[p]) {
          style.removeProperty(p.replace(ScrollTrigger_capsExp, "-$1").toLowerCase());
        }
      }
    }
  },
      _getState = function _getState(element) {
    // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
    var l = _stateProps.length,
        style = element.style,
        state = [],
        i = 0;
  
    for (; i < l; i++) {
      state.push(_stateProps[i], style[_stateProps[i]]);
    }
  
    state.t = element;
    return state;
  },
      _copyState = function _copyState(state, override, omitOffsets) {
    var result = [],
        l = state.length,
        i = omitOffsets ? 8 : 0,
        // skip top, left, right, bottom if omitOffsets is true
    p;
  
    for (; i < l; i += 2) {
      p = state[i];
      result.push(p, p in override ? override[p] : state[i + 1]);
    }
  
    result.t = state.t;
    return result;
  },
      _winOffsets = {
    left: 0,
    top: 0
  },
      // // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
  // _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
  // 	scroller = _getTarget(scroller || _win);
  // 	let direction = horizontal ? _horizontal : _vertical,
  // 		isViewport = _isViewport(scroller);
  // 	_getSizeFunc(scroller, isViewport, direction);
  // 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
  // },
  ScrollTrigger_parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) {
    ScrollTrigger_isFunction(value) && (value = value(self));
  
    if (ScrollTrigger_isString(value) && value.substr(0, 3) === "max") {
      value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
    }
  
    var time = containerAnimation ? containerAnimation.time() : 0,
        p1,
        p2,
        element;
    containerAnimation && containerAnimation.seek(0);
    isNaN(value) || (value = +value); // convert a string number like "45" to an actual number
  
    if (!ScrollTrigger_isNumber(value)) {
      ScrollTrigger_isFunction(trigger) && (trigger = trigger(self));
      var offsets = (value || "0").split(" "),
          bounds,
          localOffset,
          globalOffset,
          display;
      element = _getTarget(trigger, self) || ScrollTrigger_body;
      bounds = _getBounds(element) || {};
  
      if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === "none") {
        // if display is "none", it won't report getBoundingClientRect() properly
        display = element.style.display;
        element.style.display = "block";
        bounds = _getBounds(element);
        display ? element.style.display = display : element.style.removeProperty("display");
      }
  
      localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
      globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
      value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
      markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);
      scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
    } else {
      containerAnimation && (value = ScrollTrigger_gsap.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));
      markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);
    }
  
    if (clampZeroProp) {
      self[clampZeroProp] = value || -0.001;
      value < 0 && (value = 0);
    }
  
    if (marker) {
      var position = value + scrollerSize,
          isStart = marker._isStart;
      p1 = "scroll" + direction.d2;
  
      _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(ScrollTrigger_body[p1], ScrollTrigger_docEl[p1]) : marker.parentNode[p1]) <= position + 1);
  
      if (useFixedPosition) {
        scrollerBounds = _getBounds(markerScroller);
        useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);
      }
    }
  
    if (containerAnimation && element) {
      p1 = _getBounds(element);
      containerAnimation.seek(scrollerMax);
      p2 = _getBounds(element);
      containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
      value = value / containerAnimation._caScrollDist * scrollerMax;
    }
  
    containerAnimation && containerAnimation.seek(time);
    return containerAnimation ? value : Math.round(value);
  },
      _prefixExp = /(webkit|moz|length|cssText|inset)/i,
      _reparent = function _reparent(element, parent, top, left) {
    if (element.parentNode !== parent) {
      var style = element.style,
          p,
          cs;
  
      if (parent === ScrollTrigger_body) {
        element._stOrig = style.cssText; // record original inline styles so we can revert them later
  
        cs = _getComputedStyle(element);
  
        for (p in cs) {
          // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
          if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
            style[p] = cs[p];
          }
        }
  
        style.top = top;
        style.left = left;
      } else {
        style.cssText = element._stOrig;
      }
  
      ScrollTrigger_gsap.core.getCache(element).uncache = 1;
      parent.appendChild(element);
    }
  },
      _interruptionTracker = function _interruptionTracker(getValueFunc, initialValue, onInterrupt) {
    var last1 = initialValue,
        last2 = last1;
    return function (value) {
      var current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.
  
      if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) {
        // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
        value = current;
        onInterrupt && onInterrupt();
      }
  
      last2 = last1;
      last1 = value;
      return value;
    };
  },
      _shiftMarker = function _shiftMarker(marker, direction, value) {
    var vars = {};
    vars[direction.p] = "+=" + value;
    ScrollTrigger_gsap.set(marker, vars);
  },
      // _mergeAnimations = animations => {
  // 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
  // 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
  // 	tl.smoothChildTiming = false;
  // 	return tl;
  // },
  // returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
  _getTweenCreator = function _getTweenCreator(scroller, direction) {
    var getScroll = _getScrollFunc(scroller, direction),
        prop = "_scroll" + direction.p2,
        // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
    getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {
      var tween = getTween.tween,
          onComplete = vars.onComplete,
          modifiers = {};
      initialValue = initialValue || getScroll();
  
      var checkForInterruption = _interruptionTracker(getScroll, initialValue, function () {
        tween.kill();
        getTween.tween = 0;
      });
  
      change2 = change1 && change2 || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.
  
      change1 = change1 || scrollTo - initialValue;
      tween && tween.kill();
      vars[prop] = scrollTo;
      vars.modifiers = modifiers;
  
      modifiers[prop] = function () {
        return checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);
      };
  
      vars.onUpdate = function () {
        _scrollers.cache++;
  
        _updateAll();
      };
  
      vars.onComplete = function () {
        getTween.tween = 0;
        onComplete && onComplete.call(tween);
      };
  
      tween = getTween.tween = ScrollTrigger_gsap.to(scroller, vars);
      return tween;
    };
  
    scroller[prop] = getScroll;
  
    getScroll.wheelHandler = function () {
      return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
    };
  
    ScrollTrigger_addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.
  
  
    ScrollTrigger_ScrollTrigger.isTouch && ScrollTrigger_addListener(scroller, "touchmove", getScroll.wheelHandler);
    return getTween;
  };
  
  var ScrollTrigger_ScrollTrigger = /*#__PURE__*/function () {
    function ScrollTrigger(vars, animation) {
      ScrollTrigger_coreInitted || ScrollTrigger.register(ScrollTrigger_gsap) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");
  
      ScrollTrigger_context(this);
  
      this.init(vars, animation);
    }
  
    var _proto = ScrollTrigger.prototype;
  
    _proto.init = function init(vars, animation) {
      this.progress = this.start = 0;
      this.vars && this.kill(true, true); // in case it's being initted again
  
      if (!_enabled) {
        this.update = this.refresh = this.kill = ScrollTrigger_passThrough;
        return;
      }
  
      vars = ScrollTrigger_setDefaults(ScrollTrigger_isString(vars) || ScrollTrigger_isNumber(vars) || vars.nodeType ? {
        trigger: vars
      } : vars, ScrollTrigger_defaults);
  
      var _vars = vars,
          onUpdate = _vars.onUpdate,
          toggleClass = _vars.toggleClass,
          id = _vars.id,
          onToggle = _vars.onToggle,
          onRefresh = _vars.onRefresh,
          scrub = _vars.scrub,
          trigger = _vars.trigger,
          pin = _vars.pin,
          pinSpacing = _vars.pinSpacing,
          invalidateOnRefresh = _vars.invalidateOnRefresh,
          anticipatePin = _vars.anticipatePin,
          onScrubComplete = _vars.onScrubComplete,
          onSnapComplete = _vars.onSnapComplete,
          once = _vars.once,
          snap = _vars.snap,
          pinReparent = _vars.pinReparent,
          pinSpacer = _vars.pinSpacer,
          containerAnimation = _vars.containerAnimation,
          fastScrollEnd = _vars.fastScrollEnd,
          preventOverlaps = _vars.preventOverlaps,
          direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _horizontal : _vertical,
          isToggle = !scrub && scrub !== 0,
          scroller = _getTarget(vars.scroller || ScrollTrigger_win),
          scrollerCache = ScrollTrigger_gsap.core.getCache(scroller),
          isViewport = ScrollTrigger_isViewport(scroller),
          useFixedPosition = ("pinType" in vars ? vars.pinType : _getProxyProp(scroller, "pinType") || isViewport && "fixed") === "fixed",
          callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
          toggleActions = isToggle && vars.toggleActions.split(" "),
          markers = "markers" in vars ? vars.markers : ScrollTrigger_defaults.markers,
          borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
          self = this,
          onRefreshInit = vars.onRefreshInit && function () {
        return vars.onRefreshInit(self);
      },
          getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
          getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
          lastSnap = 0,
          lastRefresh = 0,
          prevProgress = 0,
          scrollFunc = _getScrollFunc(scroller, direction),
          tweenTo,
          pinCache,
          snapFunc,
          scroll1,
          scroll2,
          start,
          end,
          markerStart,
          markerEnd,
          markerStartTrigger,
          markerEndTrigger,
          markerVars,
          executingOnRefresh,
          change,
          pinOriginalState,
          pinActiveState,
          pinState,
          spacer,
          offset,
          pinGetter,
          pinSetter,
          pinStart,
          pinChange,
          spacingStart,
          spacerState,
          markerStartSetter,
          pinMoves,
          markerEndSetter,
          cs,
          snap1,
          snap2,
          scrubTween,
          scrubSmooth,
          snapDurClamp,
          snapDelayedCall,
          prevScroll,
          prevAnimProgress,
          caMarkerSetter,
          customRevertReturn; // for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start="clamp(top bottom)" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.
  
  
      self._startClamp = self._endClamp = false;
      self._dir = direction;
      anticipatePin *= 45;
      self.scroller = scroller;
      self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
      scroll1 = scrollFunc();
      self.vars = vars;
      animation = animation || vars.animation;
  
      if ("refreshPriority" in vars) {
        _sort = 1;
        vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
      }
  
      scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
        top: _getTweenCreator(scroller, _vertical),
        left: _getTweenCreator(scroller, _horizontal)
      };
      self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];
  
      self.scrubDuration = function (value) {
        scrubSmooth = ScrollTrigger_isNumber(value) && value;
  
        if (!scrubSmooth) {
          scrubTween && scrubTween.progress(1).kill();
          scrubTween = 0;
        } else {
          scrubTween ? scrubTween.duration(value) : scrubTween = ScrollTrigger_gsap.to(animation, {
            ease: "expo",
            totalProgress: "+=0",
            duration: scrubSmooth,
            paused: true,
            onComplete: function onComplete() {
              return onScrubComplete && onScrubComplete(self);
            }
          });
        }
      };
  
      if (animation) {
        animation.vars.lazy = false;
        animation._initted && !self.isReverted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://greensock.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010
  
        self.animation = animation.pause();
        animation.scrollTrigger = self;
        self.scrubDuration(scrub);
        snap1 = 0;
        id || (id = animation.vars.id);
      }
  
      if (snap) {
        // TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.
        if (!ScrollTrigger_isObject(snap) || snap.push) {
          snap = {
            snapTo: snap
          };
        }
  
        "scrollBehavior" in ScrollTrigger_body.style && ScrollTrigger_gsap.set(isViewport ? [ScrollTrigger_body, ScrollTrigger_docEl] : scroller, {
          scrollBehavior: "auto"
        }); // smooth scrolling doesn't work with snap.
  
        _scrollers.forEach(function (o) {
          return ScrollTrigger_isFunction(o) && o.target === (isViewport ? ScrollTrigger_doc.scrollingElement || ScrollTrigger_docEl : scroller) && (o.smooth = false);
        }); // note: set smooth to false on both the vertical and horizontal scroll getters/setters
  
  
        snapFunc = ScrollTrigger_isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {
          return _snapDirectional(snap.snapTo)(value, ScrollTrigger_getTime() - lastRefresh < 500 ? 0 : st.direction);
        } : ScrollTrigger_gsap.utils.snap(snap.snapTo);
        snapDurClamp = snap.duration || {
          min: 0.1,
          max: 2
        };
        snapDurClamp = ScrollTrigger_isObject(snapDurClamp) ? ScrollTrigger_clamp(snapDurClamp.min, snapDurClamp.max) : ScrollTrigger_clamp(snapDurClamp, snapDurClamp);
        snapDelayedCall = ScrollTrigger_gsap.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {
          var scroll = scrollFunc(),
              refreshedRecently = ScrollTrigger_getTime() - lastRefresh < 500,
              tween = tweenTo.tween;
  
          if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
            var progress = (scroll - start) / change,
                totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
                velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (ScrollTrigger_getTime() - _time2) * 1000 || 0,
                change1 = ScrollTrigger_gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
                naturalEnd = progress + (snap.inertia === false ? 0 : change1),
                endValue = ScrollTrigger_clamp(0, 1, snapFunc(naturalEnd, self)),
                endScroll = Math.round(start + endValue * change),
                _snap = snap,
                onStart = _snap.onStart,
                _onInterrupt = _snap.onInterrupt,
                _onComplete = _snap.onComplete;
  
            if (scroll <= end && scroll >= start && endScroll !== scroll) {
              if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {
                // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
                return;
              }
  
              if (snap.inertia === false) {
                change1 = endValue - progress;
              }
  
              tweenTo(endScroll, {
                duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),
                ease: snap.ease || "power3",
                data: _abs(endScroll - scroll),
                // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
                onInterrupt: function onInterrupt() {
                  return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);
                },
                onComplete: function onComplete() {
                  self.update();
                  lastSnap = scrollFunc();
                  snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
                  onSnapComplete && onSnapComplete(self);
                  _onComplete && _onComplete(self);
                }
              }, scroll, change1 * change, endScroll - scroll - change1 * change);
              onStart && onStart(self, tweenTo.tween);
            }
          } else if (self.isActive && lastSnap !== scroll) {
            snapDelayedCall.restart(true);
          }
        }).pause();
      }
  
      id && (_ids[id] = self);
      trigger = self.trigger = _getTarget(trigger || pin !== true && pin); // if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.
  
      customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
      customRevertReturn && (customRevertReturn = customRevertReturn(self));
      pin = pin === true ? trigger : _getTarget(pin);
      ScrollTrigger_isString(toggleClass) && (toggleClass = {
        targets: trigger,
        className: toggleClass
      });
  
      if (pin) {
        pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)
  
        self.pin = pin;
        pinCache = ScrollTrigger_gsap.core.getCache(pin);
  
        if (!pinCache.spacer) {
          // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
          if (pinSpacer) {
            pinSpacer = _getTarget(pinSpacer);
            pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular
  
            pinCache.spacerIsNative = !!pinSpacer;
            pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
          }
  
          pinCache.spacer = spacer = pinSpacer || ScrollTrigger_doc.createElement("div");
          spacer.classList.add("pin-spacer");
          id && spacer.classList.add("pin-spacer-" + id);
          pinCache.pinState = pinOriginalState = _getState(pin);
        } else {
          pinOriginalState = pinCache.pinState;
        }
  
        vars.force3D !== false && ScrollTrigger_gsap.set(pin, {
          force3D: true
        });
        self.spacer = spacer = pinCache.spacer;
        cs = _getComputedStyle(pin);
        spacingStart = cs[pinSpacing + direction.os2];
        pinGetter = ScrollTrigger_gsap.getProperty(pin);
        pinSetter = ScrollTrigger_gsap.quickSetter(pin, direction.a, _px); // pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).
  
        _swapPinIn(pin, spacer, cs);
  
        pinState = _getState(pin);
      }
  
      if (markers) {
        markerVars = ScrollTrigger_isObject(markers) ? ScrollTrigger_setDefaults(markers, _markerDefaults) : _markerDefaults;
        markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
        markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
        offset = markerStartTrigger["offset" + direction.op.d2];
  
        var content = _getTarget(_getProxyProp(scroller, "content") || scroller);
  
        markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
        markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
        containerAnimation && (caMarkerSetter = ScrollTrigger_gsap.quickSetter([markerStart, markerEnd], direction.a, _px));
  
        if (!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, "fixedMarkers") === true)) {
          _makePositionable(isViewport ? ScrollTrigger_body : scroller);
  
          ScrollTrigger_gsap.set([markerStartTrigger, markerEndTrigger], {
            force3D: true
          });
          markerStartSetter = ScrollTrigger_gsap.quickSetter(markerStartTrigger, direction.a, _px);
          markerEndSetter = ScrollTrigger_gsap.quickSetter(markerEndTrigger, direction.a, _px);
        }
      }
  
      if (containerAnimation) {
        var oldOnUpdate = containerAnimation.vars.onUpdate,
            oldParams = containerAnimation.vars.onUpdateParams;
        containerAnimation.eventCallback("onUpdate", function () {
          self.update(0, 0, 1);
          oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
        });
      }
  
      self.previous = function () {
        return _triggers[_triggers.indexOf(self) - 1];
      };
  
      self.next = function () {
        return _triggers[_triggers.indexOf(self) + 1];
      };
  
      self.revert = function (revert, temp) {
        if (!temp) {
          return self.kill(true);
        } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()
  
  
        var r = revert !== false || !self.enabled,
            prevRefreshing = _refreshing;
  
        if (r !== self.isReverted) {
          if (r) {
            prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.
  
            prevProgress = self.progress;
            prevAnimProgress = animation && animation.progress();
          }
  
          markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
            return m.style.display = r ? "none" : "block";
          });
  
          if (r) {
            _refreshing = self;
            self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out
          }
  
          if (pin && (!pinReparent || !self.isActive)) {
            if (r) {
              _swapPinOut(pin, spacer, pinOriginalState);
            } else {
              _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
            }
          }
  
          r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.
  
          _refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.
  
          self.isReverted = r;
        }
      };
  
      self.refresh = function (soft, force, position, pinOffset) {
        // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
        if ((_refreshing || !self.enabled) && !force) {
          return;
        }
  
        if (pin && soft && _lastScrollTime) {
          ScrollTrigger_addListener(ScrollTrigger, "scrollEnd", _softRefresh);
  
          return;
        }
  
        !_refreshingAll && onRefreshInit && onRefreshInit(self);
        _refreshing = self;
  
        if (tweenTo.tween && !position) {
          // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.
          tweenTo.tween.kill();
          tweenTo.tween = 0;
        }
  
        scrubTween && scrubTween.pause();
        invalidateOnRefresh && animation && animation.revert({
          kill: false
        }).invalidate();
        self.isReverted || self.revert(true, true);
        self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any
  
        var size = getScrollerSize(),
            scrollerBounds = getScrollerOffsets(),
            max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
            isFirstRefresh = change <= 0.01,
            offset = 0,
            otherPinOffset = pinOffset || 0,
            parsedEnd = ScrollTrigger_isObject(position) ? position.end : vars.end,
            parsedEndTrigger = vars.endTrigger || trigger,
            parsedStart = ScrollTrigger_isObject(position) ? position.start : vars.start || (vars.start === 0 || !trigger ? 0 : pin ? "0 0" : "0 100%"),
            pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer, self),
            triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,
            i = triggerIndex,
            cs,
            bounds,
            scroll,
            isVertical,
            override,
            curTrigger,
            curPin,
            oppositeScroll,
            initted,
            revertedPins,
            forcedOverflow,
            markerStartOffset,
            markerEndOffset;
  
        if (markers && ScrollTrigger_isObject(position)) {
          // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.
          markerStartOffset = ScrollTrigger_gsap.getProperty(markerStartTrigger, direction.p);
          markerEndOffset = ScrollTrigger_gsap.getProperty(markerEndTrigger, direction.p);
        }
  
        while (i--) {
          // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
          curTrigger = _triggers[i];
          curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.
  
          curPin = curTrigger.pin;
  
          if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {
            revertedPins || (revertedPins = []);
            revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly
  
            curTrigger.revert(true, true);
          }
  
          if (curTrigger !== _triggers[i]) {
            // in case it got removed.
            triggerIndex--;
            i--;
          }
        }
  
        ScrollTrigger_isFunction(parsedStart) && (parsedStart = parsedStart(self));
        parsedStart = _parseClamp(parsedStart, "start", self);
        start = ScrollTrigger_parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && "_startClamp") || (pin ? -0.001 : 0);
        ScrollTrigger_isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));
  
        if (ScrollTrigger_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
          if (~parsedEnd.indexOf(" ")) {
            parsedEnd = (ScrollTrigger_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
          } else {
            offset = _offsetToPx(parsedEnd.substr(2), size);
            parsedEnd = ScrollTrigger_isString(parsedStart) ? parsedStart : (containerAnimation ? ScrollTrigger_gsap.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.
  
            parsedEndTrigger = trigger;
          }
        }
  
        parsedEnd = _parseClamp(parsedEnd, "end", self);
        end = Math.max(start, ScrollTrigger_parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && "_endClamp")) || -0.001;
        offset = 0;
        i = triggerIndex;
  
        while (i--) {
          curTrigger = _triggers[i];
          curPin = curTrigger.pin;
  
          if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {
            cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);
  
            if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && isNaN(parsedStart)) {
              // numeric start values shouldn't be offset at all - treat them as absolute
              offset += cs * (1 - curTrigger.progress);
            }
  
            curPin === pin && (otherPinOffset += cs);
          }
        }
  
        start += offset;
        end += offset;
        self._startClamp && (self._startClamp += offset);
  
        if (self._endClamp && !_refreshingAll) {
          self._endClamp = end || -0.001;
          end = Math.min(end, _maxScroll(scroller, direction));
        }
  
        change = end - start || (start -= 0.01) && 0.001;
  
        if (isFirstRefresh) {
          // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.
          prevProgress = ScrollTrigger_gsap.utils.clamp(0, 1, ScrollTrigger_gsap.utils.normalize(start, end, prevScroll));
        }
  
        self._pinPush = otherPinOffset;
  
        if (markerStart && offset) {
          // offset the markers if necessary
          cs = {};
          cs[direction.a] = "+=" + offset;
          pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
          ScrollTrigger_gsap.set([markerStart, markerEnd], cs);
        }
  
        if (pin) {
          cs = _getComputedStyle(pin);
          isVertical = direction === _vertical;
          scroll = scrollFunc(); // recalculate because the triggers can affect the scroll
  
          pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;
  
          if (!max && end > 1) {
            // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://greensock.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/
            forcedOverflow = (isViewport ? ScrollTrigger_doc.scrollingElement || ScrollTrigger_docEl : scroller).style;
            forcedOverflow = {
              style: forcedOverflow,
              value: forcedOverflow["overflow" + direction.a.toUpperCase()]
            };
  
            if (isViewport && _getComputedStyle(ScrollTrigger_body)["overflow" + direction.a.toUpperCase()] !== "scroll") {
              // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to "scroll"
              forcedOverflow.style["overflow" + direction.a.toUpperCase()] = "scroll";
            }
          }
  
          _swapPinIn(pin, spacer, cs);
  
          pinState = _getState(pin); // transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.
  
          bounds = _getBounds(pin, true);
          oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();
  
          if (pinSpacing) {
            spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
            spacerState.t = spacer;
            i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;
            i && spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).
  
            _setState(spacerState);
  
            if (pinnedContainer) {
              // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.
              _triggers.forEach(function (t) {
                if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
                  t._subPinOffset = true;
                }
              });
            }
  
            useFixedPosition && scrollFunc(prevScroll);
          }
  
          if (useFixedPosition) {
            override = {
              top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,
              left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,
              boxSizing: "border-box",
              position: "fixed"
            };
            override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
            override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
            override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
            override[_padding] = cs[_padding];
            override[_padding + _Top] = cs[_padding + _Top];
            override[_padding + _Right] = cs[_padding + _Right];
            override[_padding + _Bottom] = cs[_padding + _Bottom];
            override[_padding + _Left] = cs[_padding + _Left];
            pinActiveState = _copyState(pinOriginalState, override, pinReparent);
            _refreshingAll && scrollFunc(0);
          }
  
          if (animation) {
            // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
            initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.
  
            ScrollTrigger_suppressOverwrites(1);
  
            animation.render(animation.duration(), true, true);
            pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
            pinMoves = Math.abs(change - pinChange) > 1;
            useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.
  
            animation.render(0, true, true);
            initted || animation.invalidate(true);
            animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.
  
            ScrollTrigger_suppressOverwrites(0);
          } else {
            pinChange = change;
          }
  
          forcedOverflow && (forcedOverflow.value ? forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value : forcedOverflow.style.removeProperty("overflow-" + direction.a));
        } else if (trigger && scrollFunc() && !containerAnimation) {
          // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
          bounds = trigger.parentNode;
  
          while (bounds && bounds !== ScrollTrigger_body) {
            if (bounds._pinOffset) {
              start -= bounds._pinOffset;
              end -= bounds._pinOffset;
            }
  
            bounds = bounds.parentNode;
          }
        }
  
        revertedPins && revertedPins.forEach(function (t) {
          return t.revert(false, true);
        });
        self.start = start;
        self.end = end;
        scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity
  
        if (!containerAnimation && !_refreshingAll) {
          scroll1 < prevScroll && scrollFunc(prevScroll);
          self.scroll.rec = 0;
        }
  
        self.revert(false, true);
        lastRefresh = ScrollTrigger_getTime();
  
        if (snapDelayedCall) {
          lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value
          // self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.
  
          snapDelayedCall.restart(true);
        }
  
        _refreshing = 0;
        animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().
  
        if (isFirstRefresh || prevProgress !== self.progress || containerAnimation) {
          // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
          animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? ScrollTrigger_gsap.utils.normalize(start, end, 0) : prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.
  
          self.progress = isFirstRefresh || (scroll1 - start) / change === prevProgress ? 0 : prevProgress;
        }
  
        pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
        scrubTween && scrubTween.invalidate();
  
        if (!isNaN(markerStartOffset)) {
          // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like "top", "center", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.
          markerStartOffset -= ScrollTrigger_gsap.getProperty(markerStartTrigger, direction.p);
          markerEndOffset -= ScrollTrigger_gsap.getProperty(markerEndTrigger, direction.p);
  
          _shiftMarker(markerStartTrigger, direction, markerStartOffset);
  
          _shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));
  
          _shiftMarker(markerEndTrigger, direction, markerEndOffset);
  
          _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
        }
  
        isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a "scroll" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.
  
        if (onRefresh && !_refreshingAll && !executingOnRefresh) {
          // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.
          executingOnRefresh = true;
          onRefresh(self);
          executingOnRefresh = false;
        }
      };
  
      self.getVelocity = function () {
        return (scrollFunc() - scroll2) / (ScrollTrigger_getTime() - _time2) * 1000 || 0;
      };
  
      self.endAnimation = function () {
        _endAnimation(self.callbackAnimation);
  
        if (animation) {
          scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);
        }
      };
  
      self.labelToScroll = function (label) {
        return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;
      };
  
      self.getTrailing = function (name) {
        var i = _triggers.indexOf(self),
            a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);
  
        return (ScrollTrigger_isString(name) ? a.filter(function (t) {
          return t.vars.preventOverlaps === name;
        }) : a).filter(function (t) {
          return self.direction > 0 ? t.end <= start : t.start >= end;
        });
      };
  
      self.update = function (reset, recordVelocity, forceFake) {
        if (containerAnimation && !forceFake && !reset) {
          return;
        }
  
        var scroll = _refreshingAll === true ? prevScroll : self.scroll(),
            p = reset ? 0 : (scroll - start) / change,
            clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
            prevProgress = self.progress,
            isActive,
            wasActive,
            toggleState,
            action,
            stateChanged,
            toggled,
            isAtMax,
            isTakingAction;
  
        if (recordVelocity) {
          scroll2 = scroll1;
          scroll1 = containerAnimation ? scrollFunc() : scroll;
  
          if (snap) {
            snap2 = snap1;
            snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
          }
        } // anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).
  
  
        anticipatePin && !clipped && pin && !_refreshing && !ScrollTrigger_startup && _lastScrollTime && start < scroll + (scroll - scroll2) / (ScrollTrigger_getTime() - _time2) * anticipatePin && (clipped = 0.0001);
  
        if (clipped !== prevProgress && self.enabled) {
          isActive = self.isActive = !!clipped && clipped < 1;
          wasActive = !!prevProgress && prevProgress < 1;
          toggled = isActive !== wasActive;
          stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)
  
          self.direction = clipped > prevProgress ? 1 : -1;
          self.progress = clipped;
  
          if (stateChanged && !_refreshing) {
            toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.
  
            if (isToggle) {
              action = !toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1] || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)
  
              isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
            }
          }
  
          preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (ScrollTrigger_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {
            return t.endAnimation();
          }));
  
          if (!isToggle) {
            if (scrubTween && !_refreshing && !ScrollTrigger_startup) {
              scrubTween._dp._time - scrubTween._start !== scrubTween._time && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.
  
              if (scrubTween.resetTo) {
                scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
              } else {
                // legacy support (courtesy), before 3.10.0
                scrubTween.vars.totalProgress = clipped;
                scrubTween.invalidate().restart();
              }
            } else if (animation) {
              animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));
            }
          }
  
          if (pin) {
            reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);
  
            if (!useFixedPosition) {
              pinSetter(ScrollTrigger_round(pinStart + pinChange * clipped));
            } else if (stateChanged) {
              isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)
  
              if (pinReparent) {
                if (!reset && (isActive || isAtMax)) {
                  var bounds = _getBounds(pin, true),
                      _offset = scroll - start;
  
                  _reparent(pin, ScrollTrigger_body, bounds.top + (direction === _vertical ? _offset : 0) + _px, bounds.left + (direction === _vertical ? 0 : _offset) + _px);
                } else {
                  _reparent(pin, spacer);
                }
              }
  
              _setState(isActive || isAtMax ? pinActiveState : pinState);
  
              pinMoves && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
            }
          }
  
          snap && !tweenTo.tween && !_refreshing && !ScrollTrigger_startup && snapDelayedCall.restart(true);
          toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {
            return el.classList[isActive || once ? "add" : "remove"](toggleClass.className);
          }); // classes could affect positioning, so do it even if reset or refreshing is true.
  
          onUpdate && !isToggle && !reset && onUpdate(self);
  
          if (stateChanged && !_refreshing) {
            if (isToggle) {
              if (isTakingAction) {
                if (action === "complete") {
                  animation.pause().totalProgress(1);
                } else if (action === "reset") {
                  animation.restart(true).pause();
                } else if (action === "restart") {
                  animation.restart(true);
                } else {
                  animation[action]();
                }
              }
  
              onUpdate && onUpdate(self);
            }
  
            if (toggled || !_limitCallbacks) {
              // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
              onToggle && toggled && ScrollTrigger_callback(self, onToggle);
              callbacks[toggleState] && ScrollTrigger_callback(self, callbacks[toggleState]);
              once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0); // a callback shouldn't be called again if once is true.
  
              if (!toggled) {
                // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
                toggleState = clipped === 1 ? 1 : 3;
                callbacks[toggleState] && ScrollTrigger_callback(self, callbacks[toggleState]);
              }
            }
  
            if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (ScrollTrigger_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
              _endAnimation(self.callbackAnimation);
  
              scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === "reverse" ? 1 : !clipped, 1);
            }
          } else if (isToggle && onUpdate && !_refreshing) {
            onUpdate(self);
          }
        } // update absolutely-positioned markers (only if the scroller isn't the viewport)
  
  
        if (markerEndSetter) {
          var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
          markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
          markerEndSetter(n);
        }
  
        caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
      };
  
      self.enable = function (reset, refresh) {
        if (!self.enabled) {
          self.enabled = true;
  
          ScrollTrigger_addListener(scroller, "resize", _onResize);
  
          isViewport || ScrollTrigger_addListener(scroller, "scroll", ScrollTrigger_onScroll);
          onRefreshInit && ScrollTrigger_addListener(ScrollTrigger, "refreshInit", onRefreshInit);
  
          if (reset !== false) {
            self.progress = prevProgress = 0;
            scroll1 = scroll2 = lastSnap = scrollFunc();
          }
  
          refresh !== false && self.refresh();
        }
      };
  
      self.getTween = function (snap) {
        return snap && tweenTo ? tweenTo.tween : scrubTween;
      };
  
      self.setPositions = function (newStart, newEnd, keepClamp, pinOffset) {
        // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
        if (containerAnimation) {
          // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.
          var st = containerAnimation.scrollTrigger,
              duration = containerAnimation.duration(),
              _change = st.end - st.start;
  
          newStart = st.start + _change * newStart / duration;
          newEnd = st.start + _change * newEnd / duration;
        }
  
        self.refresh(false, false, {
          start: _keepClamp(newStart, keepClamp && !!self._startClamp),
          end: _keepClamp(newEnd, keepClamp && !!self._endClamp)
        }, pinOffset);
        self.update();
      };
  
      self.adjustPinSpacing = function (amount) {
        if (spacerState && amount) {
          var i = spacerState.indexOf(direction.d) + 1;
          spacerState[i] = parseFloat(spacerState[i]) + amount + _px;
          spacerState[1] = parseFloat(spacerState[1]) + amount + _px;
  
          _setState(spacerState);
        }
      };
  
      self.disable = function (reset, allowAnimation) {
        if (self.enabled) {
          reset !== false && self.revert(true, true);
          self.enabled = self.isActive = false;
          allowAnimation || scrubTween && scrubTween.pause();
          prevScroll = 0;
          pinCache && (pinCache.uncache = 1);
          onRefreshInit && ScrollTrigger_removeListener(ScrollTrigger, "refreshInit", onRefreshInit);
  
          if (snapDelayedCall) {
            snapDelayedCall.pause();
            tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
          }
  
          if (!isViewport) {
            var i = _triggers.length;
  
            while (i--) {
              if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
                return; //don't remove the listeners if there are still other triggers referencing it.
              }
            }
  
            ScrollTrigger_removeListener(scroller, "resize", _onResize);
  
            isViewport || ScrollTrigger_removeListener(scroller, "scroll", ScrollTrigger_onScroll);
          }
        }
      };
  
      self.kill = function (revert, allowAnimation) {
        self.disable(revert, allowAnimation);
        scrubTween && !allowAnimation && scrubTween.kill();
        id && delete _ids[id];
  
        var i = _triggers.indexOf(self);
  
        i >= 0 && _triggers.splice(i, 1);
        i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
        // if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.
  
        i = 0;
  
        _triggers.forEach(function (t) {
          return t.scroller === self.scroller && (i = 1);
        });
  
        i || _refreshingAll || (self.scroll.rec = 0);
  
        if (animation) {
          animation.scrollTrigger = null;
          revert && animation.revert({
            kill: false
          });
          allowAnimation || animation.kill();
        }
  
        markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
          return m.parentNode && m.parentNode.removeChild(m);
        });
        _primary === self && (_primary = 0);
  
        if (pin) {
          pinCache && (pinCache.uncache = 1);
          i = 0;
  
          _triggers.forEach(function (t) {
            return t.pin === pin && i++;
          });
  
          i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
        }
  
        vars.onKill && vars.onKill(self);
      };
  
      _triggers.push(self);
  
      self.enable(false, false);
      customRevertReturn && customRevertReturn(self);
  
      if (animation && animation.add && !change) {
        // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
        var updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().
  
        self.update = function () {
          self.update = updateFunc;
          start || end || self.refresh();
        };
  
        ScrollTrigger_gsap.delayedCall(0.01, self.update);
        change = 0.01;
        start = end = 0;
      } else {
        self.refresh();
      }
  
      pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()
    };
  
    ScrollTrigger.register = function register(core) {
      if (!ScrollTrigger_coreInitted) {
        ScrollTrigger_gsap = core || ScrollTrigger_getGSAP();
        ScrollTrigger_windowExists() && window.document && ScrollTrigger.enable();
        ScrollTrigger_coreInitted = _enabled;
      }
  
      return ScrollTrigger_coreInitted;
    };
  
    ScrollTrigger.defaults = function defaults(config) {
      if (config) {
        for (var p in config) {
          ScrollTrigger_defaults[p] = config[p];
        }
      }
  
      return ScrollTrigger_defaults;
    };
  
    ScrollTrigger.disable = function disable(reset, kill) {
      _enabled = 0;
  
      _triggers.forEach(function (trigger) {
        return trigger[kill ? "kill" : "disable"](reset);
      });
  
      ScrollTrigger_removeListener(ScrollTrigger_win, "wheel", ScrollTrigger_onScroll);
  
      ScrollTrigger_removeListener(ScrollTrigger_doc, "scroll", ScrollTrigger_onScroll);
  
      clearInterval(_syncInterval);
  
      ScrollTrigger_removeListener(ScrollTrigger_doc, "touchcancel", ScrollTrigger_passThrough);
  
      ScrollTrigger_removeListener(ScrollTrigger_body, "touchstart", ScrollTrigger_passThrough);
  
      _multiListener(ScrollTrigger_removeListener, ScrollTrigger_doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
  
      _multiListener(ScrollTrigger_removeListener, ScrollTrigger_doc, "pointerup,touchend,mouseup", _pointerUpHandler);
  
      _resizeDelay.kill();
  
      _iterateAutoRefresh(ScrollTrigger_removeListener);
  
      for (var i = 0; i < _scrollers.length; i += 3) {
        _wheelListener(ScrollTrigger_removeListener, _scrollers[i], _scrollers[i + 1]);
  
        _wheelListener(ScrollTrigger_removeListener, _scrollers[i], _scrollers[i + 2]);
      }
    };
  
    ScrollTrigger.enable = function enable() {
      ScrollTrigger_win = window;
      ScrollTrigger_doc = document;
      ScrollTrigger_docEl = ScrollTrigger_doc.documentElement;
      ScrollTrigger_body = ScrollTrigger_doc.body;
  
      if (ScrollTrigger_gsap) {
        _toArray = ScrollTrigger_gsap.utils.toArray;
        ScrollTrigger_clamp = ScrollTrigger_gsap.utils.clamp;
        ScrollTrigger_context = ScrollTrigger_gsap.core.context || ScrollTrigger_passThrough;
        ScrollTrigger_suppressOverwrites = ScrollTrigger_gsap.core.suppressOverwrites || ScrollTrigger_passThrough;
        _scrollRestoration = ScrollTrigger_win.history.scrollRestoration || "auto";
        _lastScroll = ScrollTrigger_win.pageYOffset;
        ScrollTrigger_gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.
  
        if (ScrollTrigger_body) {
          _enabled = 1;
          _div100vh = document.createElement("div"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.
  
          _div100vh.style.height = "100vh";
          _div100vh.style.position = "absolute";
  
          _refresh100vh();
  
          _rafBugFix();
  
          Observer.register(ScrollTrigger_gsap); // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
  
          ScrollTrigger.isTouch = Observer.isTouch;
          _fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503
  
          ScrollTrigger_addListener(ScrollTrigger_win, "wheel", ScrollTrigger_onScroll); // mostly for 3rd party smooth scrolling libraries.
  
  
          ScrollTrigger_root = [ScrollTrigger_win, ScrollTrigger_doc, ScrollTrigger_docEl, ScrollTrigger_body];
  
          if (ScrollTrigger_gsap.matchMedia) {
            ScrollTrigger.matchMedia = function (vars) {
              var mm = ScrollTrigger_gsap.matchMedia(),
                  p;
  
              for (p in vars) {
                mm.add(p, vars[p]);
              }
  
              return mm;
            };
  
            ScrollTrigger_gsap.addEventListener("matchMediaInit", function () {
              return _revertAll();
            });
            ScrollTrigger_gsap.addEventListener("matchMediaRevert", function () {
              return _revertRecorded();
            });
            ScrollTrigger_gsap.addEventListener("matchMedia", function () {
              _refreshAll(0, 1);
  
              ScrollTrigger_dispatch("matchMedia");
            });
            ScrollTrigger_gsap.matchMedia("(orientation: portrait)", function () {
              // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
              _setBaseDimensions();
  
              return _setBaseDimensions;
            });
          } else {
            console.warn("Requires GSAP 3.11.0 or later");
          }
  
          _setBaseDimensions();
  
          ScrollTrigger_addListener(ScrollTrigger_doc, "scroll", ScrollTrigger_onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!
  
  
          var bodyStyle = ScrollTrigger_body.style,
              border = bodyStyle.borderTopStyle,
              AnimationProto = ScrollTrigger_gsap.core.Animation.prototype,
              bounds,
              i;
          AnimationProto.revert || Object.defineProperty(AnimationProto, "revert", {
            value: function value() {
              return this.time(-0.01, true);
            }
          }); // only for backwards compatibility (Animation.revert() was added after 3.10.4)
  
          bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.
  
          bounds = _getBounds(ScrollTrigger_body);
          _vertical.m = Math.round(bounds.top + _vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding
  
          _horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;
          border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty("border-top-style"); // TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.
  
          _syncInterval = setInterval(_sync, 250);
          ScrollTrigger_gsap.delayedCall(0.5, function () {
            return ScrollTrigger_startup = 0;
          });
  
          ScrollTrigger_addListener(ScrollTrigger_doc, "touchcancel", ScrollTrigger_passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.
  
  
          ScrollTrigger_addListener(ScrollTrigger_body, "touchstart", ScrollTrigger_passThrough); //works around Safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
  
  
          _multiListener(ScrollTrigger_addListener, ScrollTrigger_doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
  
          _multiListener(ScrollTrigger_addListener, ScrollTrigger_doc, "pointerup,touchend,mouseup", _pointerUpHandler);
  
          ScrollTrigger_transformProp = ScrollTrigger_gsap.utils.checkPrefix("transform");
  
          _stateProps.push(ScrollTrigger_transformProp);
  
          ScrollTrigger_coreInitted = ScrollTrigger_getTime();
          _resizeDelay = ScrollTrigger_gsap.delayedCall(0.2, _refreshAll).pause();
          _autoRefresh = [ScrollTrigger_doc, "visibilitychange", function () {
            var w = ScrollTrigger_win.innerWidth,
                h = ScrollTrigger_win.innerHeight;
  
            if (ScrollTrigger_doc.hidden) {
              _prevWidth = w;
              _prevHeight = h;
            } else if (_prevWidth !== w || _prevHeight !== h) {
              _onResize();
            }
          }, ScrollTrigger_doc, "DOMContentLoaded", _refreshAll, ScrollTrigger_win, "load", _refreshAll, ScrollTrigger_win, "resize", _onResize];
  
          _iterateAutoRefresh(ScrollTrigger_addListener);
  
          _triggers.forEach(function (trigger) {
            return trigger.enable(0, 1);
          });
  
          for (i = 0; i < _scrollers.length; i += 3) {
            _wheelListener(ScrollTrigger_removeListener, _scrollers[i], _scrollers[i + 1]);
  
            _wheelListener(ScrollTrigger_removeListener, _scrollers[i], _scrollers[i + 2]);
          }
        }
      }
    };
  
    ScrollTrigger.config = function config(vars) {
      "limitCallbacks" in vars && (_limitCallbacks = !!vars.limitCallbacks);
      var ms = vars.syncInterval;
      ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);
      "ignoreMobileResize" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);
  
      if ("autoRefreshEvents" in vars) {
        _iterateAutoRefresh(ScrollTrigger_removeListener) || _iterateAutoRefresh(ScrollTrigger_addListener, vars.autoRefreshEvents || "none");
        _ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
      }
    };
  
    ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {
      var t = _getTarget(target),
          i = _scrollers.indexOf(t),
          isViewport = ScrollTrigger_isViewport(t);
  
      if (~i) {
        _scrollers.splice(i, isViewport ? 6 : 2);
      }
  
      if (vars) {
        isViewport ? _proxies.unshift(ScrollTrigger_win, vars, ScrollTrigger_body, vars, ScrollTrigger_docEl, vars) : _proxies.unshift(t, vars);
      }
    };
  
    ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {
      _triggers.forEach(function (t) {
        return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);
      });
    };
  
    ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {
      var bounds = (ScrollTrigger_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),
          offset = bounds[horizontal ? _width : _height] * ratio || 0;
      return horizontal ? bounds.right - offset > 0 && bounds.left + offset < ScrollTrigger_win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < ScrollTrigger_win.innerHeight;
    };
  
    ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {
      ScrollTrigger_isString(element) && (element = _getTarget(element));
      var bounds = element.getBoundingClientRect(),
          size = bounds[horizontal ? _width : _height],
          offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;
      return horizontal ? (bounds.left + offset) / ScrollTrigger_win.innerWidth : (bounds.top + offset) / ScrollTrigger_win.innerHeight;
    };
  
    ScrollTrigger.killAll = function killAll(allowListeners) {
      _triggers.slice(0).forEach(function (t) {
        return t.vars.id !== "ScrollSmoother" && t.kill();
      });
  
      if (allowListeners !== true) {
        var listeners = ScrollTrigger_listeners.killAll || [];
        ScrollTrigger_listeners = {};
        listeners.forEach(function (f) {
          return f();
        });
      }
    };
  
    return ScrollTrigger;
  }();
  ScrollTrigger_ScrollTrigger.version = "3.12.2";
  
  ScrollTrigger_ScrollTrigger.saveStyles = function (targets) {
    return targets ? _toArray(targets).forEach(function (target) {
      // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
      if (target && target.style) {
        var i = _savedStyles.indexOf(target);
  
        i >= 0 && _savedStyles.splice(i, 5);
  
        _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), ScrollTrigger_gsap.core.getCache(target), ScrollTrigger_context());
      }
    }) : _savedStyles;
  };
  
  ScrollTrigger_ScrollTrigger.revert = function (soft, media) {
    return _revertAll(!soft, media);
  };
  
  ScrollTrigger_ScrollTrigger.create = function (vars, animation) {
    return new ScrollTrigger_ScrollTrigger(vars, animation);
  };
  
  ScrollTrigger_ScrollTrigger.refresh = function (safe) {
    return safe ? _onResize() : (ScrollTrigger_coreInitted || ScrollTrigger_ScrollTrigger.register()) && _refreshAll(true);
  };
  
  ScrollTrigger_ScrollTrigger.update = function (force) {
    return ++_scrollers.cache && _updateAll(force === true ? 2 : 0);
  };
  
  ScrollTrigger_ScrollTrigger.clearScrollMemory = _clearScrollMemory;
  
  ScrollTrigger_ScrollTrigger.maxScroll = function (element, horizontal) {
    return _maxScroll(element, horizontal ? _horizontal : _vertical);
  };
  
  ScrollTrigger_ScrollTrigger.getScrollFunc = function (element, horizontal) {
    return _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);
  };
  
  ScrollTrigger_ScrollTrigger.getById = function (id) {
    return _ids[id];
  };
  
  ScrollTrigger_ScrollTrigger.getAll = function () {
    return _triggers.filter(function (t) {
      return t.vars.id !== "ScrollSmoother";
    });
  }; // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.
  
  
  ScrollTrigger_ScrollTrigger.isScrolling = function () {
    return !!_lastScrollTime;
  };
  
  ScrollTrigger_ScrollTrigger.snapDirectional = _snapDirectional;
  
  ScrollTrigger_ScrollTrigger.addEventListener = function (type, callback) {
    var a = ScrollTrigger_listeners[type] || (ScrollTrigger_listeners[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  };
  
  ScrollTrigger_ScrollTrigger.removeEventListener = function (type, callback) {
    var a = ScrollTrigger_listeners[type],
        i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  };
  
  ScrollTrigger_ScrollTrigger.batch = function (targets, vars) {
    var result = [],
        varsCopy = {},
        interval = vars.interval || 0.016,
        batchMax = vars.batchMax || 1e9,
        proxyCallback = function proxyCallback(type, callback) {
      var elements = [],
          triggers = [],
          delay = ScrollTrigger_gsap.delayedCall(interval, function () {
        callback(elements, triggers);
        elements = [];
        triggers = [];
      }).pause();
      return function (self) {
        elements.length || delay.restart(true);
        elements.push(self.trigger);
        triggers.push(self);
        batchMax <= elements.length && delay.progress(1);
      };
    },
        p;
  
    for (p in vars) {
      varsCopy[p] = p.substr(0, 2) === "on" && ScrollTrigger_isFunction(vars[p]) && p !== "onRefreshInit" ? proxyCallback(p, vars[p]) : vars[p];
    }
  
    if (ScrollTrigger_isFunction(batchMax)) {
      batchMax = batchMax();
  
      ScrollTrigger_addListener(ScrollTrigger_ScrollTrigger, "refresh", function () {
        return batchMax = vars.batchMax();
      });
    }
  
    _toArray(targets).forEach(function (target) {
      var config = {};
  
      for (p in varsCopy) {
        config[p] = varsCopy[p];
      }
  
      config.trigger = target;
      result.push(ScrollTrigger_ScrollTrigger.create(config));
    });
  
    return result;
  }; // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).
  
  
  var _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {
    current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
    return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
  },
      _allowNativePanning = function _allowNativePanning(target, direction) {
    if (direction === true) {
      target.style.removeProperty("touch-action");
    } else {
      target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (Observer.isTouch ? " pinch-zoom" : "") : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
    }
  
    target === ScrollTrigger_docEl && _allowNativePanning(ScrollTrigger_body, direction);
  },
      _overflow = {
    auto: 1,
    scroll: 1
  },
      _nestedScroll = function _nestedScroll(_ref5) {
    var event = _ref5.event,
        target = _ref5.target,
        axis = _ref5.axis;
  
    var node = (event.changedTouches ? event.changedTouches[0] : event).target,
        cache = node._gsap || ScrollTrigger_gsap.core.getCache(node),
        time = ScrollTrigger_getTime(),
        cs;
  
    if (!cache._isScrollT || time - cache._isScrollT > 2000) {
      // cache for 2 seconds to improve performance.
      while (node && node !== ScrollTrigger_body && (node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) {
        node = node.parentNode;
      }
  
      cache._isScroll = node && node !== target && !ScrollTrigger_isViewport(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
      cache._isScrollT = time;
    }
  
    if (cache._isScroll || axis === "x") {
      event.stopPropagation();
      event._gsapAllow = true;
    }
  },
      // capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
  _inputObserver = function _inputObserver(target, type, inputs, nested) {
    return Observer.create({
      target: target,
      capture: true,
      debounce: false,
      lockAxis: true,
      type: type,
      onWheel: nested = nested && _nestedScroll,
      onPress: nested,
      onDrag: nested,
      onScroll: nested,
      onEnable: function onEnable() {
        return inputs && ScrollTrigger_addListener(ScrollTrigger_doc, Observer.eventTypes[0], _captureInputs, false, true);
      },
      onDisable: function onDisable() {
        return ScrollTrigger_removeListener(ScrollTrigger_doc, Observer.eventTypes[0], _captureInputs, true);
      }
    });
  },
      _inputExp = /(input|label|select|textarea)/i,
      _inputIsFocused,
      _captureInputs = function _captureInputs(e) {
    var isInput = _inputExp.test(e.target.tagName);
  
    if (isInput || _inputIsFocused) {
      e._gsapAllow = true;
      _inputIsFocused = isInput;
    }
  },
      _getScrollNormalizer = function _getScrollNormalizer(vars) {
    ScrollTrigger_isObject(vars) || (vars = {});
    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
    vars.type || (vars.type = "wheel,touch");
    vars.debounce = !!vars.debounce;
    vars.id = vars.id || "normalizer";
  
    var _vars2 = vars,
        normalizeScrollX = _vars2.normalizeScrollX,
        momentum = _vars2.momentum,
        allowNestedScroll = _vars2.allowNestedScroll,
        onRelease = _vars2.onRelease,
        self,
        maxY,
        target = _getTarget(vars.target) || ScrollTrigger_docEl,
        smoother = ScrollTrigger_gsap.core.globals().ScrollSmoother,
        smootherInstance = smoother && smoother.get(),
        content = _fixIOSBug && (vars.content && _getTarget(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()),
        scrollFuncY = _getScrollFunc(target, _vertical),
        scrollFuncX = _getScrollFunc(target, _horizontal),
        scale = 1,
        initialScale = (Observer.isTouch && ScrollTrigger_win.visualViewport ? ScrollTrigger_win.visualViewport.scale * ScrollTrigger_win.visualViewport.width : ScrollTrigger_win.outerWidth) / ScrollTrigger_win.innerWidth,
        wheelRefresh = 0,
        resolveMomentumDuration = ScrollTrigger_isFunction(momentum) ? function () {
      return momentum(self);
    } : function () {
      return momentum || 2.8;
    },
        lastRefreshID,
        skipTouchMove,
        inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
        resumeTouchMove = function resumeTouchMove() {
      return skipTouchMove = false;
    },
        scrollClampX = ScrollTrigger_passThrough,
        scrollClampY = ScrollTrigger_passThrough,
        updateClamps = function updateClamps() {
      maxY = _maxScroll(target, _vertical);
      scrollClampY = ScrollTrigger_clamp(_fixIOSBug ? 1 : 0, maxY);
      normalizeScrollX && (scrollClampX = ScrollTrigger_clamp(0, _maxScroll(target, _horizontal)));
      lastRefreshID = _refreshID;
    },
        removeContentOffset = function removeContentOffset() {
      content._gsap.y = ScrollTrigger_round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
      content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(content._gsap.y) + ", 0, 1)";
      scrollFuncY.offset = scrollFuncY.cacheID = 0;
    },
        ignoreDrag = function ignoreDrag() {
      if (skipTouchMove) {
        requestAnimationFrame(resumeTouchMove);
  
        var offset = ScrollTrigger_round(self.deltaY / 2),
            scroll = scrollClampY(scrollFuncY.v - offset);
  
        if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
          scrollFuncY.offset = scroll - scrollFuncY.v;
  
          var y = ScrollTrigger_round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);
  
          content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + y + ", 0, 1)";
          content._gsap.y = y + "px";
          scrollFuncY.cacheID = _scrollers.cache;
  
          _updateAll();
        }
  
        return true;
      }
  
      scrollFuncY.offset && removeContentOffset();
      skipTouchMove = true;
    },
        tween,
        startScrollX,
        startScrollY,
        onStopDelayedCall,
        onResize = function onResize() {
      // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
      updateClamps();
  
      if (tween.isActive() && tween.vars.scrollY > maxY) {
        scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
      }
    };
  
    content && ScrollTrigger_gsap.set(content, {
      y: "+=0"
    }); // to ensure there's a cache (element._gsap)
  
    vars.ignoreCheck = function (e) {
      return _fixIOSBug && e.type === "touchmove" && ignoreDrag(e) || scale > 1.05 && e.type !== "touchstart" || self.isGesturing || e.touches && e.touches.length > 1;
    };
  
    vars.onPress = function () {
      skipTouchMove = false;
      var prevScale = scale;
      scale = ScrollTrigger_round((ScrollTrigger_win.visualViewport && ScrollTrigger_win.visualViewport.scale || 1) / initialScale);
      tween.pause();
      prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
      startScrollX = scrollFuncX();
      startScrollY = scrollFuncY();
      updateClamps();
      lastRefreshID = _refreshID;
    };
  
    vars.onRelease = vars.onGestureStart = function (self, wasDragging) {
      scrollFuncY.offset && removeContentOffset();
  
      if (!wasDragging) {
        onStopDelayedCall.restart(true);
      } else {
        _scrollers.cache++; // make sure we're pulling the non-cached value
        // alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)
  
        var dur = resolveMomentumDuration(),
            currentScroll,
            endScroll;
  
        if (normalizeScrollX) {
          currentScroll = scrollFuncX();
          endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.
  
          dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));
          tween.vars.scrollX = scrollClampX(endScroll);
        }
  
        currentScroll = scrollFuncY();
        endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227; // the constant .227 is from power4(0.05)
  
        dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));
        tween.vars.scrollY = scrollClampY(endScroll);
        tween.invalidate().duration(dur).play(0.01);
  
        if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {
          // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
          ScrollTrigger_gsap.to({}, {
            onUpdate: onResize,
            duration: dur
          });
        }
      }
  
      onRelease && onRelease(self);
    };
  
    vars.onWheel = function () {
      tween._ts && tween.pause();
  
      if (ScrollTrigger_getTime() - wheelRefresh > 1000) {
        // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
        lastRefreshID = 0;
        wheelRefresh = ScrollTrigger_getTime();
      }
    };
  
    vars.onChange = function (self, dx, dy, xArray, yArray) {
      _refreshID !== lastRefreshID && updateClamps();
      dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.
  
      if (dy) {
        scrollFuncY.offset && removeContentOffset();
        var isTouch = yArray[2] === dy,
            y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],
            yClamped = scrollClampY(y);
        isTouch && y !== yClamped && (startScrollY += yClamped - y);
        scrollFuncY(yClamped);
      }
  
      (dy || dx) && _updateAll();
    };
  
    vars.onEnable = function () {
      _allowNativePanning(target, normalizeScrollX ? false : "x");
  
      ScrollTrigger_ScrollTrigger.addEventListener("refresh", onResize);
  
      ScrollTrigger_addListener(ScrollTrigger_win, "resize", onResize);
  
      if (scrollFuncY.smooth) {
        scrollFuncY.target.style.scrollBehavior = "auto";
        scrollFuncY.smooth = scrollFuncX.smooth = false;
      }
  
      inputObserver.enable();
    };
  
    vars.onDisable = function () {
      _allowNativePanning(target, true);
  
      ScrollTrigger_removeListener(ScrollTrigger_win, "resize", onResize);
  
      ScrollTrigger_ScrollTrigger.removeEventListener("refresh", onResize);
      inputObserver.kill();
    };
  
    vars.lockAxis = vars.lockAxis !== false;
    self = new Observer(vars);
    self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.
  
    _fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.
  
    _fixIOSBug && ScrollTrigger_gsap.ticker.add(ScrollTrigger_passThrough); // prevent the ticker from sleeping
  
    onStopDelayedCall = self._dc;
    tween = ScrollTrigger_gsap.to(self, {
      ease: "power4",
      paused: true,
      scrollX: normalizeScrollX ? "+=0.1" : "+=0",
      scrollY: "+=0.1",
      modifiers: {
        scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function () {
          return tween.pause();
        })
      },
      onUpdate: _updateAll,
      onComplete: onStopDelayedCall.vars.onComplete
    }); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.
  
    return self;
  };
  
  ScrollTrigger_ScrollTrigger.sort = function (func) {
    return _triggers.sort(func || function (a, b) {
      return (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6);
    });
  };
  
  ScrollTrigger_ScrollTrigger.observe = function (vars) {
    return new Observer(vars);
  };
  
  ScrollTrigger_ScrollTrigger.normalizeScroll = function (vars) {
    if (typeof vars === "undefined") {
      return ScrollTrigger_normalizer;
    }
  
    if (vars === true && ScrollTrigger_normalizer) {
      return ScrollTrigger_normalizer.enable();
    }
  
    if (vars === false) {
      return ScrollTrigger_normalizer && ScrollTrigger_normalizer.kill();
    }
  
    var normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);
    ScrollTrigger_normalizer && ScrollTrigger_normalizer.target === normalizer.target && ScrollTrigger_normalizer.kill();
    ScrollTrigger_isViewport(normalizer.target) && (ScrollTrigger_normalizer = normalizer);
    return normalizer;
  };
  
  ScrollTrigger_ScrollTrigger.core = {
    // smaller file size way to leverage in ScrollSmoother and Observer
    _getVelocityProp: _getVelocityProp,
    _inputObserver: _inputObserver,
    _scrollers: _scrollers,
    _proxies: _proxies,
    bridge: {
      // when normalizeScroll sets the scroll position (ss = setScroll)
      ss: function ss() {
        _lastScrollTime || ScrollTrigger_dispatch("scrollStart");
        _lastScrollTime = ScrollTrigger_getTime();
      },
      // a way to get the _refreshing value in Observer
      ref: function ref() {
        return _refreshing;
      }
    }
  };
  ScrollTrigger_getGSAP() && ScrollTrigger_gsap.registerPlugin(ScrollTrigger_ScrollTrigger);
  
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/common/var.js
  var BREAKPOINT = {
    "web": 1920,
    "labtop": 1024,
    "tablet": 844,
    "mobile": 390
  };
  var BREAKPOINT_HEADER = 1280;
  var BREAKPOINTS = {
    "web": 1920,
    "labtop": 1367,
    "tablet": 1025,
    "mobile": 681
  };
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/common/header.js
  
  
  
  
  
  var Header = /*#__PURE__*/function () {
    function Header() {
      _classCallCheck(this, Header);
      gsapWithCSS.registerPlugin(ScrollTrigger_ScrollTrigger);
      this.header = document.getElementById('header');
      this.headerContainer = this.header.querySelector('.header-container');
      this.gnb = this.header.querySelectorAll('.gnb');
      this.mobileGnb = document.querySelector('.mobile-gnb');
      this.gnbItem = this.header.querySelectorAll('.gnb-item');
      this.mobileGnbItem = this.mobileGnb.querySelectorAll('.gnb-item');
      this.mobileGnbItemDepth1 = this.mobileGnb.querySelectorAll('.gnb-item > a');
      this.depth2 = this.header.querySelectorAll('.depth2');
      this.mobileGnbDepth2 = this.mobileGnb.querySelectorAll('.depth2');
      this.mobileGnbHasDepth3 = this.mobileGnb.querySelectorAll('.has-depth3');
      this.mobileGnbGroupDepth3 = this.mobileGnb.querySelectorAll('.group-depth3');
      this.headerMenu = this.header.querySelector('.btn-menu');
      this.mobileGnbMenu = this.mobileGnb.querySelector('.btn-menu');
      this.SearchBtn = this.header.querySelector('.util-item.search button');
      this.SearchHeight = this.setSearchMaxHeight();
      this.headerDimed = this.header.querySelector('.header-dimed');
      this.headerSearch = this.header.querySelector('.header-search');
      this.maxHeight = this.getDepth2MaxHeight();
      this.init();
    }
    _createClass(Header, [{
      key: "init",
      value: function init() {
        var _this = this;
        // this.setScroll()
        this.activeCurrentPage();
        this.resizeHandler();
        this.detectEnterNav();
        this.setToggleMobileGnb();
        if (document.body.clientWidth <= BREAKPOINT_HEADER) {
          this.setMobileDepth3Height();
          this.setMobileDepth3ToggleEvent();
          this.setMobileDepth1ClickEventPrevent();
        }
        this.setMobileDepth2Height();
        this.setMobileDepth2ToggleEvent();
        this.setSearchOpen();
        this.setSearchClose();
        window.addEventListener('resize', function () {
          _this.resizeHandler();
          if (document.body.clientWidth < BREAKPOINT_HEADER) {
            _this.setMobileDepth2Height();
            _this.setMobileDepth3Height();
            _this.setMobileDepth3ToggleEvent();
            _this.setMobileDepth1ClickEventPrevent();
          }
          if (document.body.clientWidth >= BREAKPOINT_HEADER) {
            _this.toggleMobileGnb(false);
            _this.closeAllMobileDepth2();
            window.lenis.start();
          }
        });
      }
    }, {
      key: "set",
      value: function set() {}
      // setScroll(){
      //     const currentPage = document.querySelector('[data-current-page]')
      //     window.headerToggleSt = ScrollTrigger.create({
      //         trigger: currentPage,
      //         start: 'top top',
      //         end: 'bottom top',
      //         onUpdate: (self) => {
      //             if(!this.header.classList.contains('is-search')) {
      //                 this.header.classList.toggle('top', self.progress <= 0.01);
  
      //                 this.header.classList.toggle('up', self.progress > 0.01 && self.direction != 1);
      //                 this.header.classList.toggle('hide', self.direction === 1);     
      //             }
      //         }
      //     })
      //     setTimeout(() => {
      //       window.headerToggleSt.refresh()
      //     }, 1500);
      // }
    }, {
      key: "getDepth2MaxHeight",
      value: function getDepth2MaxHeight() {
        var maxHeight = 0;
        this.depth2.forEach(function (el) {
          el.removeAttribute('style');
          if (el.clientHeight >= maxHeight) maxHeight = el.clientHeight;
        });
        return maxHeight;
      }
    }, {
      key: "setDepth2MaxHeight",
      value: function setDepth2MaxHeight() {
        var _this2 = this;
        this.maxHeight = this.getDepth2MaxHeight();
        this.depth2.forEach(function (el) {
          el.style.height = _this2.maxHeight + 'px';
        });
      }
    }, {
      key: "resizeHandler",
      value: function resizeHandler() {
        this.setDepth2MaxHeight();
        this.setSearchMaxHeight();
      }
    }, {
      key: "detectEnterNav",
      value: function detectEnterNav() {
        var _this3 = this;
        this.gnb.forEach(function (el) {
          el.addEventListener('mouseenter', function () {
            _this3.toggleHeaderContainer(true);
          });
          el.addEventListener('mouseleave', function (e) {
            _this3.toggleHeaderContainer(false);
          });
        });
      }
    }, {
      key: "toggleHeaderContainer",
      value: function toggleHeaderContainer(isOpen) {
        var _this4 = this;
        var isOpened = this.header.classList.contains('open');
        var isSearchedOpen = this.header.classList.contains('is-search');
        if (isSearchedOpen) return;
        gsapWithCSS.killTweensOf(this.headerContainer);
        gsapWithCSS.to(this.headerContainer, {
          paddingBottom: isOpen ? this.maxHeight + 'px' : 0,
          onStart: function onStart() {
            if (isOpen && !_this4.isHeaderOpened()) _this4.toggleHeaderContainerState(true);
          },
          onComplete: function onComplete() {
            if (!isOpen && _this4.isHeaderOpened()) _this4.toggleHeaderContainerState(false);
          }
        });
      }
    }, {
      key: "isHeaderOpened",
      value: function isHeaderOpened() {
        var isOpened = this.header.classList.contains('open');
        return isOpened;
      }
    }, {
      key: "toggleHeaderContainerState",
      value: function toggleHeaderContainerState(isOpen) {
        this.header.classList.toggle('open', isOpen);
      }
    }, {
      key: "toggleLangContainer",
      value: function toggleLangContainer(speed) {
        var header = document.getElementById('header');
        var langContainer = header.querySelector('.lang-container');
        var lang = langContainer.querySelector('.lang');
        var isOpen = lang.classList.contains('open');
        var duration = speed >= 0 ? speed : .5;
        if (!isOpen) header.classList.add('is-lang');
        lang.classList.toggle('open', !isOpen);
        gsapWithCSS.to(lang, {
          height: isOpen ? 0 : lang.dataset.height,
          duration: duration,
          onComplete: function onComplete() {
            if (isOpen) header.classList.remove('is-lang');
          }
        });
      }
    }, {
      key: "setToggleMobileGnb",
      value: function setToggleMobileGnb() {
        var _this5 = this;
        this.headerMenu.addEventListener('click', function (e) {
          _this5.toggleMobileGnb(true);
          _this5.mobileGnb.dataset.state = 'gnb';
          window.lenis.stop();
        });
        this.mobileGnbMenu.addEventListener('click', function () {
          _this5.toggleMobileGnb(false);
          _this5.closeAllMobileDepth2();
          window.lenis.start();
        });
      }
    }, {
      key: "toggleMobileGnb",
      value: function toggleMobileGnb(isOpen) {
        this.mobileGnb.classList.toggle('open', isOpen);
      }
    }, {
      key: "setMobileDepth2Height",
      value: function setMobileDepth2Height() {
        this.mobileGnbDepth2.forEach(function (el) {
          var height = el.children[0].getBoundingClientRect().height;
          el.dataset.height = height;
          el.style.height = 0;
        });
      }
    }, {
      key: "setMobileDepth3Height",
      value: function setMobileDepth3Height() {
        this.mobileGnbGroupDepth3.forEach(function (el) {
          var height = el.children[0].getBoundingClientRect().height;
          el.dataset.height = height;
          el.style.height = 0;
        });
      }
    }, {
      key: "setMobileDepth1ClickEventPrevent",
      value: function setMobileDepth1ClickEventPrevent() {
        var _this6 = this;
        this.mobileGnbItemDepth1.forEach(function (el, idx) {
          if (idx + 1 !== _this6.mobileGnbItemDepth1.length) {
            el.addEventListener('click', function (e) {
              e.preventDefault();
            });
          }
        });
      }
    }, {
      key: "setMobileDepth2ToggleEvent",
      value: function setMobileDepth2ToggleEvent() {
        var _this7 = this;
        this.mobileGnbItem.forEach(function (el) {
          el.addEventListener('click', function (e) {
            if (e.target.closest('.has-depth3')) return;
            _this7.closeAllMobileDepth2(el);
            var isOutlink = el.classList.contains('outlink');
            if (isOutlink) return;
            var isOpen = el.classList.contains('open');
            var depth2 = el.querySelector('.depth2');
            var height = depth2.dataset.height + 'px';
            el.classList.toggle('open', !isOpen);
            gsapWithCSS.killTweensOf(depth2);
            gsapWithCSS.to(depth2, {
              height: isOpen ? 0 : height
            });
          });
        });
      }
    }, {
      key: "closeAllMobileDepth2",
      value: function closeAllMobileDepth2(currentOpen) {
        var _this8 = this;
        this.mobileGnbDepth2.forEach(function (el) {
          var gnbItem = el.closest('.gnb-item');
          if (gnbItem == currentOpen) return;
          gnbItem.classList.remove('open');
          gsapWithCSS.to(el, {
            height: 0
          });
          _this8.mobileGnbHasDepth3.forEach(function (el) {
            el.classList.remove('open');
            _this8.closeAllMobileDepth3(el);
          });
        });
      }
    }, {
      key: "setMobileDepth3ToggleEvent",
      value: function setMobileDepth3ToggleEvent() {
        var _this9 = this;
        this.mobileGnbHasDepth3.forEach(function (el) {
          el.addEventListener('click', function (e) {
            e.preventDefault();
            _this9.closeAllMobileDepth3(el);
            var isOpen = el.classList.contains('open');
            var depth2 = el.closest('.depth2');
            var depth3 = el.nextElementSibling;
            var depth3Height = depth3.dataset.height + 'px';
            var depth2Height = depth2.dataset.height * 1 + depth3.dataset.height * 1 + 'px';
            el.classList.toggle('open', !isOpen);
            gsapWithCSS.killTweensOf(depth3);
            gsapWithCSS.killTweensOf(depth2);
            gsapWithCSS.to(depth2, {
              height: isOpen ? depth2.dataset.height : depth2Height
            });
            gsapWithCSS.to(depth3, {
              height: isOpen ? 0 : depth3Height
            });
          });
        });
      }
    }, {
      key: "closeAllMobileDepth3",
      value: function closeAllMobileDepth3(currentOpen) {
        this.mobileGnbGroupDepth3.forEach(function (el) {
          var gnbItem = el.closest('li').querySelector('.has-depth3');
          if (gnbItem == currentOpen) return;
          gnbItem.classList.remove('open');
          gsapWithCSS.to(el, {
            height: 0
          });
        });
      }
    }, {
      key: "setSearchMaxHeight",
      value: function setSearchMaxHeight() {
        var height = document.querySelector('.header-search').clientHeight;
        var paddingTop = window.getComputedStyle(document.querySelector('.header-search')).paddingTop.replace('px', '');
        var paddingTopNum = Number(paddingTop);
        var contHeight = height - paddingTopNum;
        return contHeight;
      }
    }, {
      key: "setSearchHeight",
      value: function setSearchHeight(height) {
        if (this.SearchBtn.classList.contains('open')) {
          this.headerSearch.style.height = height + 'px';
        } else {
          this.headerSearch.style.height = 0 + 'px';
        }
      }
    }, {
      key: "setSearchOpen",
      value: function setSearchOpen() {
        var _this10 = this;
        var _height = this.setSearchMaxHeight();
        gsapWithCSS.set(this.headerSearch, {
          height: 0
        });
        this.SearchBtn.addEventListener('click', function (e) {
          if (window.innerWidth >= BREAKPOINTS.mobile && window.innerWidth >= BREAKPOINTS.tablet) {
            var _document$querySelect;
            (_document$querySelect = document.querySelector('#header')) === null || _document$querySelect === void 0 || _document$querySelect.classList.toggle('is-search');
            if (document.querySelector('.page-main')) {
              // this.header.classList.toggle('light')
            }
            _this10.SearchBtn.classList.toggle('open');
            _this10.setSearchHeight(_height);
          } else {
            _this10.mobileGnb.dataset.state = 'search';
            _this10.toggleMobileGnb(true);
            window.lenis.stop();
          }
        });
      }
    }, {
      key: "setSearchClose",
      value: function setSearchClose() {
        var _this11 = this;
        this.headerDimed.addEventListener('click', function () {
          var _height = _this11.setSearchMaxHeight();
          if (document.querySelector('.page-main')) {
            // this.header.classList.add('light')
          }
          _this11.header.classList.remove('is-search');
          _this11.SearchBtn.classList.remove('open');
          _this11.setSearchHeight(_height);
        });
      }
    }, {
      key: "activeCurrentPage",
      value: function activeCurrentPage() {}
    }]);
    return Header;
  }();
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/component/popup.js
  var popup = {
    "set": function set() {
      console.log('set');
    },
    "open": function open() {
      console.log('open');
    },
    "close": function close() {
      console.log('close');
    }
  };
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/common/resize.js
  function resizeHandler() {
    setVmax();
  }
  function setVmax() {
    var vmax = document.body.clientWidth >= document.body.clientHeight ? document.body.clientWidth : document.body.clientHeight;
    document.documentElement.style.setProperty('--vmax', vmax + 'px');
  }
  ;// CONCATENATED MODULE: ./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs
  function t(){return t=Object.assign?Object.assign.bind():function(t){for(var i=1;i<arguments.length;i++){var e=arguments[i];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])}return t},t.apply(this,arguments)}function i(t,i,e){return Math.max(t,Math.min(i,e))}class e{advance(t){var e;if(!this.isRunning)return;let s=!1;if(this.lerp)this.value=(o=this.value,n=this.to,(1-(r=1-Math.exp(-60*this.lerp*t)))*o+r*n),Math.round(this.value)===this.to&&(this.value=this.to,s=!0);else{this.currentTime+=t;const e=i(0,this.currentTime/this.duration,1);s=e>=1;const o=s?1:this.easing(e);this.value=this.from+(this.to-this.from)*o}var o,n,r;null==(e=this.onUpdate)||e.call(this,this.value,s),s&&this.stop()}stop(){this.isRunning=!1}fromTo(t,i,{lerp:e=.1,duration:s=1,easing:o=(t=>t),onStart:n,onUpdate:r}){this.from=this.value=t,this.to=i,this.lerp=e,this.duration=s,this.easing=o,this.currentTime=0,this.isRunning=!0,null==n||n(),this.onUpdate=r}}class s{constructor({wrapper:t,content:i,autoResize:e=!0}={}){if(this.resize=()=>{this.onWrapperResize(),this.onContentResize()},this.onWrapperResize=()=>{this.wrapper===window?(this.width=window.innerWidth,this.height=window.innerHeight):(this.width=this.wrapper.clientWidth,this.height=this.wrapper.clientHeight)},this.onContentResize=()=>{this.scrollHeight=this.content.scrollHeight,this.scrollWidth=this.content.scrollWidth},this.wrapper=t,this.content=i,e){const t=function(t,i){let e;return function(){let i=arguments,s=this;clearTimeout(e),e=setTimeout(function(){t.apply(s,i)},250)}}(this.resize);this.wrapper!==window&&(this.wrapperResizeObserver=new ResizeObserver(t),this.wrapperResizeObserver.observe(this.wrapper)),this.contentResizeObserver=new ResizeObserver(t),this.contentResizeObserver.observe(this.content)}this.resize()}destroy(){var t,i;null==(t=this.wrapperResizeObserver)||t.disconnect(),null==(i=this.contentResizeObserver)||i.disconnect()}get limit(){return{x:this.scrollWidth-this.width,y:this.scrollHeight-this.height}}}class o{constructor(){this.events={}}emit(t,...i){let e=this.events[t]||[];for(let t=0,s=e.length;t<s;t++)e[t](...i)}on(t,i){var e;return(null==(e=this.events[t])?void 0:e.push(i))||(this.events[t]=[i]),()=>{var e;this.events[t]=null==(e=this.events[t])?void 0:e.filter(t=>i!==t)}}off(t,i){var e;this.events[t]=null==(e=this.events[t])?void 0:e.filter(t=>i!==t)}destroy(){this.events={}}}class n{constructor(t,{wheelMultiplier:e=1,touchMultiplier:s=2,normalizeWheel:n=!1}){this.onTouchStart=t=>{const{clientX:i,clientY:e}=t.targetTouches?t.targetTouches[0]:t;this.touchStart.x=i,this.touchStart.y=e,this.lastDelta={x:0,y:0}},this.onTouchMove=t=>{const{clientX:i,clientY:e}=t.targetTouches?t.targetTouches[0]:t,s=-(i-this.touchStart.x)*this.touchMultiplier,o=-(e-this.touchStart.y)*this.touchMultiplier;this.touchStart.x=i,this.touchStart.y=e,this.lastDelta={x:s,y:o},this.emitter.emit("scroll",{deltaX:s,deltaY:o,event:t})},this.onTouchEnd=t=>{this.emitter.emit("scroll",{deltaX:this.lastDelta.x,deltaY:this.lastDelta.y,event:t})},this.onWheel=t=>{let{deltaX:e,deltaY:s}=t;this.normalizeWheel&&(e=i(-100,e,100),s=i(-100,s,100)),e*=this.wheelMultiplier,s*=this.wheelMultiplier,this.emitter.emit("scroll",{deltaX:e,deltaY:s,event:t})},this.element=t,this.wheelMultiplier=e,this.touchMultiplier=s,this.normalizeWheel=n,this.touchStart={x:null,y:null},this.emitter=new o,this.element.addEventListener("wheel",this.onWheel,{passive:!1}),this.element.addEventListener("touchstart",this.onTouchStart,{passive:!1}),this.element.addEventListener("touchmove",this.onTouchMove,{passive:!1}),this.element.addEventListener("touchend",this.onTouchEnd,{passive:!1})}on(t,i){return this.emitter.on(t,i)}destroy(){this.emitter.destroy(),this.element.removeEventListener("wheel",this.onWheel,{passive:!1}),this.element.removeEventListener("touchstart",this.onTouchStart,{passive:!1}),this.element.removeEventListener("touchmove",this.onTouchMove,{passive:!1}),this.element.removeEventListener("touchend",this.onTouchEnd,{passive:!1})}}class r{constructor({wrapper:i=window,content:r=document.documentElement,wheelEventsTarget:l=i,eventsTarget:h=l,smoothWheel:a=!0,smoothTouch:c=!1,syncTouch:u=!1,syncTouchLerp:p=.1,__iosNoInertiaSyncTouchLerp:d=.4,touchInertiaMultiplier:m=35,duration:g,easing:v=(t=>Math.min(1,1.001-Math.pow(2,-10*t))),lerp:S=!g&&.1,infinite:w=!1,orientation:f="vertical",gestureOrientation:y="vertical",touchMultiplier:T=1,wheelMultiplier:z=1,normalizeWheel:M=!1,autoResize:L=!0}={}){this.onVirtualScroll=({deltaX:i,deltaY:e,event:s})=>{if(s.ctrlKey)return;const o=s.type.includes("touch"),n=s.type.includes("wheel");if("both"===this.options.gestureOrientation&&0===i&&0===e||"vertical"===this.options.gestureOrientation&&0===e||"horizontal"===this.options.gestureOrientation&&0===i||o&&"vertical"===this.options.gestureOrientation&&0===this.scroll&&!this.options.infinite&&e<=0)return;let r=s.composedPath();if(r=r.slice(0,r.indexOf(this.rootElement)),r.find(t=>{var i;return(null==t.hasAttribute?void 0:t.hasAttribute("data-lenis-prevent"))||o&&(null==t.hasAttribute?void 0:t.hasAttribute("data-lenis-prevent-touch"))||n&&(null==t.hasAttribute?void 0:t.hasAttribute("data-lenis-prevent-wheel"))||(null==(i=t.classList)?void 0:i.contains("lenis"))}))return;if(this.isStopped||this.isLocked)return void s.preventDefault();if(this.isSmooth=(this.options.smoothTouch||this.options.syncTouch)&&o||this.options.smoothWheel&&n,!this.isSmooth)return this.isScrolling=!1,void this.animate.stop();s.preventDefault();let l=e;"both"===this.options.gestureOrientation?l=Math.abs(e)>Math.abs(i)?e:i:"horizontal"===this.options.gestureOrientation&&(l=i);const h=o&&this.options.syncTouch,a=o&&"touchend"===s.type&&Math.abs(l)>1;a&&(l=this.velocity*this.options.touchInertiaMultiplier),this.scrollTo(this.targetScroll+l,t({programmatic:!1},h&&{lerp:a?this.syncTouchLerp:this.options.__iosNoInertiaSyncTouchLerp}))},this.onScroll=()=>{if(!this.isScrolling){const t=this.animatedScroll;this.animatedScroll=this.targetScroll=this.actualScroll,this.velocity=0,this.direction=Math.sign(this.animatedScroll-t),this.emit()}},window.lenisVersion="1.0.27",i!==document.documentElement&&i!==document.body||(i=window),this.options={wrapper:i,content:r,wheelEventsTarget:l,eventsTarget:h,smoothWheel:a,smoothTouch:c,syncTouch:u,syncTouchLerp:p,__iosNoInertiaSyncTouchLerp:d,touchInertiaMultiplier:m,duration:g,easing:v,lerp:S,infinite:w,gestureOrientation:y,orientation:f,touchMultiplier:T,wheelMultiplier:z,normalizeWheel:M,autoResize:L},this.animate=new e,this.emitter=new o,this.dimensions=new s({wrapper:i,content:r,autoResize:L}),this.toggleClass("lenis",!0),this.velocity=0,this.isLocked=!1,this.isStopped=!1,this.isSmooth=u||a||c,this.isScrolling=!1,this.targetScroll=this.animatedScroll=this.actualScroll,this.options.wrapper.addEventListener("scroll",this.onScroll,{passive:!1}),this.virtualScroll=new n(h,{touchMultiplier:T,wheelMultiplier:z,normalizeWheel:M}),this.virtualScroll.on("scroll",this.onVirtualScroll)}destroy(){this.emitter.destroy(),this.options.wrapper.removeEventListener("scroll",this.onScroll,{passive:!1}),this.virtualScroll.destroy(),this.dimensions.destroy(),this.toggleClass("lenis",!1),this.toggleClass("lenis-smooth",!1),this.toggleClass("lenis-scrolling",!1),this.toggleClass("lenis-stopped",!1),this.toggleClass("lenis-locked",!1)}on(t,i){return this.emitter.on(t,i)}off(t,i){return this.emitter.off(t,i)}setScroll(t){this.isHorizontal?this.rootElement.scrollLeft=t:this.rootElement.scrollTop=t}resize(){this.dimensions.resize()}emit(){this.emitter.emit("scroll",this)}reset(){this.isLocked=!1,this.isScrolling=!1,this.velocity=0,this.animate.stop()}start(){this.isStopped=!1,this.reset()}stop(){this.isStopped=!0,this.animate.stop(),this.reset()}raf(t){const i=t-(this.time||t);this.time=t,this.animate.advance(.001*i)}scrollTo(t,{offset:e=0,immediate:s=!1,lock:o=!1,duration:n=this.options.duration,easing:r=this.options.easing,lerp:l=!n&&this.options.lerp,onComplete:h=null,force:a=!1,programmatic:c=!0}={}){if(!this.isStopped&&!this.isLocked||a){if(["top","left","start"].includes(t))t=0;else if(["bottom","right","end"].includes(t))t=this.limit;else{var u;let i;if("string"==typeof t?i=document.querySelector(t):null!=(u=t)&&u.nodeType&&(i=t),i){if(this.options.wrapper!==window){const t=this.options.wrapper.getBoundingClientRect();e-=this.isHorizontal?t.left:t.top}const s=i.getBoundingClientRect();t=(this.isHorizontal?s.left:s.top)+this.animatedScroll}}if("number"==typeof t){if(t+=e,t=Math.round(t),this.options.infinite?c&&(this.targetScroll=this.animatedScroll=this.scroll):t=i(0,t,this.limit),s)return this.animatedScroll=this.targetScroll=t,this.setScroll(this.scroll),this.reset(),void(null==h||h(this));if(!c){if(t===this.targetScroll)return;this.targetScroll=t}this.animate.fromTo(this.animatedScroll,t,{duration:n,easing:r,lerp:l,onStart:()=>{o&&(this.isLocked=!0),this.isScrolling=!0},onUpdate:(t,i)=>{this.isScrolling=!0,this.velocity=t-this.animatedScroll,this.direction=Math.sign(this.velocity),this.animatedScroll=t,this.setScroll(this.scroll),c&&(this.targetScroll=t),i||this.emit(),i&&requestAnimationFrame(()=>{this.reset(),this.emit(),null==h||h(this)})}})}}}get rootElement(){return this.options.wrapper===window?this.options.content:this.options.wrapper}get limit(){return this.dimensions.limit[this.isHorizontal?"x":"y"]}get isHorizontal(){return"horizontal"===this.options.orientation}get actualScroll(){return this.isHorizontal?this.rootElement.scrollLeft:this.rootElement.scrollTop}get scroll(){return this.options.infinite?(this.animatedScroll%(t=this.limit)+t)%t:this.animatedScroll;var t}get progress(){return 0===this.limit?1:this.scroll/this.limit}get isSmooth(){return this.__isSmooth}set isSmooth(t){this.__isSmooth!==t&&(this.__isSmooth=t,this.toggleClass("lenis-smooth",t))}get isScrolling(){return this.__isScrolling}set isScrolling(t){this.__isScrolling!==t&&(this.__isScrolling=t,this.toggleClass("lenis-scrolling",t))}get isStopped(){return this.__isStopped}set isStopped(t){this.__isStopped!==t&&(this.__isStopped=t,this.toggleClass("lenis-stopped",t))}get isLocked(){return this.__isLocked}set isLocked(t){this.__isLocked!==t&&(this.__isLocked=t,this.toggleClass("lenis-locked",t))}get className(){let t="lenis";return this.isStopped&&(t+=" lenis-stopped"),this.isLocked&&(t+=" lenis-locked"),this.isScrolling&&(t+=" lenis-scrolling"),this.isSmooth&&(t+=" lenis-smooth"),t}toggleClass(t,i){this.rootElement.classList.toggle(t,i),this.emitter.emit("className change",this)}}
  //# sourceMappingURL=lenis.modern.mjs.map
  
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/common/scroll.js
  
  
  
  
  
  gsapWithCSS.registerPlugin(ScrollTrigger_ScrollTrigger);
  var Scroll = /*#__PURE__*/function () {
    function Scroll() {
      _classCallCheck(this, Scroll);
      this.init();
    }
    _createClass(Scroll, [{
      key: "init",
      value: function init() {
        window.lenis = new r();
        lenis.on('scroll', function (e) {
          ScrollTrigger_ScrollTrigger.update();
        });
        gsapWithCSS.ticker.add(function (time) {
          lenis.raf(time * 1000);
        });
        gsapWithCSS.ticker.lagSmoothing(0);
        window.lenis = lenis;
      }
    }, {
      key: "set",
      value: function set() {}
    }]);
    return Scroll;
  }();
  // EXTERNAL MODULE: ./node_modules/react/index.js
  var react = __webpack_require__(7294);
  // EXTERNAL MODULE: ./node_modules/react-dom/client.js
  var client = __webpack_require__(745);
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  
  
  
  
  function slicedToArray_slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/BasicIcon.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const BasicIcon_module = ({"basic-icon":"BasicIcon-module__basic-icon--eWjnt"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/ColorSet.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const ColorSet_module = ({"white":"ColorSet-module__white--jfqkK","black":"ColorSet-module__black--lnnke","orange":"ColorSet-module__orange--gYlLH","typo1":"ColorSet-module__typo1--mCafO","typo2":"ColorSet-module__typo2--Q9_te","typo3":"ColorSet-module__typo3--FllLx","disabled-light":"ColorSet-module__disabled-light--B2y9r"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/BasicIcon.jsx
  
  
  
  
  // Libraries - Styles - Icons
  function BasicIcon(_ref) {
    var type = _ref.type,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "24" : _ref$size,
      color = _ref.color,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? "1.5" : _ref$strokeWidth;
    return /*#__PURE__*/react.createElement("i", {
      className: "".concat(BasicIcon_module["basic-icon"], " ").concat(color !== undefined ? ColorSet_module[color] : "")
    }, /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, type == "download" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M3 16.3V21H21V16.3M12 2.32001V16",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    }), /*#__PURE__*/react.createElement("path", {
      d: "M6.5 11L12 16.5L17.5 11",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    })) : type == "search" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M11 19C15.4183 19 19 15.4183 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11C3 15.4183 6.58172 19 11 19Z",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M21 21L16.65 16.65",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })) : type == "delete" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M21 21L3 3",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M3 21L21 3",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })) : type == "delete-m" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M19 19L5 5",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M4.99999 19L19 5",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })) : type == "delete-s" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M18 18L6 6",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M6 18L18 6",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })) : type == "mail" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M22 5H2V19H22V5Z",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    }), /*#__PURE__*/react.createElement("path", {
      d: "M2 5L12 13.5L22 5",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    })) : type == "print" ? /*#__PURE__*/react.createElement("path", {
      d: "M6.28571 17V15H17.7143V17M6.28571 17V21H17.7143V17M6.28571 17H2V8H5.33333M17.7143 17H22V8H18.6667M18.6667 8V3H5.33333V8M18.6667 8H5.33333M18.1905 11H17.7143V11.5H18.1905V11Z",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    }) : type == "share" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M17 21C18.6569 21 20 19.6568 20 18C20 16.3431 18.6569 15 17 15C15.3431 15 14 16.3431 14 18C14 19.6568 15.3431 21 17 21Z",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M8 13.5L14 16.5",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M5 15C6.65685 15 8 13.6569 8 12C8 10.3432 6.65685 9.00003 5 9.00003C3.34315 9.00003 2 10.3432 2 12C2 13.6569 3.34315 15 5 15Z",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M14 7.5L8 10.5",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M17 9C18.6569 9 20 7.65685 20 6C20 4.34315 18.6569 3 17 3C15.3431 3 14 4.34315 14 6C14 7.65685 15.3431 9 17 9Z",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })) : type == "link" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M8.81766 15.1811L15.1816 8.81717",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M13.5904 16.7728L10.9388 19.4245C10.0948 20.2682 8.95031 20.7421 7.75697 20.742C6.56363 20.7419 5.41919 20.2678 4.57537 19.4239C3.73155 18.5801 3.25746 17.4357 3.25735 16.2423C3.25725 15.049 3.73115 13.9045 4.57483 13.0605L7.22648 10.4089",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M16.7729 13.5904L19.4245 10.9388C20.2682 10.0948 20.7421 8.95027 20.742 7.75693C20.7419 6.56359 20.2678 5.41915 19.424 4.57533C18.5802 3.73151 17.4357 3.25742 16.2424 3.25731C15.049 3.25721 13.9045 3.73111 13.0606 4.57479L10.4089 7.22644",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })) : type == "language" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M12 21.4286C17.2073 21.4286 21.4287 17.2073 21.4287 12C21.4287 6.79276 17.2073 2.57143 12 2.57143C6.79277 2.57143 2.57144 6.79276 2.57144 12C2.57144 17.2073 6.79277 21.4286 12 21.4286Z",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M2.57144 12H21.4287",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M12 2.57143C14.3584 5.15331 15.6986 8.50394 15.7715 12C15.6986 15.4961 14.3584 18.8468 12 21.4286C9.64166 18.8468 8.30141 15.4961 8.22858 12C8.30141 8.50394 9.64166 5.15331 12 2.57143Z",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })) : type == "hamburger" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M2 5H22",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M2 12H22",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M2 19H22",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })) : type == "check" ? /*#__PURE__*/react.createElement("path", {
      d: "M3 11.3333L9.42857 18L21 6",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square"
    }) : type == "more" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M5 12H5.01",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M12 12H12.01",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M19 12H19.01",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })) : type == "location" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12.5714 22C12.5714 22 20 16.5455 20 10.1818C20 8.01187 19.1571 5.93079 17.6569 4.3964C16.1566 2.86201 14.1217 2 12 2C9.87827 2 7.84344 2.86201 6.34315 4.3964C4.84285 5.93079 4 8.01187 4 10.1818C4 16.5455 12.5714 22 12.5714 22ZM15 10C15 11.6569 13.6569 13 12 13C10.3431 13 9 11.6569 9 10C9 8.34315 10.3431 7 12 7C13.6569 7 15 8.34315 15 10Z",
      fill: "currentColor"
    })) : type == "home" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M12.4772 1.17655C12.2026 0.941152 11.7974 0.941152 11.5228 1.17655L1 10.196V20.8C1 22.015 1.98497 23 3.2 23H9.06667C9.47168 23 9.8 22.6717 9.8 22.2667V17.8667C9.8 16.6516 10.785 15.6667 12 15.6667C13.215 15.6667 14.2 16.6516 14.2 17.8667V22.2667C14.2 22.6717 14.5283 23 14.9333 23H20.8C22.015 23 23 22.015 23 20.8V10.196L12.4772 1.17655Z",
      fill: "black"
    })) : type == "message" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 3.70036C1 2.4836 1.98439 1.5 3.2 1.5H20.8C22.0156 1.5 23 2.4836 23 3.70036V16.8998C23 18.1166 22.0156 19.1002 20.8 19.1002H12.2443L6.57315 23.3534C6.35092 23.52 6.05366 23.5468 5.80527 23.4225C5.55689 23.2982 5.4 23.0441 5.4 22.7662V19.1002H3.2C1.98439 19.1002 1 18.1166 1 16.8998V3.70036ZM6.86667 7.3664H17.1333V8.83396H6.86667V7.3664ZM6.86667 11.7662H14.2V13.2338H6.86667V11.7662Z",
      fill: "black"
    })) : type == "post" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M20 21.5H19.75C18.65 21.5 17.75 20.6 17.75 19.5V2.5H2V19.5C2 20.6 2.9 21.5 4 21.5H20ZM20 21.5C21.1 21.5 22 20.6 22 19.5V7H17.75",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    }), /*#__PURE__*/react.createElement("path", {
      d: "M13.88 7.08002H5.88",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    }), /*#__PURE__*/react.createElement("path", {
      d: "M13.88 11.58H5.88",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    })) : type == "phone" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("path", {
      d: "M18.3328 14.1449V16.6539C18.3337 16.8868 18.2859 17.1173 18.1924 17.3308C18.0989 17.5442 17.9618 17.7357 17.7898 17.8932C17.6178 18.0507 17.4148 18.1706 17.1937 18.2452C16.9726 18.3198 16.7384 18.3475 16.5059 18.3265C13.9273 18.0469 11.4503 17.1675 9.27405 15.759C7.24931 14.4749 5.53268 12.7617 4.24607 10.741C2.82984 8.55915 1.94849 6.07506 1.67343 3.48996C1.65249 3.25868 1.68003 3.02559 1.75429 2.80552C1.82856 2.58545 1.94793 2.38322 2.1048 2.21172C2.26167 2.04021 2.4526 1.90318 2.66544 1.80936C2.87828 1.71553 3.10836 1.66696 3.34104 1.66675H5.85503C6.26171 1.66275 6.65597 1.80648 6.96433 2.07114C7.27269 2.3358 7.4741 2.70334 7.53102 3.10524C7.63713 3.90818 7.83391 4.69656 8.11761 5.45534C8.23036 5.75469 8.25476 6.08001 8.18793 6.39278C8.12109 6.70554 7.96582 6.99262 7.74051 7.22001L6.67626 8.28216C7.86919 10.376 9.60627 12.1096 11.7042 13.3002L12.7685 12.238C12.9963 12.0132 13.284 11.8582 13.5974 11.7915C13.9107 11.7248 14.2367 11.7491 14.5367 11.8617C15.2969 12.1448 16.0869 12.3412 16.8914 12.4471C17.2985 12.5044 17.6703 12.7091 17.936 13.0221C18.2018 13.3351 18.343 13.7347 18.3328 14.1449Z",
      fill: "currentColor"
    })) : null));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/ArrowIcon.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const ArrowIcon_module = ({"arrow-icon":"ArrowIcon-module__arrow-icon--DYwxA","left":"ArrowIcon-module__left--daHmV","right":"ArrowIcon-module__right--hHPws","up":"ArrowIcon-module__up--L7Pp6","down":"ArrowIcon-module__down--VRk3_"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/ArrowIcon.jsx
  
  
  
  
  // Libraries - Styles - Icons
  function ArrowIcon(_ref) {
    var type = _ref.type,
      _ref$direction = _ref.direction,
      direction = _ref$direction === void 0 ? "left" : _ref$direction,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "24" : _ref$size,
      color = _ref.color,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? "1.5" : _ref$strokeWidth;
    return /*#__PURE__*/react.createElement("i", {
      className: "".concat(ArrowIcon_module["arrow-icon"], " ").concat(color !== undefined ? ColorSet_module[color] : "")
    }, type == "arrow" ? /*#__PURE__*/react.createElement("svg", {
      className: "".concat(ArrowIcon_module[direction]),
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M19.5 12H3.26001",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    }), /*#__PURE__*/react.createElement("path", {
      d: "M12 20L20 12L12 4",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    })) : type == "chevron-l" ? /*#__PURE__*/react.createElement("svg", {
      className: "".concat(ArrowIcon_module[direction]),
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M9 4L17 12L9 20",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square"
    })) : type == "double-chevron" ? /*#__PURE__*/react.createElement("svg", {
      className: "".concat(ArrowIcon_module[direction]),
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M12 4L20 12L12 20",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M6 4L14 12L6 20",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square"
    })) : type == "chevron-s" ? /*#__PURE__*/react.createElement("svg", {
      className: "".concat(ArrowIcon_module[direction]),
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M13.5 17L8.5 12L13.5 7",
      stroke: "currentColor",
      strokeWidth: strokeWidth,
      strokeLinecap: "square"
    })) : type == "arrow_top-right_l" ? /*#__PURE__*/react.createElement("svg", {
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M17.5 6.5L6 18",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    }), /*#__PURE__*/react.createElement("path", {
      d: "M6 6H18V18",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    })) : type == "arrow_top-right_s" ? /*#__PURE__*/react.createElement("svg", {
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M15.5 8.5L7.5 16.54",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    }), /*#__PURE__*/react.createElement("path", {
      d: "M7.5 8H16V16.5",
      stroke: "currentColor",
      strokeWidth: strokeWidth
    })) : null);
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/useDeviceType.jsx
  
  
  
  var useDeviceType = function useDeviceType() {
    var _useState = (0,react.useState)(null),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      deviceType = _useState2[0],
      setDeviceType = _useState2[1];
    (0,react.useEffect)(function () {
      var handleResize = function handleResize() {
        var windowWidth = window.innerWidth;
        if (windowWidth >= BREAKPOINTS.labtop) {
          setDeviceType("web");
        } else if (windowWidth >= BREAKPOINTS.tablet && windowWidth < BREAKPOINTS.labtop) {
          setDeviceType("labtop");
        } else if (windowWidth >= BREAKPOINTS.mobile && windowWidth < BREAKPOINTS.tablet) {
          setDeviceType("tablet");
        } else {
          setDeviceType("mobile");
        }
      };
      handleResize();
      window.addEventListener("resize", handleResize);
      return function () {
        window.removeEventListener("resize", handleResize);
      };
    }, []);
    return deviceType;
  };
  /* harmony default export */ const hooks_useDeviceType = (useDeviceType);
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/isLiverServer.jsx
  // [HUB-GROUP]
  function isLiverServer() {
    var isLiverServer = window.location.host == 'www.hanwha.co.kr' ? true : false;
    var host = isLiverServer ? 'https://www.hanwhahub.com/' : '/';
    return host;
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Gnb.jsx
  
  
  
  
  
  
  
  
  function Gnb(_ref) {
    var _datas$SPACE, _datas$ENERGE, _datas$FINANCE, _datas$DISTRIBUTION;
    var data = _ref.data;
    var device = hooks_useDeviceType();
    var isWeb = device == "web" || device == "labtop";
    var isWebGnb = document.body.clientWidth > 1280;
    var isMobile = !isWebGnb ? {
      'data-lenis-prevent': ''
    } : '';
    var _useState = (0,react.useState)({}),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      datas = _useState2[0],
      setDatas = _useState2[1];
    var _useState3 = (0,react.useState)(false),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      size = _useState4[0],
      setSize = _useState4[1];
  
    // async function getData() {
    //     const res = await axios.get("/api/v1/business/group-ajax.do")
    //     const data = {...res.data}
    //     setDatas(data)
    // }
  
    (0,react.useEffect)(function () {
      // getData()
      setDatas(data);
    }, []);
    (0,react.useEffect)(function () {
      document.querySelector('.mobile-gnb').querySelectorAll('.group-depth3').forEach(function (el) {
        var height = el.querySelector('ul').clientHeight;
        el.dataset.height = height;
        el.style.height = 0;
      });
    }, [datas]);
    return /*#__PURE__*/react.createElement("div", _extends({
      className: "gnb"
    }, isMobile), /*#__PURE__*/react.createElement("ul", {
      className: "gnb-list"
    }, /*#__PURE__*/react.createElement("li", {
      className: "gnb-item"
    }, /*#__PURE__*/react.createElement("a", {
      href: isWebGnb ? "/company/introduce.do" : "#",
      onClick: function onClick() {
        return setTagging('gnb_company');
      }
    }, /*#__PURE__*/react.createElement("div", null, "\uADF8\uB8F9\uC18C\uAC1C ", /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "chevron-l",
      direction: 'up'
    }))), /*#__PURE__*/react.createElement("div", {
      className: "depth2"
    }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/company/introduce.do",
      onClick: function onClick() {
        return setTagging('gnb_introduce');
      }
    }, /*#__PURE__*/react.createElement("div", null, "\uAE30\uC5C5\uC18C\uAC1C"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/company/greeting.do",
      onClick: function onClick() {
        return setTagging('gnb_greeting');
      }
    }, /*#__PURE__*/react.createElement("div", null, "\uC778\uC0AC\uB9D0"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/company/history.do",
      onClick: function onClick() {
        return setTagging('gnb_history');
      }
    }, /*#__PURE__*/react.createElement("div", null, "\uC5F0\uD601"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/company/brand.do",
      onClick: function onClick() {
        return setTagging('gnb_brand');
      }
    }, /*#__PURE__*/react.createElement("div", null, "\uBE0C\uB79C\uB4DC \uC2A4\uD1A0\uB9AC")))))), /*#__PURE__*/react.createElement("li", {
      className: "gnb-item"
    }, /*#__PURE__*/react.createElement("a", {
      className: "group",
      onClick: function onClick() {
        return setTagging('gnb_business');
      },
      "group-idx": 0,
      href: isWebGnb ? "/business/group.do" : "#"
    }, /*#__PURE__*/react.createElement("div", null, "\uC0AC\uC5C5\uBD84\uC57C ", /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "chevron-l",
      direction: 'up'
    }))), /*#__PURE__*/react.createElement("div", {
      className: "depth2"
    }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      className: "group",
      onClick: function onClick() {
        return setTagging('gnb_group');
      },
      "group-idx": 0,
      href: "/business/group.do"
    }, /*#__PURE__*/react.createElement("div", null, "\uADF8\uB8F9\uC0AC \uD604\uD669"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      className: "group has-depth3",
      onClick: function onClick() {
        return setTagging('gnb_manufacture');
      },
      "group-idx": 1,
      href: isWebGnb ? "/business/group.do?idx=0" : "#"
    }, /*#__PURE__*/react.createElement("div", null, "\uC6B0\uC8FC\uD56D\uACF5\u2219\uBC29\uC0B0\u2219\uAE30\uACC4 ", !isWebGnb && /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "chevron-s",
      direction: 'up'
    }))), /*#__PURE__*/react.createElement("div", {
      className: "group-depth3"
    }, /*#__PURE__*/react.createElement("ul", null, datas && ((_datas$SPACE = datas['SPACE']) === null || _datas$SPACE === void 0 ? void 0 : _datas$SPACE.list.map(function (data, idx) {
      return /*#__PURE__*/react.createElement(Depth3Item, {
        title: data.title,
        href: data.href,
        key: "item".concat(idx)
      });
    }))))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      className: "group has-depth3",
      onClick: function onClick() {
        return setTagging('gnb_energy');
      },
      "group-idx": 2,
      href: isWebGnb ? "/business/group.do?idx=1" : "#"
    }, /*#__PURE__*/react.createElement("div", null, "\uC5D0\uB108\uC9C0\u2219\uC624\uC158 ", !isWebGnb && /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "chevron-s",
      direction: 'up'
    }))), /*#__PURE__*/react.createElement("div", {
      className: "group-depth3"
    }, /*#__PURE__*/react.createElement("ul", null, datas && ((_datas$ENERGE = datas['ENERGE']) === null || _datas$ENERGE === void 0 ? void 0 : _datas$ENERGE.list.map(function (data, idx) {
      return /*#__PURE__*/react.createElement(Depth3Item, {
        title: data.title,
        href: data.href,
        key: "item".concat(idx)
      });
    }))))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      className: "group has-depth3",
      onClick: function onClick() {
        return setTagging('gnb_finance');
      },
      "group-idx": 3,
      href: isWebGnb ? "/business/group.do?idx=2" : "#"
    }, /*#__PURE__*/react.createElement("div", null, "\uAE08\uC735 ", !isWebGnb && /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "chevron-s",
      direction: 'up'
    }))), /*#__PURE__*/react.createElement("div", {
      className: "group-depth3"
    }, /*#__PURE__*/react.createElement("ul", null, datas && ((_datas$FINANCE = datas['FINANCE']) === null || _datas$FINANCE === void 0 ? void 0 : _datas$FINANCE.list.map(function (data, idx) {
      return /*#__PURE__*/react.createElement(Depth3Item, {
        title: data.title,
        href: data.href,
        key: "item".concat(idx)
      });
    }))))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      className: "group has-depth3",
      onClick: function onClick() {
        return setTagging('gnb_service');
      },
      "group-idx": 4,
      href: isWebGnb ? "/business/group.do?idx=3" : "#"
    }, /*#__PURE__*/react.createElement("div", null, "\uC720\uD1B5\u2219\uC11C\uBE44\uC2A4 ", !isWebGnb && /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "chevron-s",
      direction: 'up'
    }))), /*#__PURE__*/react.createElement("div", {
      className: "group-depth3"
    }, /*#__PURE__*/react.createElement("ul", null, datas && ((_datas$DISTRIBUTION = datas['DISTRIBUTION']) === null || _datas$DISTRIBUTION === void 0 ? void 0 : _datas$DISTRIBUTION.list.map(function (data, idx) {
      return /*#__PURE__*/react.createElement(Depth3Item, {
        title: data.title,
        href: data.href,
        key: "item".concat(idx)
      });
    })))))))), /*#__PURE__*/react.createElement("li", {
      className: "gnb-item news"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_newsroom');
      },
      href: isWebGnb ? "/newsroom/index.do" : "#"
    }, /*#__PURE__*/react.createElement("div", null, "\uB274\uC2A4\uB8F8 ", /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "chevron-l",
      direction: 'up'
    }))), /*#__PURE__*/react.createElement("div", {
      className: "depth2"
    }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_newsroom');
      },
      href: "/newsroom/index.do"
    }, /*#__PURE__*/react.createElement("div", null, "\uB274\uC2A4\uB8F8 \uBA54\uC778"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_mediacenter');
      },
      href: "/newsroom/media_center/news/news_list.do"
    }, /*#__PURE__*/react.createElement("div", null, "\uBBF8\uB514\uC5B4\uC13C\uD130")), /*#__PURE__*/react.createElement("ul", {
      className: "depth3"
    }, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/newsroom/media_center/news/news_list.do"
    }, /*#__PURE__*/react.createElement("div", null, "\uB274\uC2A4\uD53C\uB4DC"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/newsroom/media_center/digital_library/list.do"
    }, /*#__PURE__*/react.createElement("div", null, "\uB514\uC9C0\uD138 \uB77C\uC774\uBE0C\uB7EC\uB9AC"))))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_hanwhajournal');
      },
      href: "/newsroom/discover/list.do"
    }, /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("i", {
      className: "font-hanwha"
    }, "\uD55C\uD654"), "\uC800\uB110")))))), /*#__PURE__*/react.createElement("li", {
      className: "gnb-item esg"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_sustainability');
      },
      href: isWebGnb ? "/sustainability/philosophy.do" : "#"
    }, /*#__PURE__*/react.createElement("div", null, "\uC9C0\uC18D\uAC00\uB2A5\uACBD\uC601 ", /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "chevron-l",
      direction: 'up'
    }))), /*#__PURE__*/react.createElement("div", {
      className: "depth2"
    }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_overview');
      },
      href: "/sustainability/philosophy.do"
    }, /*#__PURE__*/react.createElement("div", null, "Overview"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_environment');
      },
      href: "/sustainability/environment.do"
    }, /*#__PURE__*/react.createElement("div", null, "Environment"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_social');
      },
      href: "/sustainability/social/winning_partnership.do"
    }, /*#__PURE__*/react.createElement("div", null, "Social")), /*#__PURE__*/react.createElement("ul", {
      className: "depth3"
    }, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/sustainability/social/winning_partnership.do"
    }, /*#__PURE__*/react.createElement("div", null, "\uC0C1\uC0DD\uACBD\uC601"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/sustainability/social/socialcontribution/introduction.do"
    }, /*#__PURE__*/react.createElement("div", null, "\uC0AC\uD68C\uACF5\uD5CC"))))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_governance');
      },
      href: "/sustainability/governance.do"
    }, /*#__PURE__*/react.createElement("div", null, "Governance")))))), /*#__PURE__*/react.createElement("li", {
      className: "gnb-item outlink"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('gnb_goto_recruit');
      },
      href: "https://www.hanwhain.com",
      target: "_blank"
    }, /*#__PURE__*/react.createElement("div", null, "\uC778\uC7AC\uCC44\uC6A9 ", /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "arrow_top-right_l"
    })))), /*#__PURE__*/react.createElement("li", {
      className: "banner"
    }, /*#__PURE__*/react.createElement("a", {
      target: "_blank",
      href: "".concat(isLiverServer(), "business/hanwha_hub.do"),
      onClick: function onClick() {
        return setTagging('gnb_goto_hanwhahub');
      }
    }, /*#__PURE__*/react.createElement("img", {
      className: "bg",
      src: "/assets/img/common/gnb-showroom.png",
      alt: "showroom"
    }), /*#__PURE__*/react.createElement("div", {
      className: "txt-wrap"
    }, /*#__PURE__*/react.createElement("h5", {
      className: "title font-hanwha"
    }, "Hanwha Hub", /*#__PURE__*/react.createElement("svg", {
      width: "22",
      height: "22",
      viewBox: "0 0 22 22",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M11.3655 4.03174L18.3334 11.0001L11.3655 17.968",
      stroke: "white",
      strokeWidth: "2"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M18.2275 11H2.98828",
      stroke: "white",
      strokeWidth: "2"
    }))), /*#__PURE__*/react.createElement("p", {
      className: "desc"
    }, "\uB545\uACFC \uBC14\uB2E4, \uAC00\uC7A5 \uAD11\uD65C\uD55C \uC6B0\uC8FC\uC5D0 \uC774\uB974\uAE30\uAE4C\uC9C0."))))));
  }
  function Depth3Item(_ref2) {
    var title = _ref2.title,
      href = _ref2.href;
    return /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: href
    }, /*#__PURE__*/react.createElement("div", {
      className: "font-hanwha",
      dangerouslySetInnerHTML: {
        __html: title
      }
    })));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Button.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const Button_module = ({"button":"Button-module__button--_W0CO","container":"Button-module__container--XiDeG","border":"Button-module__border--Fg5No","text-container":"Button-module__text-container--iJcQb","circle-container":"Button-module__circle-container--BoVEP","circle":"Button-module__circle--gQMc5","lg":"Button-module__lg--jLAIu","center":"Button-module__center--uWlnd","md":"Button-module__md--HDOAv","left":"Button-module__left--tIXiK","right":"Button-module__right--NMQih","sm":"Button-module__sm--rDf3Z","outline-hug":"Button-module__outline-hug--wR5Uu","ghost-hug":"Button-module__ghost-hug--eKgq5","btn-1":"Button-module__btn-1--nkcLa","light":"Button-module__light--t15Ka","outline-fix":"Button-module__outline-fix--n1Tb6","ghost-fix":"Button-module__ghost-fix--sph4e","dark":"Button-module__dark--MOQPg","btn-2":"Button-module__btn-2--VCujO","none":"Button-module__none--NeE4I","md-txt":"Button-module__md-txt--k6IpK","sm-txt":"Button-module__sm-txt--gWsS6","active":"Button-module__active--dGrEI","disabled":"Button-module__disabled--RjGzM","font-on":"Button-module__font-on--BSs0O","font-off":"Button-module__font-off--D9hXg"});
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
  
  
  /**
   * @public
   */
  const MotionConfigContext = (0,react.createContext)({
      transformPagePoint: (p) => p,
      isStatic: false,
      reducedMotion: "never",
  });
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
  
  
  const MotionContext = (0,react.createContext)({});
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/context/PresenceContext.mjs
  
  
  /**
   * @public
   */
  const PresenceContext_PresenceContext = (0,react.createContext)(null);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/is-browser.mjs
  const isBrowser = typeof document !== "undefined";
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  
  
  
  const useIsomorphicLayoutEffect = isBrowser ? react.useLayoutEffect : react.useEffect;
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/context/LazyContext.mjs
  
  
  const LazyContext = (0,react.createContext)({ strict: false });
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  
  
  
  
  
  
  
  function useVisualElement(Component, visualState, props, createVisualElement) {
      const { visualElement: parent } = (0,react.useContext)(MotionContext);
      const lazyContext = (0,react.useContext)(LazyContext);
      const presenceContext = (0,react.useContext)(PresenceContext_PresenceContext);
      const reducedMotionConfig = (0,react.useContext)(MotionConfigContext).reducedMotion;
      const visualElementRef = (0,react.useRef)();
      /**
       * If we haven't preloaded a renderer, check to see if we have one lazy-loaded
       */
      createVisualElement = createVisualElement || lazyContext.renderer;
      if (!visualElementRef.current && createVisualElement) {
          visualElementRef.current = createVisualElement(Component, {
              visualState,
              parent,
              props,
              presenceContext,
              blockInitialAnimation: presenceContext
                  ? presenceContext.initial === false
                  : false,
              reducedMotionConfig,
          });
      }
      const visualElement = visualElementRef.current;
      (0,react.useInsertionEffect)(() => {
          visualElement && visualElement.update(props, presenceContext);
      });
      /**
       * Cache this value as we want to know whether HandoffAppearAnimations
       * was present on initial render - it will be deleted after this.
       */
      const canHandoff = (0,react.useRef)(Boolean(window.HandoffAppearAnimations));
      useIsomorphicLayoutEffect(() => {
          if (!visualElement)
              return;
          visualElement.render();
          /**
           * Ideally this function would always run in a useEffect.
           *
           * However, if we have optimised appear animations to handoff from,
           * it needs to happen synchronously to ensure there's no flash of
           * incorrect styles in the event of a hydration error.
           *
           * So if we detect a situtation where optimised appear animations
           * are running, we use useLayoutEffect to trigger animations.
           */
          if (canHandoff.current && visualElement.animationState) {
              visualElement.animationState.animateChanges();
          }
      });
      (0,react.useEffect)(() => {
          if (!visualElement)
              return;
          visualElement.updateFeatures();
          if (!canHandoff.current && visualElement.animationState) {
              visualElement.animationState.animateChanges();
          }
          /**
           * Once we've handed off animations we can delete HandoffAppearAnimations
           * so components added after the initial render can animate changes
           * in useEffect vs useLayoutEffect.
           */
          window.HandoffAppearAnimations = undefined;
          canHandoff.current = false;
      });
      return visualElement;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
  function isRefObject(ref) {
      return (typeof ref === "object" &&
          Object.prototype.hasOwnProperty.call(ref, "current"));
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  
  
  
  /**
   * Creates a ref function that, when called, hydrates the provided
   * external ref and VisualElement.
   */
  function useMotionRef(visualState, visualElement, externalRef) {
      return (0,react.useCallback)((instance) => {
          instance && visualState.mount && visualState.mount(instance);
          if (visualElement) {
              instance
                  ? visualElement.mount(instance)
                  : visualElement.unmount();
          }
          if (externalRef) {
              if (typeof externalRef === "function") {
                  externalRef(instance);
              }
              else if (isRefObject(externalRef)) {
                  externalRef.current = instance;
              }
          }
      }, 
      /**
       * Only pass a new ref callback to React if we've received a visual element
       * factory. Otherwise we'll be mounting/remounting every time externalRef
       * or other dependencies change.
       */
      [visualElement]);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs
  /**
   * Decides if the supplied variable is variant label
   */
  function isVariantLabel(v) {
      return typeof v === "string" || Array.isArray(v);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
  function isAnimationControls(v) {
      return typeof v === "object" && typeof v.start === "function";
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs
  const variantPriorityOrder = [
      "animate",
      "whileInView",
      "whileFocus",
      "whileHover",
      "whileTap",
      "whileDrag",
      "exit",
  ];
  const variantProps = ["initial", ...variantPriorityOrder];
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
  
  
  
  
  function isControllingVariants(props) {
      return (isAnimationControls(props.animate) ||
          variantProps.some((name) => isVariantLabel(props[name])));
  }
  function isVariantNode(props) {
      return Boolean(isControllingVariants(props) || props.variants);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
  
  
  
  function getCurrentTreeVariants(props, context) {
      if (isControllingVariants(props)) {
          const { initial, animate } = props;
          return {
              initial: initial === false || isVariantLabel(initial)
                  ? initial
                  : undefined,
              animate: isVariantLabel(animate) ? animate : undefined,
          };
      }
      return props.inherit !== false ? context : {};
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  
  
  
  
  function useCreateMotionContext(props) {
      const { initial, animate } = getCurrentTreeVariants(props, (0,react.useContext)(MotionContext));
      return (0,react.useMemo)(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
  }
  function variantLabelsAsDependency(prop) {
      return Array.isArray(prop) ? prop.join(" ") : prop;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/definitions.mjs
  const featureProps = {
      animation: [
          "animate",
          "variants",
          "whileHover",
          "whileTap",
          "exit",
          "whileInView",
          "whileFocus",
          "whileDrag",
      ],
      exit: ["exit"],
      drag: ["drag", "dragControls"],
      focus: ["whileFocus"],
      hover: ["whileHover", "onHoverStart", "onHoverEnd"],
      tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
      pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
      inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
      layout: ["layout", "layoutId"],
  };
  const featureDefinitions = {};
  for (const key in featureProps) {
      featureDefinitions[key] = {
          isEnabled: (props) => featureProps[key].some((name) => !!props[name]),
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/load-features.mjs
  
  
  function loadFeatures(features) {
      for (const key in features) {
          featureDefinitions[key] = {
              ...featureDefinitions[key],
              ...features[key],
          };
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
  
  
  const LayoutGroupContext = (0,react.createContext)({});
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
  
  
  /**
   * Internal, exported only for usage in Framer
   */
  const SwitchLayoutGroupContext = (0,react.createContext)({});
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs
  const motionComponentSymbol = Symbol.for("motionComponentSymbol");
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/index.mjs
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  /**
   * Create a `motion` component.
   *
   * This function accepts a Component argument, which can be either a string (ie "div"
   * for `motion.div`), or an actual React component.
   *
   * Alongside this is a config option which provides a way of rendering the provided
   * component "offline", or outside the React render cycle.
   */
  function motion_createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {
      preloadedFeatures && loadFeatures(preloadedFeatures);
      function MotionComponent(props, externalRef) {
          /**
           * If we need to measure the element we load this functionality in a
           * separate class component in order to gain access to getSnapshotBeforeUpdate.
           */
          let MeasureLayout;
          const configAndProps = {
              ...(0,react.useContext)(MotionConfigContext),
              ...props,
              layoutId: useLayoutId(props),
          };
          const { isStatic } = configAndProps;
          const context = useCreateMotionContext(props);
          const visualState = useVisualState(props, isStatic);
          if (!isStatic && isBrowser) {
              /**
               * Create a VisualElement for this component. A VisualElement provides a common
               * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as
               * providing a way of rendering to these APIs outside of the React render loop
               * for more performant animations and interactions
               */
              context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);
              /**
               * Load Motion gesture and animation features. These are rendered as renderless
               * components so each feature can optionally make use of React lifecycle methods.
               */
              const initialLayoutGroupConfig = (0,react.useContext)(SwitchLayoutGroupContext);
              const isStrict = (0,react.useContext)(LazyContext).strict;
              if (context.visualElement) {
                  MeasureLayout = context.visualElement.loadFeatures(
                  // Note: Pass the full new combined props to correctly re-render dynamic feature components.
                  configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);
              }
          }
          /**
           * The mount order and hierarchy is specific to ensure our element ref
           * is hydrated by the time features fire their effects.
           */
          return (react.createElement(MotionContext.Provider, { value: context },
              MeasureLayout && context.visualElement ? (react.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,
              useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));
      }
      const ForwardRefComponent = (0,react.forwardRef)(MotionComponent);
      ForwardRefComponent[motionComponentSymbol] = Component;
      return ForwardRefComponent;
  }
  function useLayoutId({ layoutId }) {
      const layoutGroupId = (0,react.useContext)(LayoutGroupContext).id;
      return layoutGroupId && layoutId !== undefined
          ? layoutGroupId + "-" + layoutId
          : layoutId;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
  
  
  /**
   * Convert any React component into a `motion` component. The provided component
   * **must** use `React.forwardRef` to the underlying DOM component you want to animate.
   *
   * ```jsx
   * const Component = React.forwardRef((props, ref) => {
   *   return <div ref={ref} />
   * })
   *
   * const MotionComponent = motion(Component)
   * ```
   *
   * @public
   */
  function createMotionProxy(createConfig) {
      function custom(Component, customMotionComponentConfig = {}) {
          return motion_createMotionComponent(createConfig(Component, customMotionComponentConfig));
      }
      if (typeof Proxy === "undefined") {
          return custom;
      }
      /**
       * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.
       * Rather than generating them anew every render.
       */
      const componentCache = new Map();
      return new Proxy(custom, {
          /**
           * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
           * The prop name is passed through as `key` and we can use that to generate a `motion`
           * DOM component with that name.
           */
          get: (_target, key) => {
              /**
               * If this element doesn't exist in the component cache, create it and cache.
               */
              if (!componentCache.has(key)) {
                  componentCache.set(key, custom(key));
              }
              return componentCache.get(key);
          },
      });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
  /**
   * We keep these listed seperately as we use the lowercase tag names as part
   * of the runtime bundle to detect SVG components
   */
  const lowercaseSVGElements = [
      "animate",
      "circle",
      "defs",
      "desc",
      "ellipse",
      "g",
      "image",
      "line",
      "filter",
      "marker",
      "mask",
      "metadata",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "rect",
      "stop",
      "switch",
      "symbol",
      "svg",
      "text",
      "tspan",
      "use",
      "view",
  ];
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
  
  
  function isSVGComponent(Component) {
      if (
      /**
       * If it's not a string, it's a custom React component. Currently we only support
       * HTML custom React components.
       */
      typeof Component !== "string" ||
          /**
           * If it contains a dash, the element is a custom HTML webcomponent.
           */
          Component.includes("-")) {
          return false;
      }
      else if (
      /**
       * If it's in our list of lowercase SVG tags, it's an SVG component
       */
      lowercaseSVGElements.indexOf(Component) > -1 ||
          /**
           * If it contains a capital letter, it's an SVG component
           */
          /[A-Z]/.test(Component)) {
          return true;
      }
      return false;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
  const scaleCorrectors = {};
  function addScaleCorrector(correctors) {
      Object.assign(scaleCorrectors, correctors);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
  /**
   * Generate a list of every possible transform key.
   */
  const transformPropOrder = [
      "transformPerspective",
      "x",
      "y",
      "z",
      "translateX",
      "translateY",
      "translateZ",
      "scale",
      "scaleX",
      "scaleY",
      "rotate",
      "rotateX",
      "rotateY",
      "rotateZ",
      "skew",
      "skewX",
      "skewY",
  ];
  /**
   * A quick lookup for transform props.
   */
  const transformProps = new Set(transformPropOrder);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
  
  
  
  function isForcedMotionValue(key, { layout, layoutId }) {
      return (transformProps.has(key) ||
          key.startsWith("origin") ||
          ((layout || layoutId !== undefined) &&
              (!!scaleCorrectors[key] || key === "opacity")));
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
  const isMotionValue = (value) => Boolean(value && value.getVelocity);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
  
  
  const translateAlias = {
      x: "translateX",
      y: "translateY",
      z: "translateZ",
      transformPerspective: "perspective",
  };
  const numTransforms = transformPropOrder.length;
  /**
   * Build a CSS transform style from individual x/y/scale etc properties.
   *
   * This outputs with a default order of transforms/scales/rotations, this can be customised by
   * providing a transformTemplate function.
   */
  function buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {
      // The transform string we're going to build into.
      let transformString = "";
      /**
       * Loop over all possible transforms in order, adding the ones that
       * are present to the transform string.
       */
      for (let i = 0; i < numTransforms; i++) {
          const key = transformPropOrder[i];
          if (transform[key] !== undefined) {
              const transformName = translateAlias[key] || key;
              transformString += `${transformName}(${transform[key]}) `;
          }
      }
      if (enableHardwareAcceleration && !transform.z) {
          transformString += "translateZ(0)";
      }
      transformString = transformString.trim();
      // If we have a custom `transform` template, pass our transform values and
      // generated transformString to that before returning
      if (transformTemplate) {
          transformString = transformTemplate(transform, transformIsDefault ? "" : transformString);
      }
      else if (allowTransformNone && transformIsDefault) {
          transformString = "none";
      }
      return transformString;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
  const checkStringStartsWith = (token) => (key) => typeof key === "string" && key.startsWith(token);
  const isCSSVariableName = checkStringStartsWith("--");
  const isCSSVariableToken = checkStringStartsWith("var(--");
  const cssVariableRegex = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g;
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
  /**
   * Provided a value and a ValueType, returns the value as that value type.
   */
  const getValueAsType = (value, type) => {
      return type && typeof value === "number"
          ? type.transform(value)
          : value;
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/clamp.mjs
  const clamp_clamp = (min, max, v) => Math.min(Math.max(v, min), max);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
  
  
  const number = {
      test: (v) => typeof v === "number",
      parse: parseFloat,
      transform: (v) => v,
  };
  const alpha = {
      ...number,
      transform: (v) => clamp_clamp(0, 1, v),
  };
  const scale = {
      ...number,
      default: 1,
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/utils.mjs
  /**
   * TODO: When we move from string as a source of truth to data models
   * everything in this folder should probably be referred to as models vs types
   */
  // If this number is a decimal, make it just five decimal places
  // to avoid exponents
  const sanitize = (v) => Math.round(v * 100000) / 100000;
  const floatRegex = /(-)?([\d]*\.?[\d])+/g;
  const colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
  const singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
  function utils_isString(v) {
      return typeof v === "string";
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
  
  
  const createUnitType = (unit) => ({
      test: (v) => utils_isString(v) && v.endsWith(unit) && v.split(" ").length === 1,
      parse: parseFloat,
      transform: (v) => `${v}${unit}`,
  });
  const degrees = createUnitType("deg");
  const percent = createUnitType("%");
  const px = createUnitType("px");
  const vh = createUnitType("vh");
  const vw = createUnitType("vw");
  const progressPercentage = {
      ...percent,
      parse: (v) => percent.parse(v) / 100,
      transform: (v) => percent.transform(v * 100),
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
  
  
  const type_int_int = {
      ...number,
      transform: Math.round,
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
  
  
  
  
  const numberValueTypes = {
      // Border props
      borderWidth: px,
      borderTopWidth: px,
      borderRightWidth: px,
      borderBottomWidth: px,
      borderLeftWidth: px,
      borderRadius: px,
      radius: px,
      borderTopLeftRadius: px,
      borderTopRightRadius: px,
      borderBottomRightRadius: px,
      borderBottomLeftRadius: px,
      // Positioning props
      width: px,
      maxWidth: px,
      height: px,
      maxHeight: px,
      size: px,
      top: px,
      right: px,
      bottom: px,
      left: px,
      // Spacing props
      padding: px,
      paddingTop: px,
      paddingRight: px,
      paddingBottom: px,
      paddingLeft: px,
      margin: px,
      marginTop: px,
      marginRight: px,
      marginBottom: px,
      marginLeft: px,
      // Transform props
      rotate: degrees,
      rotateX: degrees,
      rotateY: degrees,
      rotateZ: degrees,
      scale: scale,
      scaleX: scale,
      scaleY: scale,
      scaleZ: scale,
      skew: degrees,
      skewX: degrees,
      skewY: degrees,
      distance: px,
      translateX: px,
      translateY: px,
      translateZ: px,
      x: px,
      y: px,
      z: px,
      perspective: px,
      transformPerspective: px,
      opacity: alpha,
      originX: progressPercentage,
      originY: progressPercentage,
      originZ: px,
      // Misc
      zIndex: type_int_int,
      // SVG
      fillOpacity: alpha,
      strokeOpacity: alpha,
      numOctaves: type_int_int,
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
  
  
  
  
  
  
  function buildHTMLStyles(state, latestValues, options, transformTemplate) {
      const { style, vars, transform, transformOrigin } = state;
      // Track whether we encounter any transform or transformOrigin values.
      let hasTransform = false;
      let hasTransformOrigin = false;
      // Does the calculated transform essentially equal "none"?
      let transformIsNone = true;
      /**
       * Loop over all our latest animated values and decide whether to handle them
       * as a style or CSS variable.
       *
       * Transforms and transform origins are kept seperately for further processing.
       */
      for (const key in latestValues) {
          const value = latestValues[key];
          /**
           * If this is a CSS variable we don't do any further processing.
           */
          if (isCSSVariableName(key)) {
              vars[key] = value;
              continue;
          }
          // Convert the value to its default value type, ie 0 -> "0px"
          const valueType = numberValueTypes[key];
          const valueAsType = getValueAsType(value, valueType);
          if (transformProps.has(key)) {
              // If this is a transform, flag to enable further transform processing
              hasTransform = true;
              transform[key] = valueAsType;
              // If we already know we have a non-default transform, early return
              if (!transformIsNone)
                  continue;
              // Otherwise check to see if this is a default transform
              if (value !== (valueType.default || 0))
                  transformIsNone = false;
          }
          else if (key.startsWith("origin")) {
              // If this is a transform origin, flag and enable further transform-origin processing
              hasTransformOrigin = true;
              transformOrigin[key] = valueAsType;
          }
          else {
              style[key] = valueAsType;
          }
      }
      if (!latestValues.transform) {
          if (hasTransform || transformTemplate) {
              style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);
          }
          else if (style.transform) {
              /**
               * If we have previously created a transform but currently don't have any,
               * reset transform style to none.
               */
              style.transform = "none";
          }
      }
      /**
       * Build a transformOrigin style. Uses the same defaults as the browser for
       * undefined origins.
       */
      if (hasTransformOrigin) {
          const { originX = "50%", originY = "50%", originZ = 0, } = transformOrigin;
          style.transformOrigin = `${originX} ${originY} ${originZ}`;
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
  const createHtmlRenderState = () => ({
      style: {},
      transform: {},
      transformOrigin: {},
      vars: {},
  });
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/html/use-props.mjs
  
  
  
  
  
  
  function copyRawValuesOnly(target, source, props) {
      for (const key in source) {
          if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
              target[key] = source[key];
          }
      }
  }
  function useInitialMotionValues({ transformTemplate }, visualState, isStatic) {
      return (0,react.useMemo)(() => {
          const state = createHtmlRenderState();
          buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);
          return Object.assign({}, state.vars, state.style);
      }, [visualState]);
  }
  function useStyle(props, visualState, isStatic) {
      const styleProp = props.style || {};
      const style = {};
      /**
       * Copy non-Motion Values straight into style
       */
      copyRawValuesOnly(style, styleProp, props);
      Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
      return props.transformValues ? props.transformValues(style) : style;
  }
  function useHTMLProps(props, visualState, isStatic) {
      // The `any` isn't ideal but it is the type of createElement props argument
      const htmlProps = {};
      const style = useStyle(props, visualState, isStatic);
      if (props.drag && props.dragListener !== false) {
          // Disable the ghost element when a user drags
          htmlProps.draggable = false;
          // Disable text selection
          style.userSelect =
              style.WebkitUserSelect =
                  style.WebkitTouchCallout =
                      "none";
          // Disable scrolling on the draggable direction
          style.touchAction =
              props.drag === true
                  ? "none"
                  : `pan-${props.drag === "x" ? "y" : "x"}`;
      }
      if (props.tabIndex === undefined &&
          (props.onTap || props.onTapStart || props.whileTap)) {
          htmlProps.tabIndex = 0;
      }
      htmlProps.style = style;
      return htmlProps;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
  /**
   * A list of all valid MotionProps.
   *
   * @privateRemarks
   * This doesn't throw if a `MotionProp` name is missing - it should.
   */
  const validMotionProps = new Set([
      "animate",
      "exit",
      "variants",
      "initial",
      "style",
      "values",
      "variants",
      "transition",
      "transformTemplate",
      "transformValues",
      "custom",
      "inherit",
      "onLayoutAnimationStart",
      "onLayoutAnimationComplete",
      "onLayoutMeasure",
      "onBeforeLayoutMeasure",
      "onAnimationStart",
      "onAnimationComplete",
      "onUpdate",
      "onDragStart",
      "onDrag",
      "onDragEnd",
      "onMeasureDragConstraints",
      "onDirectionLock",
      "onDragTransitionEnd",
      "_dragX",
      "_dragY",
      "onHoverStart",
      "onHoverEnd",
      "onViewportEnter",
      "onViewportLeave",
      "ignoreStrict",
      "viewport",
  ]);
  /**
   * Check whether a prop name is a valid `MotionProp` key.
   *
   * @param key - Name of the property to check
   * @returns `true` is key is a valid `MotionProp`.
   *
   * @public
   */
  function isValidMotionProp(key) {
      return (key.startsWith("while") ||
          (key.startsWith("drag") && key !== "draggable") ||
          key.startsWith("layout") ||
          key.startsWith("onTap") ||
          key.startsWith("onPan") ||
          validMotionProps.has(key));
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
  
  
  let shouldForward = (key) => !isValidMotionProp(key);
  function loadExternalIsValidProp(isValidProp) {
      if (!isValidProp)
          return;
      // Explicitly filter our events
      shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
  }
  /**
   * Emotion and Styled Components both allow users to pass through arbitrary props to their components
   * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which
   * of these should be passed to the underlying DOM node.
   *
   * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props
   * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props
   * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of
   * `@emotion/is-prop-valid`, however to fix this problem we need to use it.
   *
   * By making it an optionalDependency we can offer this functionality only in the situations where it's
   * actually required.
   */
  try {
      /**
       * We attempt to import this package but require won't be defined in esm environments, in that case
       * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed
       * in favour of explicit injection.
       */
      loadExternalIsValidProp(require("@emotion/is-prop-valid").default);
  }
  catch (_a) {
      // We don't need to actually do anything here - the fallback is the existing `isPropValid`.
  }
  function filterProps(props, isDom, forwardMotionProps) {
      const filteredProps = {};
      for (const key in props) {
          /**
           * values is considered a valid prop by Emotion, so if it's present
           * this will be rendered out to the DOM unless explicitly filtered.
           *
           * We check the type as it could be used with the `feColorMatrix`
           * element, which we support.
           */
          if (key === "values" && typeof props.values === "object")
              continue;
          if (shouldForward(key) ||
              (forwardMotionProps === true && isValidMotionProp(key)) ||
              (!isDom && !isValidMotionProp(key)) ||
              // If trying to use native HTML drag events, forward drag listeners
              (props["draggable"] && key.startsWith("onDrag"))) {
              filteredProps[key] = props[key];
          }
      }
      return filteredProps;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
  
  
  function calcOrigin(origin, offset, size) {
      return typeof origin === "string"
          ? origin
          : px.transform(offset + size * origin);
  }
  /**
   * The SVG transform origin defaults are different to CSS and is less intuitive,
   * so we use the measured dimensions of the SVG to reconcile these.
   */
  function calcSVGTransformOrigin(dimensions, originX, originY) {
      const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
      const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
      return `${pxOriginX} ${pxOriginY}`;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
  
  
  const dashKeys = {
      offset: "stroke-dashoffset",
      array: "stroke-dasharray",
  };
  const camelKeys = {
      offset: "strokeDashoffset",
      array: "strokeDasharray",
  };
  /**
   * Build SVG path properties. Uses the path's measured length to convert
   * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset
   * and stroke-dasharray attributes.
   *
   * This function is mutative to reduce per-frame GC.
   */
  function buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {
      // Normalise path length by setting SVG attribute pathLength to 1
      attrs.pathLength = 1;
      // We use dash case when setting attributes directly to the DOM node and camel case
      // when defining props on a React component.
      const keys = useDashCase ? dashKeys : camelKeys;
      // Build the dash offset
      attrs[keys.offset] = px.transform(-offset);
      // Build the dash array
      const pathLength = px.transform(length);
      const pathSpacing = px.transform(spacing);
      attrs[keys.array] = `${pathLength} ${pathSpacing}`;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
  
  
  
  
  /**
   * Build SVG visual attrbutes, like cx and style.transform
   */
  function buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, 
  // This is object creation, which we try to avoid per-frame.
  ...latest }, options, isSVGTag, transformTemplate) {
      buildHTMLStyles(state, latest, options, transformTemplate);
      /**
       * For svg tags we just want to make sure viewBox is animatable and treat all the styles
       * as normal HTML tags.
       */
      if (isSVGTag) {
          if (state.style.viewBox) {
              state.attrs.viewBox = state.style.viewBox;
          }
          return;
      }
      state.attrs = state.style;
      state.style = {};
      const { attrs, style, dimensions } = state;
      /**
       * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs
       * and copy it into style.
       */
      if (attrs.transform) {
          if (dimensions)
              style.transform = attrs.transform;
          delete attrs.transform;
      }
      // Parse transformOrigin
      if (dimensions &&
          (originX !== undefined || originY !== undefined || style.transform)) {
          style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);
      }
      // Render attrX/attrY/attrScale as attributes
      if (attrX !== undefined)
          attrs.x = attrX;
      if (attrY !== undefined)
          attrs.y = attrY;
      if (attrScale !== undefined)
          attrs.scale = attrScale;
      // Build SVG path if one has been defined
      if (pathLength !== undefined) {
          buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
  
  
  const createSvgRenderState = () => ({
      ...createHtmlRenderState(),
      attrs: {},
  });
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs
  const isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  
  
  
  
  
  
  function useSVGProps(props, visualState, _isStatic, Component) {
      const visualProps = (0,react.useMemo)(() => {
          const state = createSvgRenderState();
          buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);
          return {
              ...state.attrs,
              style: { ...state.style },
          };
      }, [visualState]);
      if (props.style) {
          const rawStyles = {};
          copyRawValuesOnly(rawStyles, props.style, props);
          visualProps.style = { ...rawStyles, ...visualProps.style };
      }
      return visualProps;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  
  
  
  
  
  
  
  function createUseRender(forwardMotionProps = false) {
      const useRender = (Component, props, ref, { latestValues }, isStatic) => {
          const useVisualProps = isSVGComponent(Component)
              ? useSVGProps
              : useHTMLProps;
          const visualProps = useVisualProps(props, latestValues, isStatic, Component);
          const filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
          const elementProps = {
              ...filteredProps,
              ...visualProps,
              ref,
          };
          /**
           * If component has been handed a motion value as its child,
           * memoise its initial value and render that. Subsequent updates
           * will be handled by the onChange handler
           */
          const { children } = props;
          const renderedChildren = (0,react.useMemo)(() => (isMotionValue(children) ? children.get() : children), [children]);
          return (0,react.createElement)(Component, {
              ...elementProps,
              children: renderedChildren,
          });
      };
      return useRender;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
  /**
   * Convert camelCase to dash-case properties.
   */
  const camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/html/utils/render.mjs
  function renderHTML(element, { style, vars }, styleProp, projection) {
      Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
      // Loop over any CSS variables and assign those.
      for (const key in vars) {
          element.style.setProperty(key, vars[key]);
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
  /**
   * A set of attribute names that are always read/written as camel case.
   */
  const camelCaseAttributes = new Set([
      "baseFrequency",
      "diffuseConstant",
      "kernelMatrix",
      "kernelUnitLength",
      "keySplines",
      "keyTimes",
      "limitingConeAngle",
      "markerHeight",
      "markerWidth",
      "numOctaves",
      "targetX",
      "targetY",
      "surfaceScale",
      "specularConstant",
      "specularExponent",
      "stdDeviation",
      "tableValues",
      "viewBox",
      "gradientTransform",
      "pathLength",
      "startOffset",
      "textLength",
      "lengthAdjust",
  ]);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
  
  
  
  
  function renderSVG(element, renderState, _styleProp, projection) {
      renderHTML(element, renderState, undefined, projection);
      for (const key in renderState.attrs) {
          element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
  
  
  
  function scrapeMotionValuesFromProps(props, prevProps) {
      const { style } = props;
      const newValues = {};
      for (const key in style) {
          if (isMotionValue(style[key]) ||
              (prevProps.style && isMotionValue(prevProps.style[key])) ||
              isForcedMotionValue(key, props)) {
              newValues[key] = style[key];
          }
      }
      return newValues;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
  
  
  
  
  function scrape_motion_values_scrapeMotionValuesFromProps(props, prevProps) {
      const newValues = scrapeMotionValuesFromProps(props, prevProps);
      for (const key in props) {
          if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {
              const targetKey = transformPropOrder.indexOf(key) !== -1
                  ? "attr" + key.charAt(0).toUpperCase() + key.substring(1)
                  : key;
              newValues[targetKey] = props[key];
          }
      }
      return newValues;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs
  function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {
      /**
       * If the variant definition is a function, resolve.
       */
      if (typeof definition === "function") {
          definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);
      }
      /**
       * If the variant definition is a variant label, or
       * the function returned a variant label, resolve.
       */
      if (typeof definition === "string") {
          definition = props.variants && props.variants[definition];
      }
      /**
       * At this point we've resolved both functions and variant labels,
       * but the resolved variant label might itself have been a function.
       * If so, resolve. This can only have returned a valid target object.
       */
      if (typeof definition === "function") {
          definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);
      }
      return definition;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/use-constant.mjs
  
  
  /**
   * Creates a constant value over the lifecycle of a component.
   *
   * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer
   * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`
   * you can ensure that initialisers don't execute twice or more.
   */
  function useConstant(init) {
      const ref = (0,react.useRef)(null);
      if (ref.current === null) {
          ref.current = init();
      }
      return ref.current;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
  const isKeyframesTarget = (v) => {
      return Array.isArray(v);
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/resolve-value.mjs
  
  
  const isCustomValue = (v) => {
      return Boolean(v && typeof v === "object" && v.mix && v.toValue);
  };
  const resolveFinalValueInKeyframes = (v) => {
      // TODO maybe throw if v.length - 1 is placeholder token?
      return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
  
  
  
  /**
   * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself
   *
   * TODO: Remove and move to library
   */
  function resolveMotionValue(value) {
      const unwrappedValue = isMotionValue(value) ? value.get() : value;
      return isCustomValue(unwrappedValue)
          ? unwrappedValue.toValue()
          : unwrappedValue;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  
  
  
  
  
  
  
  
  
  function makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {
      const state = {
          latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),
          renderState: createRenderState(),
      };
      if (onMount) {
          state.mount = (instance) => onMount(props, instance, state);
      }
      return state;
  }
  const makeUseVisualState = (config) => (props, isStatic) => {
      const context = (0,react.useContext)(MotionContext);
      const presenceContext = (0,react.useContext)(PresenceContext_PresenceContext);
      const make = () => makeState(config, props, context, presenceContext);
      return isStatic ? make() : useConstant(make);
  };
  function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
      const values = {};
      const motionValues = scrapeMotionValues(props, {});
      for (const key in motionValues) {
          values[key] = resolveMotionValue(motionValues[key]);
      }
      let { initial, animate } = props;
      const isControllingVariants$1 = isControllingVariants(props);
      const isVariantNode$1 = isVariantNode(props);
      if (context &&
          isVariantNode$1 &&
          !isControllingVariants$1 &&
          props.inherit !== false) {
          if (initial === undefined)
              initial = context.initial;
          if (animate === undefined)
              animate = context.animate;
      }
      let isInitialAnimationBlocked = presenceContext
          ? presenceContext.initial === false
          : false;
      isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
      const variantToSet = isInitialAnimationBlocked ? animate : initial;
      if (variantToSet &&
          typeof variantToSet !== "boolean" &&
          !isAnimationControls(variantToSet)) {
          const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
          list.forEach((definition) => {
              const resolved = resolveVariantFromProps(props, definition);
              if (!resolved)
                  return;
              const { transitionEnd, transition, ...target } = resolved;
              for (const key in target) {
                  let valueTarget = target[key];
                  if (Array.isArray(valueTarget)) {
                      /**
                       * Take final keyframe if the initial animation is blocked because
                       * we want to initialise at the end of that blocked animation.
                       */
                      const index = isInitialAnimationBlocked
                          ? valueTarget.length - 1
                          : 0;
                      valueTarget = valueTarget[index];
                  }
                  if (valueTarget !== null) {
                      values[key] = valueTarget;
                  }
              }
              for (const key in transitionEnd)
                  values[key] = transitionEnd[key];
          });
      }
      return values;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/noop.mjs
  const noop_noop = (any) => any;
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/frameloop/render-step.mjs
  class Queue {
      constructor() {
          this.order = [];
          this.scheduled = new Set();
      }
      add(process) {
          if (!this.scheduled.has(process)) {
              this.scheduled.add(process);
              this.order.push(process);
              return true;
          }
      }
      remove(process) {
          const index = this.order.indexOf(process);
          if (index !== -1) {
              this.order.splice(index, 1);
              this.scheduled.delete(process);
          }
      }
      clear() {
          this.order.length = 0;
          this.scheduled.clear();
      }
  }
  function createRenderStep(runNextFrame) {
      /**
       * We create and reuse two queues, one to queue jobs for the current frame
       * and one for the next. We reuse to avoid triggering GC after x frames.
       */
      let thisFrame = new Queue();
      let nextFrame = new Queue();
      let numToRun = 0;
      /**
       * Track whether we're currently processing jobs in this step. This way
       * we can decide whether to schedule new jobs for this frame or next.
       */
      let isProcessing = false;
      let flushNextFrame = false;
      /**
       * A set of processes which were marked keepAlive when scheduled.
       */
      const toKeepAlive = new WeakSet();
      const step = {
          /**
           * Schedule a process to run on the next frame.
           */
          schedule: (callback, keepAlive = false, immediate = false) => {
              const addToCurrentFrame = immediate && isProcessing;
              const queue = addToCurrentFrame ? thisFrame : nextFrame;
              if (keepAlive)
                  toKeepAlive.add(callback);
              if (queue.add(callback) && addToCurrentFrame && isProcessing) {
                  // If we're adding it to the currently running queue, update its measured size
                  numToRun = thisFrame.order.length;
              }
              return callback;
          },
          /**
           * Cancel the provided callback from running on the next frame.
           */
          cancel: (callback) => {
              nextFrame.remove(callback);
              toKeepAlive.delete(callback);
          },
          /**
           * Execute all schedule callbacks.
           */
          process: (frameData) => {
              /**
               * If we're already processing we've probably been triggered by a flushSync
               * inside an existing process. Instead of executing, mark flushNextFrame
               * as true and ensure we flush the following frame at the end of this one.
               */
              if (isProcessing) {
                  flushNextFrame = true;
                  return;
              }
              isProcessing = true;
              [thisFrame, nextFrame] = [nextFrame, thisFrame];
              // Clear the next frame queue
              nextFrame.clear();
              // Execute this frame
              numToRun = thisFrame.order.length;
              if (numToRun) {
                  for (let i = 0; i < numToRun; i++) {
                      const callback = thisFrame.order[i];
                      callback(frameData);
                      if (toKeepAlive.has(callback)) {
                          step.schedule(callback);
                          runNextFrame();
                      }
                  }
              }
              isProcessing = false;
              if (flushNextFrame) {
                  flushNextFrame = false;
                  step.process(frameData);
              }
          },
      };
      return step;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/frameloop/batcher.mjs
  
  
  const stepsOrder = [
      "prepare",
      "read",
      "update",
      "preRender",
      "render",
      "postRender",
  ];
  const maxElapsed = 40;
  function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
      let runNextFrame = false;
      let useDefaultElapsed = true;
      const state = {
          delta: 0,
          timestamp: 0,
          isProcessing: false,
      };
      const steps = stepsOrder.reduce((acc, key) => {
          acc[key] = createRenderStep(() => (runNextFrame = true));
          return acc;
      }, {});
      const processStep = (stepId) => steps[stepId].process(state);
      const processBatch = () => {
          const timestamp = performance.now();
          runNextFrame = false;
          state.delta = useDefaultElapsed
              ? 1000 / 60
              : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);
          state.timestamp = timestamp;
          state.isProcessing = true;
          stepsOrder.forEach(processStep);
          state.isProcessing = false;
          if (runNextFrame && allowKeepAlive) {
              useDefaultElapsed = false;
              scheduleNextBatch(processBatch);
          }
      };
      const wake = () => {
          runNextFrame = true;
          useDefaultElapsed = true;
          if (!state.isProcessing) {
              scheduleNextBatch(processBatch);
          }
      };
      const schedule = stepsOrder.reduce((acc, key) => {
          const step = steps[key];
          acc[key] = (process, keepAlive = false, immediate = false) => {
              if (!runNextFrame)
                  wake();
              return step.schedule(process, keepAlive, immediate);
          };
          return acc;
      }, {});
      const cancel = (process) => stepsOrder.forEach((key) => steps[key].cancel(process));
      return { schedule, cancel, state, steps };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/frameloop/frame.mjs
  
  
  
  const { schedule: frame_frame, cancel: cancelFrame, state: frameData, steps, } = createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop_noop, true);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
  
  
  
  
  
  
  
  
  const svgMotionConfig = {
      useVisualState: makeUseVisualState({
          scrapeMotionValuesFromProps: scrape_motion_values_scrapeMotionValuesFromProps,
          createRenderState: createSvgRenderState,
          onMount: (props, instance, { renderState, latestValues }) => {
              frame_frame.read(() => {
                  try {
                      renderState.dimensions =
                          typeof instance.getBBox ===
                              "function"
                              ? instance.getBBox()
                              : instance.getBoundingClientRect();
                  }
                  catch (e) {
                      // Most likely trying to measure an unrendered element under Firefox
                      renderState.dimensions = {
                          x: 0,
                          y: 0,
                          width: 0,
                          height: 0,
                      };
                  }
              });
              frame_frame.render(() => {
                  buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);
                  renderSVG(instance, renderState);
              });
          },
      }),
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/html/config-motion.mjs
  
  
  
  
  const htmlMotionConfig = {
      useVisualState: makeUseVisualState({
          scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,
          createRenderState: createHtmlRenderState,
      }),
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
  
  
  
  
  
  function create_config_createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {
      const baseConfig = isSVGComponent(Component)
          ? svgMotionConfig
          : htmlMotionConfig;
      return {
          ...baseConfig,
          preloadedFeatures,
          useRender: createUseRender(forwardMotionProps),
          createVisualElement,
          Component,
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/events/add-dom-event.mjs
  function addDomEvent(target, eventName, handler, options = { passive: true }) {
      target.addEventListener(eventName, handler, options);
      return () => target.removeEventListener(eventName, handler);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs
  const isPrimaryPointer = (event) => {
      if (event.pointerType === "mouse") {
          return typeof event.button !== "number" || event.button <= 0;
      }
      else {
          /**
           * isPrimary is true for all mice buttons, whereas every touch point
           * is regarded as its own input. So subsequent concurrent touch points
           * will be false.
           *
           * Specifically match against false here as incomplete versions of
           * PointerEvents in very old browser might have it set as undefined.
           */
          return event.isPrimary !== false;
      }
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/events/event-info.mjs
  
  
  function extractEventInfo(event, pointType = "page") {
      return {
          point: {
              x: event[pointType + "X"],
              y: event[pointType + "Y"],
          },
      };
  }
  const addPointerInfo = (handler) => {
      return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
  
  
  
  function addPointerEvent(target, eventName, handler, options) {
      return addDomEvent(target, eventName, addPointerInfo(handler), options);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/pipe.mjs
  /**
   * Pipe
   * Compose other transformers to run linearily
   * pipe(min(20), max(40))
   * @param  {...functions} transformers
   * @return {function}
   */
  const combineFunctions = (a, b) => (v) => b(a(v));
  const pipe_pipe = (...transformers) => transformers.reduce(combineFunctions);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
  function createLock(name) {
      let lock = null;
      return () => {
          const openLock = () => {
              lock = null;
          };
          if (lock === null) {
              lock = name;
              return openLock;
          }
          return false;
      };
  }
  const globalHorizontalLock = createLock("dragHorizontal");
  const globalVerticalLock = createLock("dragVertical");
  function getGlobalLock(drag) {
      let lock = false;
      if (drag === "y") {
          lock = globalVerticalLock();
      }
      else if (drag === "x") {
          lock = globalHorizontalLock();
      }
      else {
          const openHorizontal = globalHorizontalLock();
          const openVertical = globalVerticalLock();
          if (openHorizontal && openVertical) {
              lock = () => {
                  openHorizontal();
                  openVertical();
              };
          }
          else {
              // Release the locks because we don't use them
              if (openHorizontal)
                  openHorizontal();
              if (openVertical)
                  openVertical();
          }
      }
      return lock;
  }
  function isDragActive() {
      // Check the gesture lock - if we get it, it means no drag gesture is active
      // and we can safely fire the tap gesture.
      const openGestureLock = getGlobalLock(true);
      if (!openGestureLock)
          return true;
      openGestureLock();
      return false;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/Feature.mjs
  class Feature {
      constructor(node) {
          this.isMounted = false;
          this.node = node;
      }
      update() { }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/hover.mjs
  
  
  
  
  
  
  function addHoverEvent(node, isActive) {
      const eventName = "pointer" + (isActive ? "enter" : "leave");
      const callbackName = "onHover" + (isActive ? "Start" : "End");
      const handleEvent = (event, info) => {
          if (event.type === "touch" || isDragActive())
              return;
          const props = node.getProps();
          if (node.animationState && props.whileHover) {
              node.animationState.setActive("whileHover", isActive);
          }
          if (props[callbackName]) {
              frame_frame.update(() => props[callbackName](event, info));
          }
      };
      return addPointerEvent(node.current, eventName, handleEvent, {
          passive: !node.getProps()[callbackName],
      });
  }
  class HoverGesture extends Feature {
      mount() {
          this.unmount = pipe_pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
      }
      unmount() { }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/focus.mjs
  
  
  
  
  class FocusGesture extends Feature {
      constructor() {
          super(...arguments);
          this.isActive = false;
      }
      onFocus() {
          let isFocusVisible = false;
          /**
           * If this element doesn't match focus-visible then don't
           * apply whileHover. But, if matches throws that focus-visible
           * is not a valid selector then in that browser outline styles will be applied
           * to the element by default and we want to match that behaviour with whileFocus.
           */
          try {
              isFocusVisible = this.node.current.matches(":focus-visible");
          }
          catch (e) {
              isFocusVisible = true;
          }
          if (!isFocusVisible || !this.node.animationState)
              return;
          this.node.animationState.setActive("whileFocus", true);
          this.isActive = true;
      }
      onBlur() {
          if (!this.isActive || !this.node.animationState)
              return;
          this.node.animationState.setActive("whileFocus", false);
          this.isActive = false;
      }
      mount() {
          this.unmount = pipe_pipe(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
      }
      unmount() { }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
  /**
   * Recursively traverse up the tree to check whether the provided child node
   * is the parent or a descendant of it.
   *
   * @param parent - Element to find
   * @param child - Element to test against parent
   */
  const isNodeOrChild = (parent, child) => {
      if (!child) {
          return false;
      }
      else if (parent === child) {
          return true;
      }
      else {
          return isNodeOrChild(parent, child.parentElement);
      }
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/press.mjs
  
  
  
  
  
  
  
  
  
  
  function fireSyntheticPointerEvent(name, handler) {
      if (!handler)
          return;
      const syntheticPointerEvent = new PointerEvent("pointer" + name);
      handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));
  }
  class PressGesture extends Feature {
      constructor() {
          super(...arguments);
          this.removeStartListeners = noop_noop;
          this.removeEndListeners = noop_noop;
          this.removeAccessibleListeners = noop_noop;
          this.startPointerPress = (startEvent, startInfo) => {
              this.removeEndListeners();
              if (this.isPressing)
                  return;
              const props = this.node.getProps();
              const endPointerPress = (endEvent, endInfo) => {
                  if (!this.checkPressEnd())
                      return;
                  const { onTap, onTapCancel } = this.node.getProps();
                  frame_frame.update(() => {
                      /**
                       * We only count this as a tap gesture if the event.target is the same
                       * as, or a child of, this component's element
                       */
                      !isNodeOrChild(this.node.current, endEvent.target)
                          ? onTapCancel && onTapCancel(endEvent, endInfo)
                          : onTap && onTap(endEvent, endInfo);
                  });
              };
              const removePointerUpListener = addPointerEvent(window, "pointerup", endPointerPress, { passive: !(props.onTap || props["onPointerUp"]) });
              const removePointerCancelListener = addPointerEvent(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props["onPointerCancel"]) });
              this.removeEndListeners = pipe_pipe(removePointerUpListener, removePointerCancelListener);
              this.startPress(startEvent, startInfo);
          };
          this.startAccessiblePress = () => {
              const handleKeydown = (keydownEvent) => {
                  if (keydownEvent.key !== "Enter" || this.isPressing)
                      return;
                  const handleKeyup = (keyupEvent) => {
                      if (keyupEvent.key !== "Enter" || !this.checkPressEnd())
                          return;
                      fireSyntheticPointerEvent("up", (event, info) => {
                          const { onTap } = this.node.getProps();
                          if (onTap) {
                              frame_frame.update(() => onTap(event, info));
                          }
                      });
                  };
                  this.removeEndListeners();
                  this.removeEndListeners = addDomEvent(this.node.current, "keyup", handleKeyup);
                  fireSyntheticPointerEvent("down", (event, info) => {
                      this.startPress(event, info);
                  });
              };
              const removeKeydownListener = addDomEvent(this.node.current, "keydown", handleKeydown);
              const handleBlur = () => {
                  if (!this.isPressing)
                      return;
                  fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
              };
              const removeBlurListener = addDomEvent(this.node.current, "blur", handleBlur);
              this.removeAccessibleListeners = pipe_pipe(removeKeydownListener, removeBlurListener);
          };
      }
      startPress(event, info) {
          this.isPressing = true;
          const { onTapStart, whileTap } = this.node.getProps();
          /**
           * Ensure we trigger animations before firing event callback
           */
          if (whileTap && this.node.animationState) {
              this.node.animationState.setActive("whileTap", true);
          }
          if (onTapStart) {
              frame_frame.update(() => onTapStart(event, info));
          }
      }
      checkPressEnd() {
          this.removeEndListeners();
          this.isPressing = false;
          const props = this.node.getProps();
          if (props.whileTap && this.node.animationState) {
              this.node.animationState.setActive("whileTap", false);
          }
          return !isDragActive();
      }
      cancelPress(event, info) {
          if (!this.checkPressEnd())
              return;
          const { onTapCancel } = this.node.getProps();
          if (onTapCancel) {
              frame_frame.update(() => onTapCancel(event, info));
          }
      }
      mount() {
          const props = this.node.getProps();
          const removePointerListener = addPointerEvent(this.node.current, "pointerdown", this.startPointerPress, { passive: !(props.onTapStart || props["onPointerStart"]) });
          const removeFocusListener = addDomEvent(this.node.current, "focus", this.startAccessiblePress);
          this.removeStartListeners = pipe_pipe(removePointerListener, removeFocusListener);
      }
      unmount() {
          this.removeStartListeners();
          this.removeEndListeners();
          this.removeAccessibleListeners();
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
  /**
   * Map an IntersectionHandler callback to an element. We only ever make one handler for one
   * element, so even though these handlers might all be triggered by different
   * observers, we can keep them in the same map.
   */
  const observerCallbacks = new WeakMap();
  /**
   * Multiple observers can be created for multiple element/document roots. Each with
   * different settings. So here we store dictionaries of observers to each root,
   * using serialised settings (threshold/margin) as lookup keys.
   */
  const observers = new WeakMap();
  const fireObserverCallback = (entry) => {
      const callback = observerCallbacks.get(entry.target);
      callback && callback(entry);
  };
  const fireAllObserverCallbacks = (entries) => {
      entries.forEach(fireObserverCallback);
  };
  function initIntersectionObserver({ root, ...options }) {
      const lookupRoot = root || document;
      /**
       * If we don't have an observer lookup map for this root, create one.
       */
      if (!observers.has(lookupRoot)) {
          observers.set(lookupRoot, {});
      }
      const rootObservers = observers.get(lookupRoot);
      const key = JSON.stringify(options);
      /**
       * If we don't have an observer for this combination of root and settings,
       * create one.
       */
      if (!rootObservers[key]) {
          rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });
      }
      return rootObservers[key];
  }
  function observeIntersection(element, options, callback) {
      const rootInteresectionObserver = initIntersectionObserver(options);
      observerCallbacks.set(element, callback);
      rootInteresectionObserver.observe(element);
      return () => {
          observerCallbacks.delete(element);
          rootInteresectionObserver.unobserve(element);
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
  
  
  
  const thresholdNames = {
      some: 0,
      all: 1,
  };
  class InViewFeature extends Feature {
      constructor() {
          super(...arguments);
          this.hasEnteredView = false;
          this.isInView = false;
      }
      startObserver() {
          this.unmount();
          const { viewport = {} } = this.node.getProps();
          const { root, margin: rootMargin, amount = "some", once } = viewport;
          const options = {
              root: root ? root.current : undefined,
              rootMargin,
              threshold: typeof amount === "number" ? amount : thresholdNames[amount],
          };
          const onIntersectionUpdate = (entry) => {
              const { isIntersecting } = entry;
              /**
               * If there's been no change in the viewport state, early return.
               */
              if (this.isInView === isIntersecting)
                  return;
              this.isInView = isIntersecting;
              /**
               * Handle hasEnteredView. If this is only meant to run once, and
               * element isn't visible, early return. Otherwise set hasEnteredView to true.
               */
              if (once && !isIntersecting && this.hasEnteredView) {
                  return;
              }
              else if (isIntersecting) {
                  this.hasEnteredView = true;
              }
              if (this.node.animationState) {
                  this.node.animationState.setActive("whileInView", isIntersecting);
              }
              /**
               * Use the latest committed props rather than the ones in scope
               * when this observer is created
               */
              const { onViewportEnter, onViewportLeave } = this.node.getProps();
              const callback = isIntersecting ? onViewportEnter : onViewportLeave;
              callback && callback(entry);
          };
          return observeIntersection(this.node.current, options, onIntersectionUpdate);
      }
      mount() {
          this.startObserver();
      }
      update() {
          if (typeof IntersectionObserver === "undefined")
              return;
          const { props, prevProps } = this.node;
          const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
          if (hasOptionsChanged) {
              this.startObserver();
          }
      }
      unmount() { }
  }
  function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
      return (name) => viewport[name] !== prevViewport[name];
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/gestures.mjs
  
  
  
  
  
  const gestureAnimations = {
      inView: {
          Feature: InViewFeature,
      },
      tap: {
          Feature: PressGesture,
      },
      focus: {
          Feature: FocusGesture,
      },
      hover: {
          Feature: HoverGesture,
      },
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
  function shallowCompare(next, prev) {
      if (!Array.isArray(prev))
          return false;
      const prevLength = prev.length;
      if (prevLength !== next.length)
          return false;
      for (let i = 0; i < prevLength; i++) {
          if (prev[i] !== next[i])
              return false;
      }
      return true;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs
  
  
  /**
   * Creates an object containing the latest state of every MotionValue on a VisualElement
   */
  function getCurrent(visualElement) {
      const current = {};
      visualElement.values.forEach((value, key) => (current[key] = value.get()));
      return current;
  }
  /**
   * Creates an object containing the latest velocity of every MotionValue on a VisualElement
   */
  function getVelocity(visualElement) {
      const velocity = {};
      visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));
      return velocity;
  }
  function resolveVariant(visualElement, definition, custom) {
      const props = visualElement.getProps();
      return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs
  
  
  const optimizedAppearDataId = "framerAppearId";
  const optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/errors.mjs
  
  
  let warning = noop_noop;
  let invariant = noop_noop;
  if (false) {}
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/time-conversion.mjs
  /**
   * Converts seconds to milliseconds
   *
   * @param seconds - Time in seconds.
   * @return milliseconds - Converted time in milliseconds.
   */
  const secondsToMilliseconds = (seconds) => seconds * 1000;
  const millisecondsToSeconds = (milliseconds) => milliseconds / 1000;
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
  const instantAnimationState = {
      current: false,
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs
  const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
  
  
  function isWaapiSupportedEasing(easing) {
      return Boolean(!easing ||
          (typeof easing === "string" && supportedWaapiEasing[easing]) ||
          isBezierDefinition(easing) ||
          (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));
  }
  const cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;
  const supportedWaapiEasing = {
      linear: "linear",
      ease: "ease",
      easeIn: "ease-in",
      easeOut: "ease-out",
      easeInOut: "ease-in-out",
      circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
      circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
      backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
      backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),
  };
  function mapEasingToNativeEasing(easing) {
      if (!easing)
          return undefined;
      return isBezierDefinition(easing)
          ? cubicBezierAsString(easing)
          : Array.isArray(easing)
              ? easing.map(mapEasingToNativeEasing)
              : supportedWaapiEasing[easing];
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
  
  
  function animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = "loop", ease, times, } = {}) {
      const keyframeOptions = { [valueName]: keyframes };
      if (times)
          keyframeOptions.offset = times;
      const easing = mapEasingToNativeEasing(ease);
      /**
       * If this is an easing array, apply to keyframes, not animation as a whole
       */
      if (Array.isArray(easing))
          keyframeOptions.easing = easing;
      return element.animate(keyframeOptions, {
          delay,
          duration,
          easing: !Array.isArray(easing) ? easing : "linear",
          fill: "both",
          iterations: repeat + 1,
          direction: repeatType === "reverse" ? "alternate" : "normal",
      });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs
  function getFinalKeyframe(keyframes, { repeat, repeatType = "loop" }) {
      const index = repeat && repeatType !== "loop" && repeat % 2 === 1
          ? 0
          : keyframes.length - 1;
      return keyframes[index];
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs
  
  
  /*
    Bezier function generator
    This has been modified from Gaëtan Renaudeau's BezierEasing
    https://github.com/gre/bezier-easing/blob/master/src/index.js
    https://github.com/gre/bezier-easing/blob/master/LICENSE
    
    I've removed the newtonRaphsonIterate algo because in benchmarking it
    wasn't noticiably faster than binarySubdivision, indeed removing it
    usually improved times, depending on the curve.
    I also removed the lookup table, as for the added bundle size and loop we're
    only cutting ~4 or so subdivision iterations. I bumped the max iterations up
    to 12 to compensate and this still tended to be faster for no perceivable
    loss in accuracy.
    Usage
      const easeOut = cubicBezier(.17,.67,.83,.67);
      const x = easeOut(0.5); // returns 0.627...
  */
  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
  const calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *
      t;
  const subdivisionPrecision = 0.0000001;
  const subdivisionMaxIterations = 12;
  function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
      let currentX;
      let currentT;
      let i = 0;
      do {
          currentT = lowerBound + (upperBound - lowerBound) / 2.0;
          currentX = calcBezier(currentT, mX1, mX2) - x;
          if (currentX > 0.0) {
              upperBound = currentT;
          }
          else {
              lowerBound = currentT;
          }
      } while (Math.abs(currentX) > subdivisionPrecision &&
          ++i < subdivisionMaxIterations);
      return currentT;
  }
  function cubicBezier(mX1, mY1, mX2, mY2) {
      // If this is a linear gradient, return linear easing
      if (mX1 === mY1 && mX2 === mY2)
          return noop_noop;
      const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
      // If animation is at start/end, return t without easing
      return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/ease.mjs
  
  
  const easeIn = cubicBezier(0.42, 0, 1, 1);
  const easeOut = cubicBezier(0, 0, 0.58, 1);
  const easeInOut = cubicBezier(0.42, 0, 0.58, 1);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs
  const isEasingArray = (ease) => {
      return Array.isArray(ease) && typeof ease[0] !== "number";
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs
  // Accepts an easing function and returns a new one that outputs mirrored values for
  // the second half of the animation. Turns easeIn into easeInOut.
  const mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs
  // Accepts an easing function and returns a new one that outputs reversed values.
  // Turns easeIn into easeOut.
  const reverseEasing = (easing) => (p) => 1 - easing(1 - p);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/circ.mjs
  
  
  
  const circIn = (p) => 1 - Math.sin(Math.acos(p));
  const circOut = reverseEasing(circIn);
  const circInOut = mirrorEasing(circOut);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/back.mjs
  
  
  
  
  const backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);
  const backIn = reverseEasing(backOut);
  const backInOut = mirrorEasing(backIn);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/anticipate.mjs
  
  
  const anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/easing/utils/map.mjs
  
  
  
  
  
  
  
  
  const easingLookup = {
      linear: noop_noop,
      easeIn: easeIn,
      easeInOut: easeInOut,
      easeOut: easeOut,
      circIn: circIn,
      circInOut: circInOut,
      circOut: circOut,
      backIn: backIn,
      backInOut: backInOut,
      backOut: backOut,
      anticipate: anticipate,
  };
  const easingDefinitionToFunction = (definition) => {
      if (Array.isArray(definition)) {
          // If cubic bezier definition, create bezier curve
          invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
          const [x1, y1, x2, y2] = definition;
          return cubicBezier(x1, y1, x2, y2);
      }
      else if (typeof definition === "string") {
          // Else lookup from table
          invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);
          return easingLookup[definition];
      }
      return definition;
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/color/utils.mjs
  
  
  /**
   * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,
   * but false if a number or multiple colors
   */
  const isColorString = (type, testProp) => (v) => {
      return Boolean((utils_isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||
          (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));
  };
  const utils_splitColor = (aName, bName, cName) => (v) => {
      if (!utils_isString(v))
          return v;
      const [a, b, c, alpha] = v.match(floatRegex);
      return {
          [aName]: parseFloat(a),
          [bName]: parseFloat(b),
          [cName]: parseFloat(c),
          alpha: alpha !== undefined ? parseFloat(alpha) : 1,
      };
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
  
  
  
  
  
  const clampRgbUnit = (v) => clamp_clamp(0, 255, v);
  const rgbUnit = {
      ...number,
      transform: (v) => Math.round(clampRgbUnit(v)),
  };
  const rgba = {
      test: isColorString("rgb", "red"),
      parse: utils_splitColor("red", "green", "blue"),
      transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" +
          rgbUnit.transform(red) +
          ", " +
          rgbUnit.transform(green) +
          ", " +
          rgbUnit.transform(blue) +
          ", " +
          sanitize(alpha.transform(alpha$1)) +
          ")",
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/color/hex.mjs
  
  
  
  function parseHex(v) {
      let r = "";
      let g = "";
      let b = "";
      let a = "";
      // If we have 6 characters, ie #FF0000
      if (v.length > 5) {
          r = v.substring(1, 3);
          g = v.substring(3, 5);
          b = v.substring(5, 7);
          a = v.substring(7, 9);
          // Or we have 3 characters, ie #F00
      }
      else {
          r = v.substring(1, 2);
          g = v.substring(2, 3);
          b = v.substring(3, 4);
          a = v.substring(4, 5);
          r += r;
          g += g;
          b += b;
          a += a;
      }
      return {
          red: parseInt(r, 16),
          green: parseInt(g, 16),
          blue: parseInt(b, 16),
          alpha: a ? parseInt(a, 16) / 255 : 1,
      };
  }
  const hex = {
      test: isColorString("#"),
      parse: parseHex,
      transform: rgba.transform,
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs
  
  
  
  
  
  const hsla = {
      test: isColorString("hsl", "hue"),
      parse: utils_splitColor("hue", "saturation", "lightness"),
      transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
          return ("hsla(" +
              Math.round(hue) +
              ", " +
              percent.transform(sanitize(saturation)) +
              ", " +
              percent.transform(sanitize(lightness)) +
              ", " +
              sanitize(alpha.transform(alpha$1)) +
              ")");
      },
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/color/index.mjs
  
  
  
  
  
  const color = {
      test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
      parse: (v) => {
          if (rgba.test(v)) {
              return rgba.parse(v);
          }
          else if (hsla.test(v)) {
              return hsla.parse(v);
          }
          else {
              return hex.parse(v);
          }
      },
      transform: (v) => {
          return utils_isString(v)
              ? v
              : v.hasOwnProperty("red")
                  ? rgba.transform(v)
                  : hsla.transform(v);
      },
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/mix.mjs
  /*
    Value in range from progress
  
    Given a lower limit and an upper limit, we return the value within
    that range as expressed by progress (usually a number from 0 to 1)
  
    So progress = 0.5 would change
  
    from -------- to
  
    to
  
    from ---- to
  
    E.g. from = 10, to = 20, progress = 0.5 => 15
  
    @param [number]: Lower limit of range
    @param [number]: Upper limit of range
    @param [number]: The progress between lower and upper limits expressed 0-1
    @return [number]: Value as calculated from progress within range (not limited within range)
  */
  const mix = (from, to, progress) => -progress * from + progress * to + from;
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs
  // Adapted from https://gist.github.com/mjackson/5311256
  function hueToRgb(p, q, t) {
      if (t < 0)
          t += 1;
      if (t > 1)
          t -= 1;
      if (t < 1 / 6)
          return p + (q - p) * 6 * t;
      if (t < 1 / 2)
          return q;
      if (t < 2 / 3)
          return p + (q - p) * (2 / 3 - t) * 6;
      return p;
  }
  function hslaToRgba({ hue, saturation, lightness, alpha }) {
      hue /= 360;
      saturation /= 100;
      lightness /= 100;
      let red = 0;
      let green = 0;
      let blue = 0;
      if (!saturation) {
          red = green = blue = lightness;
      }
      else {
          const q = lightness < 0.5
              ? lightness * (1 + saturation)
              : lightness + saturation - lightness * saturation;
          const p = 2 * lightness - q;
          red = hueToRgb(p, q, hue + 1 / 3);
          green = hueToRgb(p, q, hue);
          blue = hueToRgb(p, q, hue - 1 / 3);
      }
      return {
          red: Math.round(red * 255),
          green: Math.round(green * 255),
          blue: Math.round(blue * 255),
          alpha,
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/mix-color.mjs
  
  
  
  
  
  
  
  // Linear color space blending
  // Explained https://www.youtube.com/watch?v=LKnqECcg6Gw
  // Demonstrated http://codepen.io/osublake/pen/xGVVaN
  const mixLinearColor = (from, to, v) => {
      const fromExpo = from * from;
      return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));
  };
  const colorTypes = [hex, rgba, hsla];
  const getColorType = (v) => colorTypes.find((type) => type.test(v));
  function asRGBA(color) {
      const type = getColorType(color);
      invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);
      let model = type.parse(color);
      if (type === hsla) {
          // TODO Remove this cast - needed since Framer Motion's stricter typing
          model = hslaToRgba(model);
      }
      return model;
  }
  const mixColor = (from, to) => {
      const fromRGBA = asRGBA(from);
      const toRGBA = asRGBA(to);
      const blended = { ...fromRGBA };
      return (v) => {
          blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
          blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
          blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
          blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);
          return rgba.transform(blended);
      };
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/complex/index.mjs
  
  
  
  
  
  
  function test(v) {
      var _a, _b;
      return (isNaN(v) &&
          utils_isString(v) &&
          (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +
              (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >
              0);
  }
  const cssVarTokeniser = {
      regex: cssVariableRegex,
      countKey: "Vars",
      token: "${v}",
      parse: noop_noop,
  };
  const colorTokeniser = {
      regex: colorRegex,
      countKey: "Colors",
      token: "${c}",
      parse: color.parse,
  };
  const numberTokeniser = {
      regex: floatRegex,
      countKey: "Numbers",
      token: "${n}",
      parse: number.parse,
  };
  function tokenise(info, { regex, countKey, token, parse }) {
      const matches = info.tokenised.match(regex);
      if (!matches)
          return;
      info["num" + countKey] = matches.length;
      info.tokenised = info.tokenised.replace(regex, token);
      info.values.push(...matches.map(parse));
  }
  function analyseComplexValue(value) {
      const originalValue = value.toString();
      const info = {
          value: originalValue,
          tokenised: originalValue,
          values: [],
          numVars: 0,
          numColors: 0,
          numNumbers: 0,
      };
      if (info.value.includes("var(--"))
          tokenise(info, cssVarTokeniser);
      tokenise(info, colorTokeniser);
      tokenise(info, numberTokeniser);
      return info;
  }
  function parseComplexValue(v) {
      return analyseComplexValue(v).values;
  }
  function createTransformer(source) {
      const { values, numColors, numVars, tokenised } = analyseComplexValue(source);
      const numValues = values.length;
      return (v) => {
          let output = tokenised;
          for (let i = 0; i < numValues; i++) {
              if (i < numVars) {
                  output = output.replace(cssVarTokeniser.token, v[i]);
              }
              else if (i < numVars + numColors) {
                  output = output.replace(colorTokeniser.token, color.transform(v[i]));
              }
              else {
                  output = output.replace(numberTokeniser.token, sanitize(v[i]));
              }
          }
          return output;
      };
  }
  const convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
  function getAnimatableNone(v) {
      const parsed = parseComplexValue(v);
      const transformer = createTransformer(v);
      return transformer(parsed.map(convertNumbersToZero));
  }
  const complex = {
      test,
      parse: parseComplexValue,
      createTransformer,
      getAnimatableNone,
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/mix-complex.mjs
  
  
  
  
  
  
  
  const mixImmediate = (origin, target) => (p) => `${p > 0 ? target : origin}`;
  function getMixer(origin, target) {
      if (typeof origin === "number") {
          return (v) => mix(origin, target, v);
      }
      else if (color.test(origin)) {
          return mixColor(origin, target);
      }
      else {
          return origin.startsWith("var(")
              ? mixImmediate(origin, target)
              : mixComplex(origin, target);
      }
  }
  const mixArray = (from, to) => {
      const output = [...from];
      const numValues = output.length;
      const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));
      return (v) => {
          for (let i = 0; i < numValues; i++) {
              output[i] = blendValue[i](v);
          }
          return output;
      };
  };
  const mixObject = (origin, target) => {
      const output = { ...origin, ...target };
      const blendValue = {};
      for (const key in output) {
          if (origin[key] !== undefined && target[key] !== undefined) {
              blendValue[key] = getMixer(origin[key], target[key]);
          }
      }
      return (v) => {
          for (const key in blendValue) {
              output[key] = blendValue[key](v);
          }
          return output;
      };
  };
  const mixComplex = (origin, target) => {
      const template = complex.createTransformer(target);
      const originStats = analyseComplexValue(origin);
      const targetStats = analyseComplexValue(target);
      const canInterpolate = originStats.numVars === targetStats.numVars &&
          originStats.numColors === targetStats.numColors &&
          originStats.numNumbers >= targetStats.numNumbers;
      if (canInterpolate) {
          return pipe_pipe(mixArray(originStats.values, targetStats.values), template);
      }
      else {
          warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
          return mixImmediate(origin, target);
      }
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/progress.mjs
  /*
    Progress within given range
  
    Given a lower limit and an upper limit, we return the progress
    (expressed as a number 0-1) represented by the given value, and
    limit that progress to within 0-1.
  
    @param [number]: Lower limit
    @param [number]: Upper limit
    @param [number]: Value to find progress within given range
    @return [number]: Progress of value within range as expressed 0-1
  */
  const progress = (from, to, value) => {
      const toFromDifference = to - from;
      return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/interpolate.mjs
  
  
  
  
  
  
  
  
  
  
  const mixNumber = (from, to) => (p) => mix(from, to, p);
  function detectMixerFactory(v) {
      if (typeof v === "number") {
          return mixNumber;
      }
      else if (typeof v === "string") {
          return color.test(v) ? mixColor : mixComplex;
      }
      else if (Array.isArray(v)) {
          return mixArray;
      }
      else if (typeof v === "object") {
          return mixObject;
      }
      return mixNumber;
  }
  function createMixers(output, ease, customMixer) {
      const mixers = [];
      const mixerFactory = customMixer || detectMixerFactory(output[0]);
      const numMixers = output.length - 1;
      for (let i = 0; i < numMixers; i++) {
          let mixer = mixerFactory(output[i], output[i + 1]);
          if (ease) {
              const easingFunction = Array.isArray(ease) ? ease[i] || noop_noop : ease;
              mixer = pipe_pipe(easingFunction, mixer);
          }
          mixers.push(mixer);
      }
      return mixers;
  }
  /**
   * Create a function that maps from a numerical input array to a generic output array.
   *
   * Accepts:
   *   - Numbers
   *   - Colors (hex, hsl, hsla, rgb, rgba)
   *   - Complex (combinations of one or more numbers or strings)
   *
   * ```jsx
   * const mixColor = interpolate([0, 1], ['#fff', '#000'])
   *
   * mixColor(0.5) // 'rgba(128, 128, 128, 1)'
   * ```
   *
   * TODO Revist this approach once we've moved to data models for values,
   * probably not needed to pregenerate mixer functions.
   *
   * @public
   */
  function interpolate_interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {
      const inputLength = input.length;
      invariant(inputLength === output.length, "Both input and output ranges must be the same length");
      /**
       * If we're only provided a single input, we can just make a function
       * that returns the output.
       */
      if (inputLength === 1)
          return () => output[0];
      // If input runs highest -> lowest, reverse both arrays
      if (input[0] > input[inputLength - 1]) {
          input = [...input].reverse();
          output = [...output].reverse();
      }
      const mixers = createMixers(output, ease, mixer);
      const numMixers = mixers.length;
      const interpolator = (v) => {
          let i = 0;
          if (numMixers > 1) {
              for (; i < input.length - 2; i++) {
                  if (v < input[i + 1])
                      break;
              }
          }
          const progressInRange = progress(input[i], input[i + 1], v);
          return mixers[i](progressInRange);
      };
      return isClamp
          ? (v) => interpolator(clamp_clamp(input[0], input[inputLength - 1], v))
          : interpolator;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/offsets/fill.mjs
  
  
  
  function fillOffset(offset, remaining) {
      const min = offset[offset.length - 1];
      for (let i = 1; i <= remaining; i++) {
          const offsetProgress = progress(0, remaining, i);
          offset.push(mix(min, 1, offsetProgress));
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/offsets/default.mjs
  
  
  function defaultOffset(arr) {
      const offset = [0];
      fillOffset(offset, arr.length - 1);
      return offset;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/offsets/time.mjs
  function convertOffsetToTimes(offset, duration) {
      return offset.map((o) => o * duration);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
  
  
  
  
  
  
  
  function defaultEasing(values, easing) {
      return values.map(() => easing || easeInOut).splice(0, values.length - 1);
  }
  function keyframes({ duration = 300, keyframes: keyframeValues, times, ease = "easeInOut", }) {
      /**
       * Easing functions can be externally defined as strings. Here we convert them
       * into actual functions.
       */
      const easingFunctions = isEasingArray(ease)
          ? ease.map(easingDefinitionToFunction)
          : easingDefinitionToFunction(ease);
      /**
       * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
       * to reduce GC during animation.
       */
      const state = {
          done: false,
          value: keyframeValues[0],
      };
      /**
       * Create a times array based on the provided 0-1 offsets
       */
      const absoluteTimes = convertOffsetToTimes(
      // Only use the provided offsets if they're the correct length
      // TODO Maybe we should warn here if there's a length mismatch
      times && times.length === keyframeValues.length
          ? times
          : defaultOffset(keyframeValues), duration);
      const mapTimeToKeyframe = interpolate_interpolate(absoluteTimes, keyframeValues, {
          ease: Array.isArray(easingFunctions)
              ? easingFunctions
              : defaultEasing(keyframeValues, easingFunctions),
      });
      return {
          calculatedDuration: duration,
          next: (t) => {
              state.value = mapTimeToKeyframe(t);
              state.done = t >= duration;
              return state;
          },
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs
  /*
    Convert velocity into velocity per second
  
    @param [number]: Unit per frame
    @param [number]: Frame duration in ms
  */
  function velocityPerSecond(velocity, frameDuration) {
      return frameDuration ? velocity * (1000 / frameDuration) : 0;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
  
  
  const velocitySampleDuration = 5; // ms
  function calcGeneratorVelocity(resolveValue, t, current) {
      const prevT = Math.max(t - velocitySampleDuration, 0);
      return velocityPerSecond(current - resolveValue(prevT), t - prevT);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs
  
  
  
  
  const safeMin = 0.001;
  const minDuration = 0.01;
  const maxDuration = 10.0;
  const minDamping = 0.05;
  const maxDamping = 1;
  function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {
      let envelope;
      let derivative;
      warning(duration <= secondsToMilliseconds(maxDuration), "Spring duration must be 10 seconds or less");
      let dampingRatio = 1 - bounce;
      /**
       * Restrict dampingRatio and duration to within acceptable ranges.
       */
      dampingRatio = clamp_clamp(minDamping, maxDamping, dampingRatio);
      duration = clamp_clamp(minDuration, maxDuration, millisecondsToSeconds(duration));
      if (dampingRatio < 1) {
          /**
           * Underdamped spring
           */
          envelope = (undampedFreq) => {
              const exponentialDecay = undampedFreq * dampingRatio;
              const delta = exponentialDecay * duration;
              const a = exponentialDecay - velocity;
              const b = calcAngularFreq(undampedFreq, dampingRatio);
              const c = Math.exp(-delta);
              return safeMin - (a / b) * c;
          };
          derivative = (undampedFreq) => {
              const exponentialDecay = undampedFreq * dampingRatio;
              const delta = exponentialDecay * duration;
              const d = delta * velocity + velocity;
              const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;
              const f = Math.exp(-delta);
              const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);
              const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;
              return (factor * ((d - e) * f)) / g;
          };
      }
      else {
          /**
           * Critically-damped spring
           */
          envelope = (undampedFreq) => {
              const a = Math.exp(-undampedFreq * duration);
              const b = (undampedFreq - velocity) * duration + 1;
              return -safeMin + a * b;
          };
          derivative = (undampedFreq) => {
              const a = Math.exp(-undampedFreq * duration);
              const b = (velocity - undampedFreq) * (duration * duration);
              return a * b;
          };
      }
      const initialGuess = 5 / duration;
      const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
      duration = secondsToMilliseconds(duration);
      if (isNaN(undampedFreq)) {
          return {
              stiffness: 100,
              damping: 10,
              duration,
          };
      }
      else {
          const stiffness = Math.pow(undampedFreq, 2) * mass;
          return {
              stiffness,
              damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
              duration,
          };
      }
  }
  const rootIterations = 12;
  function approximateRoot(envelope, derivative, initialGuess) {
      let result = initialGuess;
      for (let i = 1; i < rootIterations; i++) {
          result = result - envelope(result) / derivative(result);
      }
      return result;
  }
  function calcAngularFreq(undampedFreq, dampingRatio) {
      return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
  
  
  
  
  const durationKeys = ["duration", "bounce"];
  const physicsKeys = ["stiffness", "damping", "mass"];
  function isSpringType(options, keys) {
      return keys.some((key) => options[key] !== undefined);
  }
  function getSpringOptions(options) {
      let springOptions = {
          velocity: 0.0,
          stiffness: 100,
          damping: 10,
          mass: 1.0,
          isResolvedFromDuration: false,
          ...options,
      };
      // stiffness/damping/mass overrides duration/bounce
      if (!isSpringType(options, physicsKeys) &&
          isSpringType(options, durationKeys)) {
          const derived = findSpring(options);
          springOptions = {
              ...springOptions,
              ...derived,
              velocity: 0.0,
              mass: 1.0,
          };
          springOptions.isResolvedFromDuration = true;
      }
      return springOptions;
  }
  function spring({ keyframes, restDelta, restSpeed, ...options }) {
      const origin = keyframes[0];
      const target = keyframes[keyframes.length - 1];
      /**
       * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
       * to reduce GC during animation.
       */
      const state = { done: false, value: origin };
      const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);
      const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0.0;
      const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
      const initialDelta = target - origin;
      const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
      /**
       * If we're working on a granular scale, use smaller defaults for determining
       * when the spring is finished.
       *
       * These defaults have been selected emprically based on what strikes a good
       * ratio between feeling good and finishing as soon as changes are imperceptible.
       */
      const isGranularScale = Math.abs(initialDelta) < 5;
      restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
      restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);
      let resolveSpring;
      if (dampingRatio < 1) {
          const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
          // Underdamped spring
          resolveSpring = (t) => {
              const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
              return (target -
                  envelope *
                      (((initialVelocity +
                          dampingRatio * undampedAngularFreq * initialDelta) /
                          angularFreq) *
                          Math.sin(angularFreq * t) +
                          initialDelta * Math.cos(angularFreq * t)));
          };
      }
      else if (dampingRatio === 1) {
          // Critically damped spring
          resolveSpring = (t) => target -
              Math.exp(-undampedAngularFreq * t) *
                  (initialDelta +
                      (initialVelocity + undampedAngularFreq * initialDelta) * t);
      }
      else {
          // Overdamped spring
          const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
          resolveSpring = (t) => {
              const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
              // When performing sinh or cosh values can hit Infinity so we cap them here
              const freqForT = Math.min(dampedAngularFreq * t, 300);
              return (target -
                  (envelope *
                      ((initialVelocity +
                          dampingRatio * undampedAngularFreq * initialDelta) *
                          Math.sinh(freqForT) +
                          dampedAngularFreq *
                              initialDelta *
                              Math.cosh(freqForT))) /
                      dampedAngularFreq);
          };
      }
      return {
          calculatedDuration: isResolvedFromDuration ? duration || null : null,
          next: (t) => {
              const current = resolveSpring(t);
              if (!isResolvedFromDuration) {
                  let currentVelocity = initialVelocity;
                  if (t !== 0) {
                      /**
                       * We only need to calculate velocity for under-damped springs
                       * as over- and critically-damped springs can't overshoot, so
                       * checking only for displacement is enough.
                       */
                      if (dampingRatio < 1) {
                          currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);
                      }
                      else {
                          currentVelocity = 0;
                      }
                  }
                  const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
                  const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
                  state.done =
                      isBelowVelocityThreshold && isBelowDisplacementThreshold;
              }
              else {
                  state.done = t >= duration;
              }
              state.value = state.done ? target : current;
              return state;
          },
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/generators/inertia.mjs
  
  
  
  function inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {
      const origin = keyframes[0];
      const state = {
          done: false,
          value: origin,
      };
      const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);
      const nearestBoundary = (v) => {
          if (min === undefined)
              return max;
          if (max === undefined)
              return min;
          return Math.abs(min - v) < Math.abs(max - v) ? min : max;
      };
      let amplitude = power * velocity;
      const ideal = origin + amplitude;
      const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);
      /**
       * If the target has changed we need to re-calculate the amplitude, otherwise
       * the animation will start from the wrong position.
       */
      if (target !== ideal)
          amplitude = target - origin;
      const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);
      const calcLatest = (t) => target + calcDelta(t);
      const applyFriction = (t) => {
          const delta = calcDelta(t);
          const latest = calcLatest(t);
          state.done = Math.abs(delta) <= restDelta;
          state.value = state.done ? target : latest;
      };
      /**
       * Ideally this would resolve for t in a stateless way, we could
       * do that by always precalculating the animation but as we know
       * this will be done anyway we can assume that spring will
       * be discovered during that.
       */
      let timeReachedBoundary;
      let spring$1;
      const checkCatchBoundary = (t) => {
          if (!isOutOfBounds(state.value))
              return;
          timeReachedBoundary = t;
          spring$1 = spring({
              keyframes: [state.value, nearestBoundary(state.value)],
              velocity: calcGeneratorVelocity(calcLatest, t, state.value),
              damping: bounceDamping,
              stiffness: bounceStiffness,
              restDelta,
              restSpeed,
          });
      };
      checkCatchBoundary(0);
      return {
          calculatedDuration: null,
          next: (t) => {
              /**
               * We need to resolve the friction to figure out if we need a
               * spring but we don't want to do this twice per frame. So here
               * we flag if we updated for this frame and later if we did
               * we can skip doing it again.
               */
              let hasUpdatedFrame = false;
              if (!spring$1 && timeReachedBoundary === undefined) {
                  hasUpdatedFrame = true;
                  applyFriction(t);
                  checkCatchBoundary(t);
              }
              /**
               * If we have a spring and the provided t is beyond the moment the friction
               * animation crossed the min/max boundary, use the spring.
               */
              if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {
                  return spring$1.next(t - timeReachedBoundary);
              }
              else {
                  !hasUpdatedFrame && applyFriction(t);
                  return state;
              }
          },
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs
  
  
  const frameloopDriver = (update) => {
      const passTimestamp = ({ timestamp }) => update(timestamp);
      return {
          start: () => frame_frame.update(passTimestamp, true),
          stop: () => cancelFrame(passTimestamp),
          /**
           * If we're processing this frame we can use the
           * framelocked timestamp to keep things in sync.
           */
          now: () => frameData.isProcessing ? frameData.timestamp : performance.now(),
      };
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs
  /**
   * Implement a practical max duration for keyframe generation
   * to prevent infinite loops
   */
  const maxGeneratorDuration = 20000;
  function calcGeneratorDuration(generator) {
      let duration = 0;
      const timeStep = 50;
      let state = generator.next(duration);
      while (!state.done && duration < maxGeneratorDuration) {
          duration += timeStep;
          state = generator.next(duration);
      }
      return duration >= maxGeneratorDuration ? Infinity : duration;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
  
  
  
  
  
  
  
  
  
  const types = {
      decay: inertia,
      inertia: inertia,
      tween: keyframes,
      keyframes: keyframes,
      spring: spring,
  };
  /**
   * Animate a single value on the main thread.
   *
   * This function is written, where functionality overlaps,
   * to be largely spec-compliant with WAAPI to allow fungibility
   * between the two.
   */
  function animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate, ...options }) {
      let speed = 1;
      let hasStopped = false;
      let resolveFinishedPromise;
      let currentFinishedPromise;
      /**
       * Resolve the current Promise every time we enter the
       * finished state. This is WAAPI-compatible behaviour.
       */
      const updateFinishedPromise = () => {
          currentFinishedPromise = new Promise((resolve) => {
              resolveFinishedPromise = resolve;
          });
      };
      // Create the first finished promise
      updateFinishedPromise();
      let animationDriver;
      const generatorFactory = types[type] || keyframes;
      /**
       * If this isn't the keyframes generator and we've been provided
       * strings as keyframes, we need to interpolate these.
       * TODO: Support velocity for units and complex value types/
       */
      let mapNumbersToKeyframes;
      if (generatorFactory !== keyframes &&
          typeof keyframes$1[0] !== "number") {
          mapNumbersToKeyframes = interpolate_interpolate([0, 100], keyframes$1, {
              clamp: false,
          });
          keyframes$1 = [0, 100];
      }
      const generator = generatorFactory({ ...options, keyframes: keyframes$1 });
      let mirroredGenerator;
      if (repeatType === "mirror") {
          mirroredGenerator = generatorFactory({
              ...options,
              keyframes: [...keyframes$1].reverse(),
              velocity: -(options.velocity || 0),
          });
      }
      let playState = "idle";
      let holdTime = null;
      let startTime = null;
      let cancelTime = null;
      /**
       * If duration is undefined and we have repeat options,
       * we need to calculate a duration from the generator.
       *
       * We set it to the generator itself to cache the duration.
       * Any timeline resolver will need to have already precalculated
       * the duration by this step.
       */
      if (generator.calculatedDuration === null && repeat) {
          generator.calculatedDuration = calcGeneratorDuration(generator);
      }
      const { calculatedDuration } = generator;
      let resolvedDuration = Infinity;
      let totalDuration = Infinity;
      if (calculatedDuration !== null) {
          resolvedDuration = calculatedDuration + repeatDelay;
          totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
      }
      let currentTime = 0;
      const tick = (timestamp) => {
          if (startTime === null)
              return;
          /**
           * requestAnimationFrame timestamps can come through as lower than
           * the startTime as set by performance.now(). Here we prevent this,
           * though in the future it could be possible to make setting startTime
           * a pending operation that gets resolved here.
           */
          if (speed > 0)
              startTime = Math.min(startTime, timestamp);
          if (speed < 0)
              startTime = Math.min(timestamp - totalDuration / speed, startTime);
          if (holdTime !== null) {
              currentTime = holdTime;
          }
          else {
              // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =
              // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for
              // example.
              currentTime = Math.round(timestamp - startTime) * speed;
          }
          // Rebase on delay
          const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);
          const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
          currentTime = Math.max(timeWithoutDelay, 0);
          /**
           * If this animation has finished, set the current time
           * to the total duration.
           */
          if (playState === "finished" && holdTime === null) {
              currentTime = totalDuration;
          }
          let elapsed = currentTime;
          let frameGenerator = generator;
          if (repeat) {
              /**
               * Get the current progress (0-1) of the animation. If t is >
               * than duration we'll get values like 2.5 (midway through the
               * third iteration)
               */
              const progress = currentTime / resolvedDuration;
              /**
               * Get the current iteration (0 indexed). For instance the floor of
               * 2.5 is 2.
               */
              let currentIteration = Math.floor(progress);
              /**
               * Get the current progress of the iteration by taking the remainder
               * so 2.5 is 0.5 through iteration 2
               */
              let iterationProgress = progress % 1.0;
              /**
               * If iteration progress is 1 we count that as the end
               * of the previous iteration.
               */
              if (!iterationProgress && progress >= 1) {
                  iterationProgress = 1;
              }
              iterationProgress === 1 && currentIteration--;
              currentIteration = Math.min(currentIteration, repeat + 1);
              /**
               * Reverse progress if we're not running in "normal" direction
               */
              const iterationIsOdd = Boolean(currentIteration % 2);
              if (iterationIsOdd) {
                  if (repeatType === "reverse") {
                      iterationProgress = 1 - iterationProgress;
                      if (repeatDelay) {
                          iterationProgress -= repeatDelay / resolvedDuration;
                      }
                  }
                  else if (repeatType === "mirror") {
                      frameGenerator = mirroredGenerator;
                  }
              }
              let p = clamp_clamp(0, 1, iterationProgress);
              if (currentTime > totalDuration) {
                  p = repeatType === "reverse" && iterationIsOdd ? 1 : 0;
              }
              elapsed = p * resolvedDuration;
          }
          /**
           * If we're in negative time, set state as the initial keyframe.
           * This prevents delay: x, duration: 0 animations from finishing
           * instantly.
           */
          const state = isInDelayPhase
              ? { done: false, value: keyframes$1[0] }
              : frameGenerator.next(elapsed);
          if (mapNumbersToKeyframes) {
              state.value = mapNumbersToKeyframes(state.value);
          }
          let { done } = state;
          if (!isInDelayPhase && calculatedDuration !== null) {
              done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;
          }
          const isAnimationFinished = holdTime === null &&
              (playState === "finished" || (playState === "running" && done));
          if (onUpdate) {
              onUpdate(state.value);
          }
          if (isAnimationFinished) {
              finish();
          }
          return state;
      };
      const stopAnimationDriver = () => {
          animationDriver && animationDriver.stop();
          animationDriver = undefined;
      };
      const cancel = () => {
          playState = "idle";
          stopAnimationDriver();
          resolveFinishedPromise();
          updateFinishedPromise();
          startTime = cancelTime = null;
      };
      const finish = () => {
          playState = "finished";
          onComplete && onComplete();
          stopAnimationDriver();
          resolveFinishedPromise();
      };
      const play = () => {
          if (hasStopped)
              return;
          if (!animationDriver)
              animationDriver = driver(tick);
          const now = animationDriver.now();
          onPlay && onPlay();
          if (holdTime !== null) {
              startTime = now - holdTime;
          }
          else if (!startTime || playState === "finished") {
              startTime = now;
          }
          if (playState === "finished") {
              updateFinishedPromise();
          }
          cancelTime = startTime;
          holdTime = null;
          /**
           * Set playState to running only after we've used it in
           * the previous logic.
           */
          playState = "running";
          animationDriver.start();
      };
      if (autoplay) {
          play();
      }
      const controls = {
          then(resolve, reject) {
              return currentFinishedPromise.then(resolve, reject);
          },
          get time() {
              return millisecondsToSeconds(currentTime);
          },
          set time(newTime) {
              newTime = secondsToMilliseconds(newTime);
              currentTime = newTime;
              if (holdTime !== null || !animationDriver || speed === 0) {
                  holdTime = newTime;
              }
              else {
                  startTime = animationDriver.now() - newTime / speed;
              }
          },
          get duration() {
              const duration = generator.calculatedDuration === null
                  ? calcGeneratorDuration(generator)
                  : generator.calculatedDuration;
              return millisecondsToSeconds(duration);
          },
          get speed() {
              return speed;
          },
          set speed(newSpeed) {
              if (newSpeed === speed || !animationDriver)
                  return;
              speed = newSpeed;
              controls.time = millisecondsToSeconds(currentTime);
          },
          get state() {
              return playState;
          },
          play,
          pause: () => {
              playState = "paused";
              holdTime = currentTime;
          },
          stop: () => {
              hasStopped = true;
              if (playState === "idle")
                  return;
              playState = "idle";
              onStop && onStop();
              cancel();
          },
          cancel: () => {
              if (cancelTime !== null)
                  tick(cancelTime);
              cancel();
          },
          complete: () => {
              playState = "finished";
          },
          sample: (elapsed) => {
              startTime = 0;
              return tick(elapsed);
          },
      };
      return controls;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/memo.mjs
  function memo(callback) {
      let result;
      return () => {
          if (result === undefined)
              result = callback();
          return result;
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
  
  
  
  
  
  
  
  
  
  const supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
  /**
   * A list of values that can be hardware-accelerated.
   */
  const acceleratedValues = new Set([
      "opacity",
      "clipPath",
      "filter",
      "transform",
      "backgroundColor",
  ]);
  /**
   * 10ms is chosen here as it strikes a balance between smooth
   * results (more than one keyframe per frame at 60fps) and
   * keyframe quantity.
   */
  const sampleDelta = 10; //ms
  /**
   * Implement a practical max duration for keyframe generation
   * to prevent infinite loops
   */
  const create_accelerated_animation_maxDuration = 20000;
  const requiresPregeneratedKeyframes = (valueName, options) => options.type === "spring" ||
      valueName === "backgroundColor" ||
      !isWaapiSupportedEasing(options.ease);
  function createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {
      const canAccelerateAnimation = supportsWaapi() &&
          acceleratedValues.has(valueName) &&
          !options.repeatDelay &&
          options.repeatType !== "mirror" &&
          options.damping !== 0 &&
          options.type !== "inertia";
      if (!canAccelerateAnimation)
          return false;
      /**
       * TODO: Unify with js/index
       */
      let hasStopped = false;
      let resolveFinishedPromise;
      let currentFinishedPromise;
      /**
       * Resolve the current Promise every time we enter the
       * finished state. This is WAAPI-compatible behaviour.
       */
      const updateFinishedPromise = () => {
          currentFinishedPromise = new Promise((resolve) => {
              resolveFinishedPromise = resolve;
          });
      };
      // Create the first finished promise
      updateFinishedPromise();
      let { keyframes, duration = 300, ease, times } = options;
      /**
       * If this animation needs pre-generated keyframes then generate.
       */
      if (requiresPregeneratedKeyframes(valueName, options)) {
          const sampleAnimation = animateValue({
              ...options,
              repeat: 0,
              delay: 0,
          });
          let state = { done: false, value: keyframes[0] };
          const pregeneratedKeyframes = [];
          /**
           * Bail after 20 seconds of pre-generated keyframes as it's likely
           * we're heading for an infinite loop.
           */
          let t = 0;
          while (!state.done && t < create_accelerated_animation_maxDuration) {
              state = sampleAnimation.sample(t);
              pregeneratedKeyframes.push(state.value);
              t += sampleDelta;
          }
          times = undefined;
          keyframes = pregeneratedKeyframes;
          duration = t - sampleDelta;
          ease = "linear";
      }
      const animation = animateStyle(value.owner.current, valueName, keyframes, {
          ...options,
          duration,
          /**
           * This function is currently not called if ease is provided
           * as a function so the cast is safe.
           *
           * However it would be possible for a future refinement to port
           * in easing pregeneration from Motion One for browsers that
           * support the upcoming `linear()` easing function.
           */
          ease: ease,
          times,
      });
      /**
       * WAAPI animations don't resolve startTime synchronously. But a blocked
       * thread could delay the startTime resolution by a noticeable amount.
       * For synching handoff animations with the new Motion animation we want
       * to ensure startTime is synchronously set.
       */
      if (options.syncStart) {
          animation.startTime = frameData.isProcessing
              ? frameData.timestamp
              : document.timeline
                  ? document.timeline.currentTime
                  : performance.now();
      }
      const cancelAnimation = () => animation.cancel();
      const safeCancel = () => {
          frame_frame.update(cancelAnimation);
          resolveFinishedPromise();
          updateFinishedPromise();
      };
      /**
       * Prefer the `onfinish` prop as it's more widely supported than
       * the `finished` promise.
       *
       * Here, we synchronously set the provided MotionValue to the end
       * keyframe. If we didn't, when the WAAPI animation is finished it would
       * be removed from the element which would then revert to its old styles.
       */
      animation.onfinish = () => {
          value.set(getFinalKeyframe(keyframes, options));
          onComplete && onComplete();
          safeCancel();
      };
      /**
       * Animation interrupt callback.
       */
      const controls = {
          then(resolve, reject) {
              return currentFinishedPromise.then(resolve, reject);
          },
          attachTimeline(timeline) {
              animation.timeline = timeline;
              animation.onfinish = null;
              return noop_noop;
          },
          get time() {
              return millisecondsToSeconds(animation.currentTime || 0);
          },
          set time(newTime) {
              animation.currentTime = secondsToMilliseconds(newTime);
          },
          get speed() {
              return animation.playbackRate;
          },
          set speed(newSpeed) {
              animation.playbackRate = newSpeed;
          },
          get duration() {
              return millisecondsToSeconds(duration);
          },
          play: () => {
              if (hasStopped)
                  return;
              animation.play();
              /**
               * Cancel any pending cancel tasks
               */
              cancelFrame(cancelAnimation);
          },
          pause: () => animation.pause(),
          stop: () => {
              hasStopped = true;
              if (animation.playState === "idle")
                  return;
              /**
               * WAAPI doesn't natively have any interruption capabilities.
               *
               * Rather than read commited styles back out of the DOM, we can
               * create a renderless JS animation and sample it twice to calculate
               * its current value, "previous" value, and therefore allow
               * Motion to calculate velocity for any subsequent animation.
               */
              const { currentTime } = animation;
              if (currentTime) {
                  const sampleAnimation = animateValue({
                      ...options,
                      autoplay: false,
                  });
                  value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
              }
              safeCancel();
          },
          complete: () => animation.finish(),
          cancel: safeCancel,
      };
      return controls;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/animators/instant.mjs
  
  
  
  function createInstantAnimation({ keyframes, delay, onUpdate, onComplete, }) {
      const setValue = () => {
          onUpdate && onUpdate(keyframes[keyframes.length - 1]);
          onComplete && onComplete();
          /**
           * TODO: As this API grows it could make sense to always return
           * animateValue. This will be a bigger project as animateValue
           * is frame-locked whereas this function resolves instantly.
           * This is a behavioural change and also has ramifications regarding
           * assumptions within tests.
           */
          return {
              time: 0,
              speed: 1,
              duration: 0,
              play: (noop_noop),
              pause: (noop_noop),
              stop: (noop_noop),
              then: (resolve) => {
                  resolve();
                  return Promise.resolve();
              },
              cancel: (noop_noop),
              complete: (noop_noop),
          };
      };
      return delay
          ? animateValue({
              keyframes: [0, 1],
              duration: 0,
              delay,
              onComplete: setValue,
          })
          : setValue();
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
  
  
  const underDampedSpring = {
      type: "spring",
      stiffness: 500,
      damping: 25,
      restSpeed: 10,
  };
  const criticallyDampedSpring = (target) => ({
      type: "spring",
      stiffness: 550,
      damping: target === 0 ? 2 * Math.sqrt(550) : 30,
      restSpeed: 10,
  });
  const keyframesTransition = {
      type: "keyframes",
      duration: 0.8,
  };
  /**
   * Default easing curve is a slightly shallower version of
   * the default browser easing curve.
   */
  const ease = {
      type: "keyframes",
      ease: [0.25, 0.1, 0.35, 1],
      duration: 0.3,
  };
  const getDefaultTransition = (valueKey, { keyframes }) => {
      if (keyframes.length > 2) {
          return keyframesTransition;
      }
      else if (transformProps.has(valueKey)) {
          return valueKey.startsWith("scale")
              ? criticallyDampedSpring(keyframes[1])
              : underDampedSpring;
      }
      return ease;
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
  
  
  /**
   * Check if a value is animatable. Examples:
   *
   * ✅: 100, "100px", "#fff"
   * ❌: "block", "url(2.jpg)"
   * @param value
   *
   * @internal
   */
  const isAnimatable = (key, value) => {
      // If the list of keys tat might be non-animatable grows, replace with Set
      if (key === "zIndex")
          return false;
      // If it's a number or a keyframes array, we can animate it. We might at some point
      // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,
      // but for now lets leave it like this for performance reasons
      if (typeof value === "number" || Array.isArray(value))
          return true;
      if (typeof value === "string" && // It's animatable if we have a string
          (complex.test(value) || value === "0") && // And it contains numbers and/or colors
          !value.startsWith("url(") // Unless it starts with "url("
      ) {
          return true;
      }
      return false;
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs
  
  
  
  /**
   * Properties that should default to 1 or 100%
   */
  const maxDefaults = new Set(["brightness", "contrast", "saturate", "opacity"]);
  function applyDefaultFilter(v) {
      const [name, value] = v.slice(0, -1).split("(");
      if (name === "drop-shadow")
          return v;
      const [number] = value.match(floatRegex) || [];
      if (!number)
          return v;
      const unit = value.replace(number, "");
      let defaultValue = maxDefaults.has(name) ? 1 : 0;
      if (number !== value)
          defaultValue *= 100;
      return name + "(" + defaultValue + unit + ")";
  }
  const functionRegex = /([a-z-]*)\(.*?\)/g;
  const filter = {
      ...complex,
      getAnimatableNone: (v) => {
          const functions = v.match(functionRegex);
          return functions ? functions.map(applyDefaultFilter).join(" ") : v;
      },
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
  
  
  
  
  /**
   * A map of default value types for common values
   */
  const defaultValueTypes = {
      ...numberValueTypes,
      // Color props
      color: color,
      backgroundColor: color,
      outlineColor: color,
      fill: color,
      stroke: color,
      // Border props
      borderColor: color,
      borderTopColor: color,
      borderRightColor: color,
      borderBottomColor: color,
      borderLeftColor: color,
      filter: filter,
      WebkitFilter: filter,
  };
  /**
   * Gets the default ValueType for the provided value key
   */
  const getDefaultValueType = (key) => defaultValueTypes[key];
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
  
  
  
  
  function animatable_none_getAnimatableNone(key, value) {
      let defaultValueType = getDefaultValueType(key);
      if (defaultValueType !== filter)
          defaultValueType = complex;
      // If value is not recognised as animatable, ie "none", create an animatable version origin based on the target
      return defaultValueType.getAnimatableNone
          ? defaultValueType.getAnimatableNone(value)
          : undefined;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
  /**
   * Check if the value is a zero value string like "0px" or "0%"
   */
  const isZeroValueString = (v) => /^0[^.\s]+$/.test(v);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/utils/is-none.mjs
  
  
  function isNone(value) {
      if (typeof value === "number") {
          return value === 0;
      }
      else if (value !== null) {
          return value === "none" || value === "0" || isZeroValueString(value);
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
  
  
  
  
  function getKeyframes(value, valueName, target, transition) {
      const isTargetAnimatable = isAnimatable(valueName, target);
      let keyframes;
      if (Array.isArray(target)) {
          keyframes = [...target];
      }
      else {
          keyframes = [null, target];
      }
      const defaultOrigin = transition.from !== undefined ? transition.from : value.get();
      let animatableTemplateValue = undefined;
      const noneKeyframeIndexes = [];
      for (let i = 0; i < keyframes.length; i++) {
          /**
           * Fill null/wildcard keyframes
           */
          if (keyframes[i] === null) {
              keyframes[i] = i === 0 ? defaultOrigin : keyframes[i - 1];
          }
          if (isNone(keyframes[i])) {
              noneKeyframeIndexes.push(i);
          }
          // TODO: Clean this conditional, it works for now
          if (typeof keyframes[i] === "string" &&
              keyframes[i] !== "none" &&
              keyframes[i] !== "0") {
              animatableTemplateValue = keyframes[i];
          }
      }
      if (isTargetAnimatable &&
          noneKeyframeIndexes.length &&
          animatableTemplateValue) {
          for (let i = 0; i < noneKeyframeIndexes.length; i++) {
              const index = noneKeyframeIndexes[i];
              keyframes[index] = animatable_none_getAnimatableNone(valueName, animatableTemplateValue);
          }
      }
      return keyframes;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
  /**
   * Decide whether a transition is defined on a given Transition.
   * This filters out orchestration options and returns true
   * if any options are left.
   */
  function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {
      return !!Object.keys(transition).length;
  }
  function getValueTransition(transition, key) {
      return transition[key] || transition["default"] || transition;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
  
  
  
  
  
  
  
  
  
  
  
  const animateMotionValue = (valueName, value, target, transition = {}) => {
      return (onComplete) => {
          const valueTransition = getValueTransition(transition, valueName) || {};
          /**
           * Most transition values are currently completely overwritten by value-specific
           * transitions. In the future it'd be nicer to blend these transitions. But for now
           * delay actually does inherit from the root transition if not value-specific.
           */
          const delay = valueTransition.delay || transition.delay || 0;
          /**
           * Elapsed isn't a public transition option but can be passed through from
           * optimized appear effects in milliseconds.
           */
          let { elapsed = 0 } = transition;
          elapsed = elapsed - secondsToMilliseconds(delay);
          const keyframes = getKeyframes(value, valueName, target, valueTransition);
          /**
           * Check if we're able to animate between the start and end keyframes,
           * and throw a warning if we're attempting to animate between one that's
           * animatable and another that isn't.
           */
          const originKeyframe = keyframes[0];
          const targetKeyframe = keyframes[keyframes.length - 1];
          const isOriginAnimatable = isAnimatable(valueName, originKeyframe);
          const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);
          warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
          let options = {
              keyframes,
              velocity: value.getVelocity(),
              ease: "easeOut",
              ...valueTransition,
              delay: -elapsed,
              onUpdate: (v) => {
                  value.set(v);
                  valueTransition.onUpdate && valueTransition.onUpdate(v);
              },
              onComplete: () => {
                  onComplete();
                  valueTransition.onComplete && valueTransition.onComplete();
              },
          };
          /**
           * If there's no transition defined for this value, we can generate
           * unqiue transition settings for this value.
           */
          if (!isTransitionDefined(valueTransition)) {
              options = {
                  ...options,
                  ...getDefaultTransition(valueName, options),
              };
          }
          /**
           * Both WAAPI and our internal animation functions use durations
           * as defined by milliseconds, while our external API defines them
           * as seconds.
           */
          if (options.duration) {
              options.duration = secondsToMilliseconds(options.duration);
          }
          if (options.repeatDelay) {
              options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
          }
          if (!isOriginAnimatable ||
              !isTargetAnimatable ||
              instantAnimationState.current ||
              valueTransition.type === false) {
              /**
               * If we can't animate this value, or the global instant animation flag is set,
               * or this is simply defined as an instant transition, return an instant transition.
               */
              return createInstantAnimation(instantAnimationState.current
                  ? { ...options, delay: 0 }
                  : options);
          }
          /**
           * Animate via WAAPI if possible.
           */
          if (value.owner &&
              value.owner.current instanceof HTMLElement &&
              !value.owner.getProps().onUpdate) {
              const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);
              if (acceleratedAnimation)
                  return acceleratedAnimation;
          }
          /**
           * If we didn't create an accelerated animation, create a JS animation
           */
          return animateValue(options);
      };
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs
  
  
  function isWillChangeMotionValue(value) {
      return Boolean(isMotionValue(value) && value.add);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
  /**
   * Check if value is a numerical string, ie a string that is purely a number eg "100" or "-100.1"
   */
  const isNumericalString = (v) => /^\-?\d*\.?\d+$/.test(v);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/array.mjs
  function addUniqueItem(arr, item) {
      if (arr.indexOf(item) === -1)
          arr.push(item);
  }
  function removeItem(arr, item) {
      const index = arr.indexOf(item);
      if (index > -1)
          arr.splice(index, 1);
  }
  // Adapted from array-move
  function moveItem([...arr], fromIndex, toIndex) {
      const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
      if (startIndex >= 0 && startIndex < arr.length) {
          const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
          const [item] = arr.splice(fromIndex, 1);
          arr.splice(endIndex, 0, item);
      }
      return arr;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
  
  
  class SubscriptionManager {
      constructor() {
          this.subscriptions = [];
      }
      add(handler) {
          addUniqueItem(this.subscriptions, handler);
          return () => removeItem(this.subscriptions, handler);
      }
      notify(a, b, c) {
          const numSubscriptions = this.subscriptions.length;
          if (!numSubscriptions)
              return;
          if (numSubscriptions === 1) {
              /**
               * If there's only a single handler we can just call it without invoking a loop.
               */
              this.subscriptions[0](a, b, c);
          }
          else {
              for (let i = 0; i < numSubscriptions; i++) {
                  /**
                   * Check whether the handler exists before firing as it's possible
                   * the subscriptions were modified during this loop running.
                   */
                  const handler = this.subscriptions[i];
                  handler && handler(a, b, c);
              }
          }
      }
      getSize() {
          return this.subscriptions.length;
      }
      clear() {
          this.subscriptions.length = 0;
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/value/index.mjs
  
  
  
  
  
  const isFloat = (value) => {
      return !isNaN(parseFloat(value));
  };
  const collectMotionValues = {
      current: undefined,
  };
  /**
   * `MotionValue` is used to track the state and velocity of motion values.
   *
   * @public
   */
  class MotionValue {
      /**
       * @param init - The initiating value
       * @param config - Optional configuration options
       *
       * -  `transformer`: A function to transform incoming values with.
       *
       * @internal
       */
      constructor(init, options = {}) {
          /**
           * This will be replaced by the build step with the latest version number.
           * When MotionValues are provided to motion components, warn if versions are mixed.
           */
          this.version = "10.16.4";
          /**
           * Duration, in milliseconds, since last updating frame.
           *
           * @internal
           */
          this.timeDelta = 0;
          /**
           * Timestamp of the last time this `MotionValue` was updated.
           *
           * @internal
           */
          this.lastUpdated = 0;
          /**
           * Tracks whether this value can output a velocity. Currently this is only true
           * if the value is numerical, but we might be able to widen the scope here and support
           * other value types.
           *
           * @internal
           */
          this.canTrackVelocity = false;
          /**
           * An object containing a SubscriptionManager for each active event.
           */
          this.events = {};
          this.updateAndNotify = (v, render = true) => {
              this.prev = this.current;
              this.current = v;
              // Update timestamp
              const { delta, timestamp } = frameData;
              if (this.lastUpdated !== timestamp) {
                  this.timeDelta = delta;
                  this.lastUpdated = timestamp;
                  frame_frame.postRender(this.scheduleVelocityCheck);
              }
              // Update update subscribers
              if (this.prev !== this.current && this.events.change) {
                  this.events.change.notify(this.current);
              }
              // Update velocity subscribers
              if (this.events.velocityChange) {
                  this.events.velocityChange.notify(this.getVelocity());
              }
              // Update render subscribers
              if (render && this.events.renderRequest) {
                  this.events.renderRequest.notify(this.current);
              }
          };
          /**
           * Schedule a velocity check for the next frame.
           *
           * This is an instanced and bound function to prevent generating a new
           * function once per frame.
           *
           * @internal
           */
          this.scheduleVelocityCheck = () => frame_frame.postRender(this.velocityCheck);
          /**
           * Updates `prev` with `current` if the value hasn't been updated this frame.
           * This ensures velocity calculations return `0`.
           *
           * This is an instanced and bound function to prevent generating a new
           * function once per frame.
           *
           * @internal
           */
          this.velocityCheck = ({ timestamp }) => {
              if (timestamp !== this.lastUpdated) {
                  this.prev = this.current;
                  if (this.events.velocityChange) {
                      this.events.velocityChange.notify(this.getVelocity());
                  }
              }
          };
          this.hasAnimated = false;
          this.prev = this.current = init;
          this.canTrackVelocity = isFloat(this.current);
          this.owner = options.owner;
      }
      /**
       * Adds a function that will be notified when the `MotionValue` is updated.
       *
       * It returns a function that, when called, will cancel the subscription.
       *
       * When calling `onChange` inside a React component, it should be wrapped with the
       * `useEffect` hook. As it returns an unsubscribe function, this should be returned
       * from the `useEffect` function to ensure you don't add duplicate subscribers..
       *
       * ```jsx
       * export const MyComponent = () => {
       *   const x = useMotionValue(0)
       *   const y = useMotionValue(0)
       *   const opacity = useMotionValue(1)
       *
       *   useEffect(() => {
       *     function updateOpacity() {
       *       const maxXY = Math.max(x.get(), y.get())
       *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
       *       opacity.set(newOpacity)
       *     }
       *
       *     const unsubscribeX = x.on("change", updateOpacity)
       *     const unsubscribeY = y.on("change", updateOpacity)
       *
       *     return () => {
       *       unsubscribeX()
       *       unsubscribeY()
       *     }
       *   }, [])
       *
       *   return <motion.div style={{ x }} />
       * }
       * ```
       *
       * @param subscriber - A function that receives the latest value.
       * @returns A function that, when called, will cancel this subscription.
       *
       * @deprecated
       */
      onChange(subscription) {
          if (false) {}
          return this.on("change", subscription);
      }
      on(eventName, callback) {
          if (!this.events[eventName]) {
              this.events[eventName] = new SubscriptionManager();
          }
          const unsubscribe = this.events[eventName].add(callback);
          if (eventName === "change") {
              return () => {
                  unsubscribe();
                  /**
                   * If we have no more change listeners by the start
                   * of the next frame, stop active animations.
                   */
                  frame_frame.read(() => {
                      if (!this.events.change.getSize()) {
                          this.stop();
                      }
                  });
              };
          }
          return unsubscribe;
      }
      clearListeners() {
          for (const eventManagers in this.events) {
              this.events[eventManagers].clear();
          }
      }
      /**
       * Attaches a passive effect to the `MotionValue`.
       *
       * @internal
       */
      attach(passiveEffect, stopPassiveEffect) {
          this.passiveEffect = passiveEffect;
          this.stopPassiveEffect = stopPassiveEffect;
      }
      /**
       * Sets the state of the `MotionValue`.
       *
       * @remarks
       *
       * ```jsx
       * const x = useMotionValue(0)
       * x.set(10)
       * ```
       *
       * @param latest - Latest value to set.
       * @param render - Whether to notify render subscribers. Defaults to `true`
       *
       * @public
       */
      set(v, render = true) {
          if (!render || !this.passiveEffect) {
              this.updateAndNotify(v, render);
          }
          else {
              this.passiveEffect(v, this.updateAndNotify);
          }
      }
      setWithVelocity(prev, current, delta) {
          this.set(current);
          this.prev = prev;
          this.timeDelta = delta;
      }
      /**
       * Set the state of the `MotionValue`, stopping any active animations,
       * effects, and resets velocity to `0`.
       */
      jump(v) {
          this.updateAndNotify(v);
          this.prev = v;
          this.stop();
          if (this.stopPassiveEffect)
              this.stopPassiveEffect();
      }
      /**
       * Returns the latest state of `MotionValue`
       *
       * @returns - The latest state of `MotionValue`
       *
       * @public
       */
      get() {
          if (collectMotionValues.current) {
              collectMotionValues.current.push(this);
          }
          return this.current;
      }
      /**
       * @public
       */
      getPrevious() {
          return this.prev;
      }
      /**
       * Returns the latest velocity of `MotionValue`
       *
       * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
       *
       * @public
       */
      getVelocity() {
          // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful
          return this.canTrackVelocity
              ? // These casts could be avoided if parseFloat would be typed better
                  velocityPerSecond(parseFloat(this.current) -
                      parseFloat(this.prev), this.timeDelta)
              : 0;
      }
      /**
       * Registers a new animation to control this `MotionValue`. Only one
       * animation can drive a `MotionValue` at one time.
       *
       * ```jsx
       * value.start()
       * ```
       *
       * @param animation - A function that starts the provided animation
       *
       * @internal
       */
      start(startAnimation) {
          this.stop();
          return new Promise((resolve) => {
              this.hasAnimated = true;
              this.animation = startAnimation(resolve);
              if (this.events.animationStart) {
                  this.events.animationStart.notify();
              }
          }).then(() => {
              if (this.events.animationComplete) {
                  this.events.animationComplete.notify();
              }
              this.clearAnimation();
          });
      }
      /**
       * Stop the currently active animation.
       *
       * @public
       */
      stop() {
          if (this.animation) {
              this.animation.stop();
              if (this.events.animationCancel) {
                  this.events.animationCancel.notify();
              }
          }
          this.clearAnimation();
      }
      /**
       * Returns `true` if this value is currently animating.
       *
       * @public
       */
      isAnimating() {
          return !!this.animation;
      }
      clearAnimation() {
          delete this.animation;
      }
      /**
       * Destroy and clean up subscribers to this `MotionValue`.
       *
       * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
       * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
       * created a `MotionValue` via the `motionValue` function.
       *
       * @public
       */
      destroy() {
          this.clearListeners();
          this.stop();
          if (this.stopPassiveEffect) {
              this.stopPassiveEffect();
          }
      }
  }
  function motionValue(init, options) {
      return new MotionValue(init, options);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
  /**
   * Tests a provided value against a ValueType
   */
  const testValueType = (v) => (type) => type.test(v);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
  /**
   * ValueType for "auto"
   */
  const auto = {
      test: (v) => v === "auto",
      parse: (v) => v,
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
  
  
  
  
  
  /**
   * A list of value types commonly used for dimensions
   */
  const dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
  /**
   * Tests a dimensional value against the list of dimension ValueTypes
   */
  const findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
  
  
  
  
  
  /**
   * A list of all ValueTypes
   */
  const valueTypes = [...dimensionValueTypes, color, complex];
  /**
   * Tests a value against the list of ValueTypes
   */
  const findValueType = (v) => valueTypes.find(testValueType(v));
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/setters.mjs
  
  
  
  
  
  
  
  
  
  /**
   * Set VisualElement's MotionValue, creating a new MotionValue for it if
   * it doesn't exist.
   */
  function setMotionValue(visualElement, key, value) {
      if (visualElement.hasValue(key)) {
          visualElement.getValue(key).set(value);
      }
      else {
          visualElement.addValue(key, motionValue(value));
      }
  }
  function setTarget(visualElement, definition) {
      const resolved = resolveVariant(visualElement, definition);
      let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};
      target = { ...target, ...transitionEnd };
      for (const key in target) {
          const value = resolveFinalValueInKeyframes(target[key]);
          setMotionValue(visualElement, key, value);
      }
  }
  function setVariants(visualElement, variantLabels) {
      const reversedLabels = [...variantLabels].reverse();
      reversedLabels.forEach((key) => {
          const variant = visualElement.getVariant(key);
          variant && setTarget(visualElement, variant);
          if (visualElement.variantChildren) {
              visualElement.variantChildren.forEach((child) => {
                  setVariants(child, variantLabels);
              });
          }
      });
  }
  function setValues(visualElement, definition) {
      if (Array.isArray(definition)) {
          return setVariants(visualElement, definition);
      }
      else if (typeof definition === "string") {
          return setVariants(visualElement, [definition]);
      }
      else {
          setTarget(visualElement, definition);
      }
  }
  function checkTargetForNewValues(visualElement, target, origin) {
      var _a, _b;
      const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));
      const numNewValues = newValueKeys.length;
      if (!numNewValues)
          return;
      for (let i = 0; i < numNewValues; i++) {
          const key = newValueKeys[i];
          const targetValue = target[key];
          let value = null;
          /**
           * If the target is a series of keyframes, we can use the first value
           * in the array. If this first value is null, we'll still need to read from the DOM.
           */
          if (Array.isArray(targetValue)) {
              value = targetValue[0];
          }
          /**
           * If the target isn't keyframes, or the first keyframe was null, we need to
           * first check if an origin value was explicitly defined in the transition as "from",
           * if not read the value from the DOM. As an absolute fallback, take the defined target value.
           */
          if (value === null) {
              value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
          }
          /**
           * If value is still undefined or null, ignore it. Preferably this would throw,
           * but this was causing issues in Framer.
           */
          if (value === undefined || value === null)
              continue;
          if (typeof value === "string" &&
              (isNumericalString(value) || isZeroValueString(value))) {
              // If this is a number read as a string, ie "0" or "200", convert it to a number
              value = parseFloat(value);
          }
          else if (!findValueType(value) && complex.test(targetValue)) {
              value = animatable_none_getAnimatableNone(key, targetValue);
          }
          visualElement.addValue(key, motionValue(value, { owner: visualElement }));
          if (origin[key] === undefined) {
              origin[key] = value;
          }
          if (value !== null)
              visualElement.setBaseTarget(key, value);
      }
  }
  function getOriginFromTransition(key, transition) {
      if (!transition)
          return;
      const valueTransition = transition[key] || transition["default"] || transition;
      return valueTransition.from;
  }
  function getOrigin(target, transition, visualElement) {
      const origin = {};
      for (const key in target) {
          const transitionOrigin = getOriginFromTransition(key, transition);
          if (transitionOrigin !== undefined) {
              origin[key] = transitionOrigin;
          }
          else {
              const value = visualElement.getValue(key);
              if (value) {
                  origin[key] = value.get();
              }
          }
      }
      return origin;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
  
  
  
  
  
  
  
  /**
   * Decide whether we should block this animation. Previously, we achieved this
   * just by checking whether the key was listed in protectedKeys, but this
   * posed problems if an animation was triggered by afterChildren and protectedKeys
   * had been set to true in the meantime.
   */
  function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
      const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
      needsAnimating[key] = false;
      return shouldBlock;
  }
  function animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {
      let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);
      const willChange = visualElement.getValue("willChange");
      if (transitionOverride)
          transition = transitionOverride;
      const animations = [];
      const animationTypeState = type &&
          visualElement.animationState &&
          visualElement.animationState.getState()[type];
      for (const key in target) {
          const value = visualElement.getValue(key);
          const valueTarget = target[key];
          if (!value ||
              valueTarget === undefined ||
              (animationTypeState &&
                  shouldBlockAnimation(animationTypeState, key))) {
              continue;
          }
          const valueTransition = {
              delay,
              elapsed: 0,
              ...transition,
          };
          /**
           * If this is the first time a value is being animated, check
           * to see if we're handling off from an existing animation.
           */
          if (window.HandoffAppearAnimations && !value.hasAnimated) {
              const appearId = visualElement.getProps()[optimizedAppearDataAttribute];
              if (appearId) {
                  valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame_frame);
                  valueTransition.syncStart = true;
              }
          }
          value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)
              ? { type: false }
              : valueTransition));
          const animation = value.animation;
          if (isWillChangeMotionValue(willChange)) {
              willChange.add(key);
              animation.then(() => willChange.remove(key));
          }
          animations.push(animation);
      }
      if (transitionEnd) {
          Promise.all(animations).then(() => {
              transitionEnd && setTarget(visualElement, transitionEnd);
          });
      }
      return animations;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs
  
  
  
  function animateVariant(visualElement, variant, options = {}) {
      const resolved = resolveVariant(visualElement, variant, options.custom);
      let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
      if (options.transitionOverride) {
          transition = options.transitionOverride;
      }
      /**
       * If we have a variant, create a callback that runs it as an animation.
       * Otherwise, we resolve a Promise immediately for a composable no-op.
       */
      const getAnimation = resolved
          ? () => Promise.all(animateTarget(visualElement, resolved, options))
          : () => Promise.resolve();
      /**
       * If we have children, create a callback that runs all their animations.
       * Otherwise, we resolve a Promise immediately for a composable no-op.
       */
      const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size
          ? (forwardDelay = 0) => {
              const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;
              return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
          }
          : () => Promise.resolve();
      /**
       * If the transition explicitly defines a "when" option, we need to resolve either
       * this animation or all children animations before playing the other.
       */
      const { when } = transition;
      if (when) {
          const [first, last] = when === "beforeChildren"
              ? [getAnimation, getChildAnimations]
              : [getChildAnimations, getAnimation];
          return first().then(() => last());
      }
      else {
          return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
      }
  }
  function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
      const animations = [];
      const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
      const generateStaggerDuration = staggerDirection === 1
          ? (i = 0) => i * staggerChildren
          : (i = 0) => maxStaggerDuration - i * staggerChildren;
      Array.from(visualElement.variantChildren)
          .sort(sortByTreeOrder)
          .forEach((child, i) => {
          child.notify("AnimationStart", variant);
          animations.push(animateVariant(child, variant, {
              ...options,
              delay: delayChildren + generateStaggerDuration(i),
          }).then(() => child.notify("AnimationComplete", variant)));
      });
      return Promise.all(animations);
  }
  function sortByTreeOrder(a, b) {
      return a.sortNodePosition(b);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
  
  
  
  
  function animateVisualElement(visualElement, definition, options = {}) {
      visualElement.notify("AnimationStart", definition);
      let animation;
      if (Array.isArray(definition)) {
          const animations = definition.map((variant) => animateVariant(visualElement, variant, options));
          animation = Promise.all(animations);
      }
      else if (typeof definition === "string") {
          animation = animateVariant(visualElement, definition, options);
      }
      else {
          const resolvedDefinition = typeof definition === "function"
              ? resolveVariant(visualElement, definition, options.custom)
              : definition;
          animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
      }
      return animation.then(() => visualElement.notify("AnimationComplete", definition));
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
  
  
  
  
  
  
  
  
  const reversePriorityOrder = [...variantPriorityOrder].reverse();
  const numAnimationTypes = variantPriorityOrder.length;
  function animateList(visualElement) {
      return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
  }
  function createAnimationState(visualElement) {
      let animate = animateList(visualElement);
      const state = createState();
      let isInitialRender = true;
      /**
       * This function will be used to reduce the animation definitions for
       * each active animation type into an object of resolved values for it.
       */
      const buildResolvedTypeValues = (acc, definition) => {
          const resolved = resolveVariant(visualElement, definition);
          if (resolved) {
              const { transition, transitionEnd, ...target } = resolved;
              acc = { ...acc, ...target, ...transitionEnd };
          }
          return acc;
      };
      /**
       * This just allows us to inject mocked animation functions
       * @internal
       */
      function setAnimateFunction(makeAnimator) {
          animate = makeAnimator(visualElement);
      }
      /**
       * When we receive new props, we need to:
       * 1. Create a list of protected keys for each type. This is a directory of
       *    value keys that are currently being "handled" by types of a higher priority
       *    so that whenever an animation is played of a given type, these values are
       *    protected from being animated.
       * 2. Determine if an animation type needs animating.
       * 3. Determine if any values have been removed from a type and figure out
       *    what to animate those to.
       */
      function animateChanges(options, changedActiveType) {
          const props = visualElement.getProps();
          const context = visualElement.getVariantContext(true) || {};
          /**
           * A list of animations that we'll build into as we iterate through the animation
           * types. This will get executed at the end of the function.
           */
          const animations = [];
          /**
           * Keep track of which values have been removed. Then, as we hit lower priority
           * animation types, we can check if they contain removed values and animate to that.
           */
          const removedKeys = new Set();
          /**
           * A dictionary of all encountered keys. This is an object to let us build into and
           * copy it without iteration. Each time we hit an animation type we set its protected
           * keys - the keys its not allowed to animate - to the latest version of this object.
           */
          let encounteredKeys = {};
          /**
           * If a variant has been removed at a given index, and this component is controlling
           * variant animations, we want to ensure lower-priority variants are forced to animate.
           */
          let removedVariantIndex = Infinity;
          /**
           * Iterate through all animation types in reverse priority order. For each, we want to
           * detect which values it's handling and whether or not they've changed (and therefore
           * need to be animated). If any values have been removed, we want to detect those in
           * lower priority props and flag for animation.
           */
          for (let i = 0; i < numAnimationTypes; i++) {
              const type = reversePriorityOrder[i];
              const typeState = state[type];
              const prop = props[type] !== undefined ? props[type] : context[type];
              const propIsVariant = isVariantLabel(prop);
              /**
               * If this type has *just* changed isActive status, set activeDelta
               * to that status. Otherwise set to null.
               */
              const activeDelta = type === changedActiveType ? typeState.isActive : null;
              if (activeDelta === false)
                  removedVariantIndex = i;
              /**
               * If this prop is an inherited variant, rather than been set directly on the
               * component itself, we want to make sure we allow the parent to trigger animations.
               *
               * TODO: Can probably change this to a !isControllingVariants check
               */
              let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
              /**
               *
               */
              if (isInherited &&
                  isInitialRender &&
                  visualElement.manuallyAnimateOnMount) {
                  isInherited = false;
              }
              /**
               * Set all encountered keys so far as the protected keys for this type. This will
               * be any key that has been animated or otherwise handled by active, higher-priortiy types.
               */
              typeState.protectedKeys = { ...encounteredKeys };
              // Check if we can skip analysing this prop early
              if (
              // If it isn't active and hasn't *just* been set as inactive
              (!typeState.isActive && activeDelta === null) ||
                  // If we didn't and don't have any defined prop for this animation type
                  (!prop && !typeState.prevProp) ||
                  // Or if the prop doesn't define an animation
                  isAnimationControls(prop) ||
                  typeof prop === "boolean") {
                  continue;
              }
              /**
               * As we go look through the values defined on this type, if we detect
               * a changed value or a value that was removed in a higher priority, we set
               * this to true and add this prop to the animation list.
               */
              const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
              let shouldAnimateType = variantDidChange ||
                  // If we're making this variant active, we want to always make it active
                  (type === changedActiveType &&
                      typeState.isActive &&
                      !isInherited &&
                      propIsVariant) ||
                  // If we removed a higher-priority variant (i is in reverse order)
                  (i > removedVariantIndex && propIsVariant);
              /**
               * As animations can be set as variant lists, variants or target objects, we
               * coerce everything to an array if it isn't one already
               */
              const definitionList = Array.isArray(prop) ? prop : [prop];
              /**
               * Build an object of all the resolved values. We'll use this in the subsequent
               * animateChanges calls to determine whether a value has changed.
               */
              let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
              if (activeDelta === false)
                  resolvedValues = {};
              /**
               * Now we need to loop through all the keys in the prev prop and this prop,
               * and decide:
               * 1. If the value has changed, and needs animating
               * 2. If it has been removed, and needs adding to the removedKeys set
               * 3. If it has been removed in a higher priority type and needs animating
               * 4. If it hasn't been removed in a higher priority but hasn't changed, and
               *    needs adding to the type's protectedKeys list.
               */
              const { prevResolvedValues = {} } = typeState;
              const allKeys = {
                  ...prevResolvedValues,
                  ...resolvedValues,
              };
              const markToAnimate = (key) => {
                  shouldAnimateType = true;
                  removedKeys.delete(key);
                  typeState.needsAnimating[key] = true;
              };
              for (const key in allKeys) {
                  const next = resolvedValues[key];
                  const prev = prevResolvedValues[key];
                  // If we've already handled this we can just skip ahead
                  if (encounteredKeys.hasOwnProperty(key))
                      continue;
                  /**
                   * If the value has changed, we probably want to animate it.
                   */
                  if (next !== prev) {
                      /**
                       * If both values are keyframes, we need to shallow compare them to
                       * detect whether any value has changed. If it has, we animate it.
                       */
                      if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
                          if (!shallowCompare(next, prev) || variantDidChange) {
                              markToAnimate(key);
                          }
                          else {
                              /**
                               * If it hasn't changed, we want to ensure it doesn't animate by
                               * adding it to the list of protected keys.
                               */
                              typeState.protectedKeys[key] = true;
                          }
                      }
                      else if (next !== undefined) {
                          // If next is defined and doesn't equal prev, it needs animating
                          markToAnimate(key);
                      }
                      else {
                          // If it's undefined, it's been removed.
                          removedKeys.add(key);
                      }
                  }
                  else if (next !== undefined && removedKeys.has(key)) {
                      /**
                       * If next hasn't changed and it isn't undefined, we want to check if it's
                       * been removed by a higher priority
                       */
                      markToAnimate(key);
                  }
                  else {
                      /**
                       * If it hasn't changed, we add it to the list of protected values
                       * to ensure it doesn't get animated.
                       */
                      typeState.protectedKeys[key] = true;
                  }
              }
              /**
               * Update the typeState so next time animateChanges is called we can compare the
               * latest prop and resolvedValues to these.
               */
              typeState.prevProp = prop;
              typeState.prevResolvedValues = resolvedValues;
              /**
               *
               */
              if (typeState.isActive) {
                  encounteredKeys = { ...encounteredKeys, ...resolvedValues };
              }
              if (isInitialRender && visualElement.blockInitialAnimation) {
                  shouldAnimateType = false;
              }
              /**
               * If this is an inherited prop we want to hard-block animations
               * TODO: Test as this should probably still handle animations triggered
               * by removed values?
               */
              if (shouldAnimateType && !isInherited) {
                  animations.push(...definitionList.map((animation) => ({
                      animation: animation,
                      options: { type, ...options },
                  })));
              }
          }
          /**
           * If there are some removed value that haven't been dealt with,
           * we need to create a new animation that falls back either to the value
           * defined in the style prop, or the last read value.
           */
          if (removedKeys.size) {
              const fallbackAnimation = {};
              removedKeys.forEach((key) => {
                  const fallbackTarget = visualElement.getBaseTarget(key);
                  if (fallbackTarget !== undefined) {
                      fallbackAnimation[key] = fallbackTarget;
                  }
              });
              animations.push({ animation: fallbackAnimation });
          }
          let shouldAnimate = Boolean(animations.length);
          if (isInitialRender &&
              props.initial === false &&
              !visualElement.manuallyAnimateOnMount) {
              shouldAnimate = false;
          }
          isInitialRender = false;
          return shouldAnimate ? animate(animations) : Promise.resolve();
      }
      /**
       * Change whether a certain animation type is active.
       */
      function setActive(type, isActive, options) {
          var _a;
          // If the active state hasn't changed, we can safely do nothing here
          if (state[type].isActive === isActive)
              return Promise.resolve();
          // Propagate active change to children
          (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });
          state[type].isActive = isActive;
          const animations = animateChanges(options, type);
          for (const key in state) {
              state[key].protectedKeys = {};
          }
          return animations;
      }
      return {
          animateChanges,
          setActive,
          setAnimateFunction,
          getState: () => state,
      };
  }
  function checkVariantsDidChange(prev, next) {
      if (typeof next === "string") {
          return next !== prev;
      }
      else if (Array.isArray(next)) {
          return !shallowCompare(next, prev);
      }
      return false;
  }
  function createTypeState(isActive = false) {
      return {
          isActive,
          protectedKeys: {},
          needsAnimating: {},
          prevResolvedValues: {},
      };
  }
  function createState() {
      return {
          animate: createTypeState(true),
          whileInView: createTypeState(),
          whileHover: createTypeState(),
          whileTap: createTypeState(),
          whileDrag: createTypeState(),
          whileFocus: createTypeState(),
          exit: createTypeState(),
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
  
  
  
  
  class AnimationFeature extends Feature {
      /**
       * We dynamically generate the AnimationState manager as it contains a reference
       * to the underlying animation library. We only want to load that if we load this,
       * so people can optionally code split it out using the `m` component.
       */
      constructor(node) {
          super(node);
          node.animationState || (node.animationState = createAnimationState(node));
      }
      updateAnimationControlsSubscription() {
          const { animate } = this.node.getProps();
          this.unmount();
          if (isAnimationControls(animate)) {
              this.unmount = animate.subscribe(this.node);
          }
      }
      /**
       * Subscribe any provided AnimationControls to the component's VisualElement
       */
      mount() {
          this.updateAnimationControlsSubscription();
      }
      update() {
          const { animate } = this.node.getProps();
          const { animate: prevAnimate } = this.node.prevProps || {};
          if (animate !== prevAnimate) {
              this.updateAnimationControlsSubscription();
          }
      }
      unmount() { }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs
  
  
  let id = 0;
  class ExitAnimationFeature extends Feature {
      constructor() {
          super(...arguments);
          this.id = id++;
      }
      update() {
          if (!this.node.presenceContext)
              return;
          const { isPresent, onExitComplete, custom } = this.node.presenceContext;
          const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
          if (!this.node.animationState || isPresent === prevIsPresent) {
              return;
          }
          const exitAnimation = this.node.animationState.setActive("exit", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });
          if (onExitComplete && !isPresent) {
              exitAnimation.then(() => onExitComplete(this.id));
          }
      }
      mount() {
          const { register } = this.node.presenceContext || {};
          if (register) {
              this.unmount = register(this.id);
          }
      }
      unmount() { }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/animations.mjs
  
  
  
  const animations = {
      animation: {
          Feature: AnimationFeature,
      },
      exit: {
          Feature: ExitAnimationFeature,
      },
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/distance.mjs
  const distance = (a, b) => Math.abs(a - b);
  function distance2D(a, b) {
      // Multi-dimensional
      const xDelta = distance(a.x, b.x);
      const yDelta = distance(a.y, b.y);
      return Math.sqrt(xDelta ** 2 + yDelta ** 2);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs
  
  
  
  
  
  
  
  
  /**
   * @internal
   */
  class PanSession {
      constructor(event, handlers, { transformPagePoint } = {}) {
          /**
           * @internal
           */
          this.startEvent = null;
          /**
           * @internal
           */
          this.lastMoveEvent = null;
          /**
           * @internal
           */
          this.lastMoveEventInfo = null;
          /**
           * @internal
           */
          this.handlers = {};
          this.updatePoint = () => {
              if (!(this.lastMoveEvent && this.lastMoveEventInfo))
                  return;
              const info = getPanInfo(this.lastMoveEventInfo, this.history);
              const isPanStarted = this.startEvent !== null;
              // Only start panning if the offset is larger than 3 pixels. If we make it
              // any larger than this we'll want to reset the pointer history
              // on the first update to avoid visual snapping to the cursoe.
              const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;
              if (!isPanStarted && !isDistancePastThreshold)
                  return;
              const { point } = info;
              const { timestamp } = frameData;
              this.history.push({ ...point, timestamp });
              const { onStart, onMove } = this.handlers;
              if (!isPanStarted) {
                  onStart && onStart(this.lastMoveEvent, info);
                  this.startEvent = this.lastMoveEvent;
              }
              onMove && onMove(this.lastMoveEvent, info);
          };
          this.handlePointerMove = (event, info) => {
              this.lastMoveEvent = event;
              this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);
              // Throttle mouse move event to once per frame
              frame_frame.update(this.updatePoint, true);
          };
          this.handlePointerUp = (event, info) => {
              this.end();
              if (!(this.lastMoveEvent && this.lastMoveEventInfo))
                  return;
              const { onEnd, onSessionEnd } = this.handlers;
              const panInfo = getPanInfo(event.type === "pointercancel"
                  ? this.lastMoveEventInfo
                  : transformPoint(info, this.transformPagePoint), this.history);
              if (this.startEvent && onEnd) {
                  onEnd(event, panInfo);
              }
              onSessionEnd && onSessionEnd(event, panInfo);
          };
          // If we have more than one touch, don't start detecting this gesture
          if (!isPrimaryPointer(event))
              return;
          this.handlers = handlers;
          this.transformPagePoint = transformPagePoint;
          const info = extractEventInfo(event);
          const initialInfo = transformPoint(info, this.transformPagePoint);
          const { point } = initialInfo;
          const { timestamp } = frameData;
          this.history = [{ ...point, timestamp }];
          const { onSessionStart } = handlers;
          onSessionStart &&
              onSessionStart(event, getPanInfo(initialInfo, this.history));
          this.removeListeners = pipe_pipe(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
      }
      updateHandlers(handlers) {
          this.handlers = handlers;
      }
      end() {
          this.removeListeners && this.removeListeners();
          cancelFrame(this.updatePoint);
      }
  }
  function transformPoint(info, transformPagePoint) {
      return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
  }
  function subtractPoint(a, b) {
      return { x: a.x - b.x, y: a.y - b.y };
  }
  function getPanInfo({ point }, history) {
      return {
          point,
          delta: subtractPoint(point, lastDevicePoint(history)),
          offset: subtractPoint(point, startDevicePoint(history)),
          velocity: PanSession_getVelocity(history, 0.1),
      };
  }
  function startDevicePoint(history) {
      return history[0];
  }
  function lastDevicePoint(history) {
      return history[history.length - 1];
  }
  function PanSession_getVelocity(history, timeDelta) {
      if (history.length < 2) {
          return { x: 0, y: 0 };
      }
      let i = history.length - 1;
      let timestampedPoint = null;
      const lastPoint = lastDevicePoint(history);
      while (i >= 0) {
          timestampedPoint = history[i];
          if (lastPoint.timestamp - timestampedPoint.timestamp >
              secondsToMilliseconds(timeDelta)) {
              break;
          }
          i--;
      }
      if (!timestampedPoint) {
          return { x: 0, y: 0 };
      }
      const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
      if (time === 0) {
          return { x: 0, y: 0 };
      }
      const currentVelocity = {
          x: (lastPoint.x - timestampedPoint.x) / time,
          y: (lastPoint.y - timestampedPoint.y) / time,
      };
      if (currentVelocity.x === Infinity) {
          currentVelocity.x = 0;
      }
      if (currentVelocity.y === Infinity) {
          currentVelocity.y = 0;
      }
      return currentVelocity;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
  
  
  function calcLength(axis) {
      return axis.max - axis.min;
  }
  function isNear(value, target = 0, maxDistance = 0.01) {
      return Math.abs(value - target) <= maxDistance;
  }
  function calcAxisDelta(delta, source, target, origin = 0.5) {
      delta.origin = origin;
      delta.originPoint = mix(source.min, source.max, delta.origin);
      delta.scale = calcLength(target) / calcLength(source);
      if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))
          delta.scale = 1;
      delta.translate =
          mix(target.min, target.max, delta.origin) - delta.originPoint;
      if (isNear(delta.translate) || isNaN(delta.translate))
          delta.translate = 0;
  }
  function calcBoxDelta(delta, source, target, origin) {
      calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);
      calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);
  }
  function calcRelativeAxis(target, relative, parent) {
      target.min = parent.min + relative.min;
      target.max = target.min + calcLength(relative);
  }
  function calcRelativeBox(target, relative, parent) {
      calcRelativeAxis(target.x, relative.x, parent.x);
      calcRelativeAxis(target.y, relative.y, parent.y);
  }
  function calcRelativeAxisPosition(target, layout, parent) {
      target.min = layout.min - parent.min;
      target.max = target.min + calcLength(layout);
  }
  function calcRelativePosition(target, layout, parent) {
      calcRelativeAxisPosition(target.x, layout.x, parent.x);
      calcRelativeAxisPosition(target.y, layout.y, parent.y);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
  
  
  
  
  
  /**
   * Apply constraints to a point. These constraints are both physical along an
   * axis, and an elastic factor that determines how much to constrain the point
   * by if it does lie outside the defined parameters.
   */
  function applyConstraints(point, { min, max }, elastic) {
      if (min !== undefined && point < min) {
          // If we have a min point defined, and this is outside of that, constrain
          point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);
      }
      else if (max !== undefined && point > max) {
          // If we have a max point defined, and this is outside of that, constrain
          point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);
      }
      return point;
  }
  /**
   * Calculate constraints in terms of the viewport when defined relatively to the
   * measured axis. This is measured from the nearest edge, so a max constraint of 200
   * on an axis with a max value of 300 would return a constraint of 500 - axis length
   */
  function calcRelativeAxisConstraints(axis, min, max) {
      return {
          min: min !== undefined ? axis.min + min : undefined,
          max: max !== undefined
              ? axis.max + max - (axis.max - axis.min)
              : undefined,
      };
  }
  /**
   * Calculate constraints in terms of the viewport when
   * defined relatively to the measured bounding box.
   */
  function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
      return {
          x: calcRelativeAxisConstraints(layoutBox.x, left, right),
          y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),
      };
  }
  /**
   * Calculate viewport constraints when defined as another viewport-relative axis
   */
  function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
      let min = constraintsAxis.min - layoutAxis.min;
      let max = constraintsAxis.max - layoutAxis.max;
      // If the constraints axis is actually smaller than the layout axis then we can
      // flip the constraints
      if (constraintsAxis.max - constraintsAxis.min <
          layoutAxis.max - layoutAxis.min) {
          [min, max] = [max, min];
      }
      return { min, max };
  }
  /**
   * Calculate viewport constraints when defined as another viewport-relative box
   */
  function calcViewportConstraints(layoutBox, constraintsBox) {
      return {
          x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
          y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),
      };
  }
  /**
   * Calculate a transform origin relative to the source axis, between 0-1, that results
   * in an asthetically pleasing scale/transform needed to project from source to target.
   */
  function constraints_calcOrigin(source, target) {
      let origin = 0.5;
      const sourceLength = calcLength(source);
      const targetLength = calcLength(target);
      if (targetLength > sourceLength) {
          origin = progress(target.min, target.max - sourceLength, source.min);
      }
      else if (sourceLength > targetLength) {
          origin = progress(source.min, source.max - targetLength, target.min);
      }
      return clamp_clamp(0, 1, origin);
  }
  /**
   * Rebase the calculated viewport constraints relative to the layout.min point.
   */
  function rebaseAxisConstraints(layout, constraints) {
      const relativeConstraints = {};
      if (constraints.min !== undefined) {
          relativeConstraints.min = constraints.min - layout.min;
      }
      if (constraints.max !== undefined) {
          relativeConstraints.max = constraints.max - layout.min;
      }
      return relativeConstraints;
  }
  const defaultElastic = 0.35;
  /**
   * Accepts a dragElastic prop and returns resolved elastic values for each axis.
   */
  function resolveDragElastic(dragElastic = defaultElastic) {
      if (dragElastic === false) {
          dragElastic = 0;
      }
      else if (dragElastic === true) {
          dragElastic = defaultElastic;
      }
      return {
          x: resolveAxisElastic(dragElastic, "left", "right"),
          y: resolveAxisElastic(dragElastic, "top", "bottom"),
      };
  }
  function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
      return {
          min: resolvePointElastic(dragElastic, minLabel),
          max: resolvePointElastic(dragElastic, maxLabel),
      };
  }
  function resolvePointElastic(dragElastic, label) {
      return typeof dragElastic === "number"
          ? dragElastic
          : dragElastic[label] || 0;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/geometry/models.mjs
  const createAxisDelta = () => ({
      translate: 0,
      scale: 1,
      origin: 0,
      originPoint: 0,
  });
  const createDelta = () => ({
      x: createAxisDelta(),
      y: createAxisDelta(),
  });
  const createAxis = () => ({ min: 0, max: 0 });
  const createBox = () => ({
      x: createAxis(),
      y: createAxis(),
  });
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
  function eachAxis(callback) {
      return [callback("x"), callback("y")];
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
  /**
   * Bounding boxes tend to be defined as top, left, right, bottom. For various operations
   * it's easier to consider each axis individually. This function returns a bounding box
   * as a map of single-axis min/max values.
   */
  function convertBoundingBoxToBox({ top, left, right, bottom, }) {
      return {
          x: { min: left, max: right },
          y: { min: top, max: bottom },
      };
  }
  function convertBoxToBoundingBox({ x, y }) {
      return { top: y.min, right: x.max, bottom: y.max, left: x.min };
  }
  /**
   * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function
   * provided by Framer to allow measured points to be corrected for device scaling. This is used
   * when measuring DOM elements and DOM event points.
   */
  function transformBoxPoints(point, transformPoint) {
      if (!transformPoint)
          return point;
      const topLeft = transformPoint({ x: point.left, y: point.top });
      const bottomRight = transformPoint({ x: point.right, y: point.bottom });
      return {
          top: topLeft.y,
          left: topLeft.x,
          bottom: bottomRight.y,
          right: bottomRight.x,
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
  function isIdentityScale(scale) {
      return scale === undefined || scale === 1;
  }
  function hasScale({ scale, scaleX, scaleY }) {
      return (!isIdentityScale(scale) ||
          !isIdentityScale(scaleX) ||
          !isIdentityScale(scaleY));
  }
  function hasTransform(values) {
      return (hasScale(values) ||
          has2DTranslate(values) ||
          values.z ||
          values.rotate ||
          values.rotateX ||
          values.rotateY);
  }
  function has2DTranslate(values) {
      return is2DTranslate(values.x) || is2DTranslate(values.y);
  }
  function is2DTranslate(value) {
      return value && value !== "0%";
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
  
  
  
  /**
   * Scales a point based on a factor and an originPoint
   */
  function scalePoint(point, scale, originPoint) {
      const distanceFromOrigin = point - originPoint;
      const scaled = scale * distanceFromOrigin;
      return originPoint + scaled;
  }
  /**
   * Applies a translate/scale delta to a point
   */
  function applyPointDelta(point, translate, scale, originPoint, boxScale) {
      if (boxScale !== undefined) {
          point = scalePoint(point, boxScale, originPoint);
      }
      return scalePoint(point, scale, originPoint) + translate;
  }
  /**
   * Applies a translate/scale delta to an axis
   */
  function applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {
      axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);
      axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);
  }
  /**
   * Applies a translate/scale delta to a box
   */
  function applyBoxDelta(box, { x, y }) {
      applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
      applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
  }
  /**
   * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms
   * in a tree upon our box before then calculating how to project it into our desired viewport-relative box
   *
   * This is the final nested loop within updateLayoutDelta for future refactoring
   */
  function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
      const treeLength = treePath.length;
      if (!treeLength)
          return;
      // Reset the treeScale
      treeScale.x = treeScale.y = 1;
      let node;
      let delta;
      for (let i = 0; i < treeLength; i++) {
          node = treePath[i];
          delta = node.projectionDelta;
          /**
           * TODO: Prefer to remove this, but currently we have motion components with
           * display: contents in Framer.
           */
          const instance = node.instance;
          if (instance &&
              instance.style &&
              instance.style.display === "contents") {
              continue;
          }
          if (isSharedTransition &&
              node.options.layoutScroll &&
              node.scroll &&
              node !== node.root) {
              transformBox(box, {
                  x: -node.scroll.offset.x,
                  y: -node.scroll.offset.y,
              });
          }
          if (delta) {
              // Incoporate each ancestor's scale into a culmulative treeScale for this component
              treeScale.x *= delta.x.scale;
              treeScale.y *= delta.y.scale;
              // Apply each ancestor's calculated delta into this component's recorded layout box
              applyBoxDelta(box, delta);
          }
          if (isSharedTransition && hasTransform(node.latestValues)) {
              transformBox(box, node.latestValues);
          }
      }
      /**
       * Snap tree scale back to 1 if it's within a non-perceivable threshold.
       * This will help reduce useless scales getting rendered.
       */
      treeScale.x = snapToDefault(treeScale.x);
      treeScale.y = snapToDefault(treeScale.y);
  }
  function snapToDefault(scale) {
      if (Number.isInteger(scale))
          return scale;
      return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;
  }
  function translateAxis(axis, distance) {
      axis.min = axis.min + distance;
      axis.max = axis.max + distance;
  }
  /**
   * Apply a transform to an axis from the latest resolved motion values.
   * This function basically acts as a bridge between a flat motion value map
   * and applyAxisDelta
   */
  function transformAxis(axis, transforms, [key, scaleKey, originKey]) {
      const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;
      const originPoint = mix(axis.min, axis.max, axisOrigin);
      // Apply the axis delta to the final axis
      applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
  }
  /**
   * The names of the motion values we want to apply as translation, scale and origin.
   */
  const xKeys = ["x", "scaleX", "originX"];
  const yKeys = ["y", "scaleY", "originY"];
  /**
   * Apply a transform to a box from the latest resolved motion values.
   */
  function transformBox(box, transform) {
      transformAxis(box.x, transform, xKeys);
      transformAxis(box.y, transform, yKeys);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/utils/measure.mjs
  
  
  
  function measureViewportBox(instance, transformPoint) {
      return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));
  }
  function measurePageBox(element, rootProjectionNode, transformPagePoint) {
      const viewportBox = measureViewportBox(element, transformPagePoint);
      const { scroll } = rootProjectionNode;
      if (scroll) {
          translateAxis(viewportBox.x, scroll.offset.x);
          translateAxis(viewportBox.y, scroll.offset.y);
      }
      return viewportBox;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  const elementDragControls = new WeakMap();
  /**
   *
   */
  // let latestPointerEvent: PointerEvent
  class VisualElementDragControls {
      constructor(visualElement) {
          // This is a reference to the global drag gesture lock, ensuring only one component
          // can "capture" the drag of one or both axes.
          // TODO: Look into moving this into pansession?
          this.openGlobalLock = null;
          this.isDragging = false;
          this.currentDirection = null;
          this.originPoint = { x: 0, y: 0 };
          /**
           * The permitted boundaries of travel, in pixels.
           */
          this.constraints = false;
          this.hasMutatedConstraints = false;
          /**
           * The per-axis resolved elastic values.
           */
          this.elastic = createBox();
          this.visualElement = visualElement;
      }
      start(originEvent, { snapToCursor = false } = {}) {
          /**
           * Don't start dragging if this component is exiting
           */
          const { presenceContext } = this.visualElement;
          if (presenceContext && presenceContext.isPresent === false)
              return;
          const onSessionStart = (event) => {
              // Stop any animations on both axis values immediately. This allows the user to throw and catch
              // the component.
              this.stopAnimation();
              if (snapToCursor) {
                  this.snapToCursor(extractEventInfo(event, "page").point);
              }
          };
          const onStart = (event, info) => {
              // Attempt to grab the global drag gesture lock - maybe make this part of PanSession
              const { drag, dragPropagation, onDragStart } = this.getProps();
              if (drag && !dragPropagation) {
                  if (this.openGlobalLock)
                      this.openGlobalLock();
                  this.openGlobalLock = getGlobalLock(drag);
                  // If we don 't have the lock, don't start dragging
                  if (!this.openGlobalLock)
                      return;
              }
              this.isDragging = true;
              this.currentDirection = null;
              this.resolveConstraints();
              if (this.visualElement.projection) {
                  this.visualElement.projection.isAnimationBlocked = true;
                  this.visualElement.projection.target = undefined;
              }
              /**
               * Record gesture origin
               */
              eachAxis((axis) => {
                  let current = this.getAxisMotionValue(axis).get() || 0;
                  /**
                   * If the MotionValue is a percentage value convert to px
                   */
                  if (percent.test(current)) {
                      const { projection } = this.visualElement;
                      if (projection && projection.layout) {
                          const measuredAxis = projection.layout.layoutBox[axis];
                          if (measuredAxis) {
                              const length = calcLength(measuredAxis);
                              current = length * (parseFloat(current) / 100);
                          }
                      }
                  }
                  this.originPoint[axis] = current;
              });
              // Fire onDragStart event
              if (onDragStart) {
                  frame_frame.update(() => onDragStart(event, info), false, true);
              }
              const { animationState } = this.visualElement;
              animationState && animationState.setActive("whileDrag", true);
          };
          const onMove = (event, info) => {
              // latestPointerEvent = event
              const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();
              // If we didn't successfully receive the gesture lock, early return.
              if (!dragPropagation && !this.openGlobalLock)
                  return;
              const { offset } = info;
              // Attempt to detect drag direction if directionLock is true
              if (dragDirectionLock && this.currentDirection === null) {
                  this.currentDirection = getCurrentDirection(offset);
                  // If we've successfully set a direction, notify listener
                  if (this.currentDirection !== null) {
                      onDirectionLock && onDirectionLock(this.currentDirection);
                  }
                  return;
              }
              // Update each point with the latest position
              this.updateAxis("x", info.point, offset);
              this.updateAxis("y", info.point, offset);
              /**
               * Ideally we would leave the renderer to fire naturally at the end of
               * this frame but if the element is about to change layout as the result
               * of a re-render we want to ensure the browser can read the latest
               * bounding box to ensure the pointer and element don't fall out of sync.
               */
              this.visualElement.render();
              /**
               * This must fire after the render call as it might trigger a state
               * change which itself might trigger a layout update.
               */
              onDrag && onDrag(event, info);
          };
          const onSessionEnd = (event, info) => this.stop(event, info);
          this.panSession = new PanSession(originEvent, {
              onSessionStart,
              onStart,
              onMove,
              onSessionEnd,
          }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
      }
      stop(event, info) {
          const isDragging = this.isDragging;
          this.cancel();
          if (!isDragging)
              return;
          const { velocity } = info;
          this.startAnimation(velocity);
          const { onDragEnd } = this.getProps();
          if (onDragEnd) {
              frame_frame.update(() => onDragEnd(event, info));
          }
      }
      cancel() {
          this.isDragging = false;
          const { projection, animationState } = this.visualElement;
          if (projection) {
              projection.isAnimationBlocked = false;
          }
          this.panSession && this.panSession.end();
          this.panSession = undefined;
          const { dragPropagation } = this.getProps();
          if (!dragPropagation && this.openGlobalLock) {
              this.openGlobalLock();
              this.openGlobalLock = null;
          }
          animationState && animationState.setActive("whileDrag", false);
      }
      updateAxis(axis, _point, offset) {
          const { drag } = this.getProps();
          // If we're not dragging this axis, do an early return.
          if (!offset || !shouldDrag(axis, drag, this.currentDirection))
              return;
          const axisValue = this.getAxisMotionValue(axis);
          let next = this.originPoint[axis] + offset[axis];
          // Apply constraints
          if (this.constraints && this.constraints[axis]) {
              next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
          }
          axisValue.set(next);
      }
      resolveConstraints() {
          const { dragConstraints, dragElastic } = this.getProps();
          const { layout } = this.visualElement.projection || {};
          const prevConstraints = this.constraints;
          if (dragConstraints && isRefObject(dragConstraints)) {
              if (!this.constraints) {
                  this.constraints = this.resolveRefConstraints();
              }
          }
          else {
              if (dragConstraints && layout) {
                  this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);
              }
              else {
                  this.constraints = false;
              }
          }
          this.elastic = resolveDragElastic(dragElastic);
          /**
           * If we're outputting to external MotionValues, we want to rebase the measured constraints
           * from viewport-relative to component-relative.
           */
          if (prevConstraints !== this.constraints &&
              layout &&
              this.constraints &&
              !this.hasMutatedConstraints) {
              eachAxis((axis) => {
                  if (this.getAxisMotionValue(axis)) {
                      this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);
                  }
              });
          }
      }
      resolveRefConstraints() {
          const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
          if (!constraints || !isRefObject(constraints))
              return false;
          const constraintsElement = constraints.current;
          invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
          const { projection } = this.visualElement;
          // TODO
          if (!projection || !projection.layout)
              return false;
          const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
          let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
          /**
           * If there's an onMeasureDragConstraints listener we call it and
           * if different constraints are returned, set constraints to that
           */
          if (onMeasureDragConstraints) {
              const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
              this.hasMutatedConstraints = !!userConstraints;
              if (userConstraints) {
                  measuredConstraints = convertBoundingBoxToBox(userConstraints);
              }
          }
          return measuredConstraints;
      }
      startAnimation(velocity) {
          const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();
          const constraints = this.constraints || {};
          const momentumAnimations = eachAxis((axis) => {
              if (!shouldDrag(axis, drag, this.currentDirection)) {
                  return;
              }
              let transition = (constraints && constraints[axis]) || {};
              if (dragSnapToOrigin)
                  transition = { min: 0, max: 0 };
              /**
               * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame
               * of spring animations so we should look into adding a disable spring option to `inertia`.
               * We could do something here where we affect the `bounceStiffness` and `bounceDamping`
               * using the value of `dragElastic`.
               */
              const bounceStiffness = dragElastic ? 200 : 1000000;
              const bounceDamping = dragElastic ? 40 : 10000000;
              const inertia = {
                  type: "inertia",
                  velocity: dragMomentum ? velocity[axis] : 0,
                  bounceStiffness,
                  bounceDamping,
                  timeConstant: 750,
                  restDelta: 1,
                  restSpeed: 10,
                  ...dragTransition,
                  ...transition,
              };
              // If we're not animating on an externally-provided `MotionValue` we can use the
              // component's animation controls which will handle interactions with whileHover (etc),
              // otherwise we just have to animate the `MotionValue` itself.
              return this.startAxisValueAnimation(axis, inertia);
          });
          // Run all animations and then resolve the new drag constraints.
          return Promise.all(momentumAnimations).then(onDragTransitionEnd);
      }
      startAxisValueAnimation(axis, transition) {
          const axisValue = this.getAxisMotionValue(axis);
          return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));
      }
      stopAnimation() {
          eachAxis((axis) => this.getAxisMotionValue(axis).stop());
      }
      /**
       * Drag works differently depending on which props are provided.
       *
       * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
       * - Otherwise, we apply the delta to the x/y motion values.
       */
      getAxisMotionValue(axis) {
          const dragKey = "_drag" + axis.toUpperCase();
          const props = this.visualElement.getProps();
          const externalMotionValue = props[dragKey];
          return externalMotionValue
              ? externalMotionValue
              : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);
      }
      snapToCursor(point) {
          eachAxis((axis) => {
              const { drag } = this.getProps();
              // If we're not dragging this axis, do an early return.
              if (!shouldDrag(axis, drag, this.currentDirection))
                  return;
              const { projection } = this.visualElement;
              const axisValue = this.getAxisMotionValue(axis);
              if (projection && projection.layout) {
                  const { min, max } = projection.layout.layoutBox[axis];
                  axisValue.set(point[axis] - mix(min, max, 0.5));
              }
          });
      }
      /**
       * When the viewport resizes we want to check if the measured constraints
       * have changed and, if so, reposition the element within those new constraints
       * relative to where it was before the resize.
       */
      scalePositionWithinConstraints() {
          if (!this.visualElement.current)
              return;
          const { drag, dragConstraints } = this.getProps();
          const { projection } = this.visualElement;
          if (!isRefObject(dragConstraints) || !projection || !this.constraints)
              return;
          /**
           * Stop current animations as there can be visual glitching if we try to do
           * this mid-animation
           */
          this.stopAnimation();
          /**
           * Record the relative position of the dragged element relative to the
           * constraints box and save as a progress value.
           */
          const boxProgress = { x: 0, y: 0 };
          eachAxis((axis) => {
              const axisValue = this.getAxisMotionValue(axis);
              if (axisValue) {
                  const latest = axisValue.get();
                  boxProgress[axis] = constraints_calcOrigin({ min: latest, max: latest }, this.constraints[axis]);
              }
          });
          /**
           * Update the layout of this element and resolve the latest drag constraints
           */
          const { transformTemplate } = this.visualElement.getProps();
          this.visualElement.current.style.transform = transformTemplate
              ? transformTemplate({}, "")
              : "none";
          projection.root && projection.root.updateScroll();
          projection.updateLayout();
          this.resolveConstraints();
          /**
           * For each axis, calculate the current progress of the layout axis
           * within the new constraints.
           */
          eachAxis((axis) => {
              if (!shouldDrag(axis, drag, null))
                  return;
              /**
               * Calculate a new transform based on the previous box progress
               */
              const axisValue = this.getAxisMotionValue(axis);
              const { min, max } = this.constraints[axis];
              axisValue.set(mix(min, max, boxProgress[axis]));
          });
      }
      addListeners() {
          if (!this.visualElement.current)
              return;
          elementDragControls.set(this.visualElement, this);
          const element = this.visualElement.current;
          /**
           * Attach a pointerdown event listener on this DOM element to initiate drag tracking.
           */
          const stopPointerListener = addPointerEvent(element, "pointerdown", (event) => {
              const { drag, dragListener = true } = this.getProps();
              drag && dragListener && this.start(event);
          });
          const measureDragConstraints = () => {
              const { dragConstraints } = this.getProps();
              if (isRefObject(dragConstraints)) {
                  this.constraints = this.resolveRefConstraints();
              }
          };
          const { projection } = this.visualElement;
          const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
          if (projection && !projection.layout) {
              projection.root && projection.root.updateScroll();
              projection.updateLayout();
          }
          measureDragConstraints();
          /**
           * Attach a window resize listener to scale the draggable target within its defined
           * constraints as the window resizes.
           */
          const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
          /**
           * If the element's layout changes, calculate the delta and apply that to
           * the drag gesture's origin point.
           */
          const stopLayoutUpdateListener = projection.addEventListener("didUpdate", (({ delta, hasLayoutChanged }) => {
              if (this.isDragging && hasLayoutChanged) {
                  eachAxis((axis) => {
                      const motionValue = this.getAxisMotionValue(axis);
                      if (!motionValue)
                          return;
                      this.originPoint[axis] += delta[axis].translate;
                      motionValue.set(motionValue.get() + delta[axis].translate);
                  });
                  this.visualElement.render();
              }
          }));
          return () => {
              stopResizeListener();
              stopPointerListener();
              stopMeasureLayoutListener();
              stopLayoutUpdateListener && stopLayoutUpdateListener();
          };
      }
      getProps() {
          const props = this.visualElement.getProps();
          const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;
          return {
              ...props,
              drag,
              dragDirectionLock,
              dragPropagation,
              dragConstraints,
              dragElastic,
              dragMomentum,
          };
      }
  }
  function shouldDrag(direction, drag, currentDirection) {
      return ((drag === true || drag === direction) &&
          (currentDirection === null || currentDirection === direction));
  }
  /**
   * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower
   * than the provided threshold, return `null`.
   *
   * @param offset - The x/y offset from origin.
   * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.
   */
  function getCurrentDirection(offset, lockThreshold = 10) {
      let direction = null;
      if (Math.abs(offset.y) > lockThreshold) {
          direction = "y";
      }
      else if (Math.abs(offset.x) > lockThreshold) {
          direction = "x";
      }
      return direction;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/drag/index.mjs
  
  
  
  
  class DragGesture extends Feature {
      constructor(node) {
          super(node);
          this.removeGroupControls = noop_noop;
          this.removeListeners = noop_noop;
          this.controls = new VisualElementDragControls(node);
      }
      mount() {
          // If we've been provided a DragControls for manual control over the drag gesture,
          // subscribe this component to it on mount.
          const { dragControls } = this.node.getProps();
          if (dragControls) {
              this.removeGroupControls = dragControls.subscribe(this.controls);
          }
          this.removeListeners = this.controls.addListeners() || noop_noop;
      }
      unmount() {
          this.removeGroupControls();
          this.removeListeners();
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/gestures/pan/index.mjs
  
  
  
  
  
  
  const asyncHandler = (handler) => (event, info) => {
      if (handler) {
          frame_frame.update(() => handler(event, info));
      }
  };
  class PanGesture extends Feature {
      constructor() {
          super(...arguments);
          this.removePointerDownListener = noop_noop;
      }
      onPointerDown(pointerDownEvent) {
          this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });
      }
      createPanHandlers() {
          const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
          return {
              onSessionStart: asyncHandler(onPanSessionStart),
              onStart: asyncHandler(onPanStart),
              onMove: onPan,
              onEnd: (event, info) => {
                  delete this.session;
                  if (onPanEnd) {
                      frame_frame.update(() => onPanEnd(event, info));
                  }
              },
          };
      }
      mount() {
          this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
      }
      update() {
          this.session && this.session.updateHandlers(this.createPanHandlers());
      }
      unmount() {
          this.removePointerDownListener();
          this.session && this.session.end();
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
  
  
  
  /**
   * When a component is the child of `AnimatePresence`, it can use `usePresence`
   * to access information about whether it's still present in the React tree.
   *
   * ```jsx
   * import { usePresence } from "framer-motion"
   *
   * export const Component = () => {
   *   const [isPresent, safeToRemove] = usePresence()
   *
   *   useEffect(() => {
   *     !isPresent && setTimeout(safeToRemove, 1000)
   *   }, [isPresent])
   *
   *   return <div />
   * }
   * ```
   *
   * If `isPresent` is `false`, it means that a component has been removed the tree, but
   * `AnimatePresence` won't really remove it until `safeToRemove` has been called.
   *
   * @public
   */
  function usePresence() {
      const context = (0,react.useContext)(PresenceContext_PresenceContext);
      if (context === null)
          return [true, null];
      const { isPresent, onExitComplete, register } = context;
      // It's safe to call the following hooks conditionally (after an early return) because the context will always
      // either be null or non-null for the lifespan of the component.
      const id = (0,react.useId)();
      (0,react.useEffect)(() => register(id), []);
      const safeToRemove = () => onExitComplete && onExitComplete(id);
      return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
  }
  /**
   * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.
   * There is no `safeToRemove` function.
   *
   * ```jsx
   * import { useIsPresent } from "framer-motion"
   *
   * export const Component = () => {
   *   const isPresent = useIsPresent()
   *
   *   useEffect(() => {
   *     !isPresent && console.log("I've been removed!")
   *   }, [isPresent])
   *
   *   return <div />
   * }
   * ```
   *
   * @public
   */
  function useIsPresent() {
      return isPresent(useContext(PresenceContext));
  }
  function isPresent(context) {
      return context === null ? true : context.isPresent;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/node/state.mjs
  /**
   * This should only ever be modified on the client otherwise it'll
   * persist through server requests. If we need instanced states we
   * could lazy-init via root.
   */
  const globalProjectionState = {
      /**
       * Global flag as to whether the tree has animated since the last time
       * we resized the window
       */
      hasAnimatedSinceResize: true,
      /**
       * We set this to true once, on the first update. Any nodes added to the tree beyond that
       * update will be given a `data-projection-id` attribute.
       */
      hasEverUpdated: false,
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
  
  
  function pixelsToPercent(pixels, axis) {
      if (axis.max === axis.min)
          return 0;
      return (pixels / (axis.max - axis.min)) * 100;
  }
  /**
   * We always correct borderRadius as a percentage rather than pixels to reduce paints.
   * For example, if you are projecting a box that is 100px wide with a 10px borderRadius
   * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%
   * borderRadius in both states. If we animate between the two in pixels that will trigger
   * a paint each time. If we animate between the two in percentage we'll avoid a paint.
   */
  const correctBorderRadius = {
      correct: (latest, node) => {
          if (!node.target)
              return latest;
          /**
           * If latest is a string, if it's a percentage we can return immediately as it's
           * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.
           */
          if (typeof latest === "string") {
              if (px.test(latest)) {
                  latest = parseFloat(latest);
              }
              else {
                  return latest;
              }
          }
          /**
           * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that
           * pixel value as a percentage of each axis
           */
          const x = pixelsToPercent(latest, node.target.x);
          const y = pixelsToPercent(latest, node.target.y);
          return `${x}% ${y}%`;
      },
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
  
  
  
  const correctBoxShadow = {
      correct: (latest, { treeScale, projectionDelta }) => {
          const original = latest;
          const shadow = complex.parse(latest);
          // TODO: Doesn't support multiple shadows
          if (shadow.length > 5)
              return original;
          const template = complex.createTransformer(latest);
          const offset = typeof shadow[0] !== "number" ? 1 : 0;
          // Calculate the overall context scale
          const xScale = projectionDelta.x.scale * treeScale.x;
          const yScale = projectionDelta.y.scale * treeScale.y;
          shadow[0 + offset] /= xScale;
          shadow[1 + offset] /= yScale;
          /**
           * Ideally we'd correct x and y scales individually, but because blur and
           * spread apply to both we have to take a scale average and apply that instead.
           * We could potentially improve the outcome of this by incorporating the ratio between
           * the two scales.
           */
          const averageScale = mix(xScale, yScale, 0.5);
          // Blur
          if (typeof shadow[2 + offset] === "number")
              shadow[2 + offset] /= averageScale;
          // Spread
          if (typeof shadow[3 + offset] === "number")
              shadow[3 + offset] /= averageScale;
          return template(shadow);
      },
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
  
  
  
  
  
  
  
  
  
  
  class MeasureLayoutWithContext extends react.Component {
      /**
       * This only mounts projection nodes for components that
       * need measuring, we might want to do it for all components
       * in order to incorporate transforms
       */
      componentDidMount() {
          const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
          const { projection } = visualElement;
          addScaleCorrector(defaultScaleCorrectors);
          if (projection) {
              if (layoutGroup.group)
                  layoutGroup.group.add(projection);
              if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
                  switchLayoutGroup.register(projection);
              }
              projection.root.didUpdate();
              projection.addEventListener("animationComplete", () => {
                  this.safeToRemove();
              });
              projection.setOptions({
                  ...projection.options,
                  onExitComplete: () => this.safeToRemove(),
              });
          }
          globalProjectionState.hasEverUpdated = true;
      }
      getSnapshotBeforeUpdate(prevProps) {
          const { layoutDependency, visualElement, drag, isPresent } = this.props;
          const projection = visualElement.projection;
          if (!projection)
              return null;
          /**
           * TODO: We use this data in relegate to determine whether to
           * promote a previous element. There's no guarantee its presence data
           * will have updated by this point - if a bug like this arises it will
           * have to be that we markForRelegation and then find a new lead some other way,
           * perhaps in didUpdate
           */
          projection.isPresent = isPresent;
          if (drag ||
              prevProps.layoutDependency !== layoutDependency ||
              layoutDependency === undefined) {
              projection.willUpdate();
          }
          else {
              this.safeToRemove();
          }
          if (prevProps.isPresent !== isPresent) {
              if (isPresent) {
                  projection.promote();
              }
              else if (!projection.relegate()) {
                  /**
                   * If there's another stack member taking over from this one,
                   * it's in charge of the exit animation and therefore should
                   * be in charge of the safe to remove. Otherwise we call it here.
                   */
                  frame_frame.postRender(() => {
                      const stack = projection.getStack();
                      if (!stack || !stack.members.length) {
                          this.safeToRemove();
                      }
                  });
              }
          }
          return null;
      }
      componentDidUpdate() {
          const { projection } = this.props.visualElement;
          if (projection) {
              projection.root.didUpdate();
              queueMicrotask(() => {
                  if (!projection.currentAnimation && projection.isLead()) {
                      this.safeToRemove();
                  }
              });
          }
      }
      componentWillUnmount() {
          const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;
          const { projection } = visualElement;
          if (projection) {
              projection.scheduleCheckAfterUnmount();
              if (layoutGroup && layoutGroup.group)
                  layoutGroup.group.remove(projection);
              if (promoteContext && promoteContext.deregister)
                  promoteContext.deregister(projection);
          }
      }
      safeToRemove() {
          const { safeToRemove } = this.props;
          safeToRemove && safeToRemove();
      }
      render() {
          return null;
      }
  }
  function MeasureLayout(props) {
      const [isPresent, safeToRemove] = usePresence();
      const layoutGroup = (0,react.useContext)(LayoutGroupContext);
      return (react.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: (0,react.useContext)(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));
  }
  const defaultScaleCorrectors = {
      borderRadius: {
          ...correctBorderRadius,
          applyTo: [
              "borderTopLeftRadius",
              "borderTopRightRadius",
              "borderBottomLeftRadius",
              "borderBottomRightRadius",
          ],
      },
      borderTopLeftRadius: correctBorderRadius,
      borderTopRightRadius: correctBorderRadius,
      borderBottomLeftRadius: correctBorderRadius,
      borderBottomRightRadius: correctBorderRadius,
      boxShadow: correctBoxShadow,
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
  
  
  
  
  
  
  const borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
  const numBorders = borders.length;
  const asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
  const isPx = (value) => typeof value === "number" || px.test(value);
  function mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {
      if (shouldCrossfadeOpacity) {
          target.opacity = mix(0, 
          // TODO Reinstate this if only child
          lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));
          target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));
      }
      else if (isOnlyMember) {
          target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);
      }
      /**
       * Mix border radius
       */
      for (let i = 0; i < numBorders; i++) {
          const borderLabel = `border${borders[i]}Radius`;
          let followRadius = getRadius(follow, borderLabel);
          let leadRadius = getRadius(lead, borderLabel);
          if (followRadius === undefined && leadRadius === undefined)
              continue;
          followRadius || (followRadius = 0);
          leadRadius || (leadRadius = 0);
          const canMix = followRadius === 0 ||
              leadRadius === 0 ||
              isPx(followRadius) === isPx(leadRadius);
          if (canMix) {
              target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);
              if (percent.test(leadRadius) || percent.test(followRadius)) {
                  target[borderLabel] += "%";
              }
          }
          else {
              target[borderLabel] = leadRadius;
          }
      }
      /**
       * Mix rotation
       */
      if (follow.rotate || lead.rotate) {
          target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);
      }
  }
  function getRadius(values, radiusName) {
      return values[radiusName] !== undefined
          ? values[radiusName]
          : values.borderRadius;
  }
  // /**
  //  * We only want to mix the background color if there's a follow element
  //  * that we're not crossfading opacity between. For instance with switch
  //  * AnimateSharedLayout animations, this helps the illusion of a continuous
  //  * element being animated but also cuts down on the number of paints triggered
  //  * for elements where opacity is doing that work for us.
  //  */
  // if (
  //     !hasFollowElement &&
  //     latestLeadValues.backgroundColor &&
  //     latestFollowValues.backgroundColor
  // ) {
  //     /**
  //      * This isn't ideal performance-wise as mixColor is creating a new function every frame.
  //      * We could probably create a mixer that runs at the start of the animation but
  //      * the idea behind the crossfader is that it runs dynamically between two potentially
  //      * changing targets (ie opacity or borderRadius may be animating independently via variants)
  //      */
  //     leadState.backgroundColor = followState.backgroundColor = mixColor(
  //         latestFollowValues.backgroundColor as string,
  //         latestLeadValues.backgroundColor as string
  //     )(p)
  // }
  const easeCrossfadeIn = compress(0, 0.5, circOut);
  const easeCrossfadeOut = compress(0.5, 0.95, noop_noop);
  function compress(min, max, easing) {
      return (p) => {
          // Could replace ifs with clamp
          if (p < min)
              return 0;
          if (p > max)
              return 1;
          return easing(progress(min, max, p));
      };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
  /**
   * Reset an axis to the provided origin box.
   *
   * This is a mutative operation.
   */
  function copyAxisInto(axis, originAxis) {
      axis.min = originAxis.min;
      axis.max = originAxis.max;
  }
  /**
   * Reset a box to the provided origin box.
   *
   * This is a mutative operation.
   */
  function copyBoxInto(box, originBox) {
      copyAxisInto(box.x, originBox.x);
      copyAxisInto(box.y, originBox.y);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
  
  
  
  
  /**
   * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse
   */
  function removePointDelta(point, translate, scale, originPoint, boxScale) {
      point -= translate;
      point = scalePoint(point, 1 / scale, originPoint);
      if (boxScale !== undefined) {
          point = scalePoint(point, 1 / boxScale, originPoint);
      }
      return point;
  }
  /**
   * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse
   */
  function removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
      if (percent.test(translate)) {
          translate = parseFloat(translate);
          const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);
          translate = relativeProgress - sourceAxis.min;
      }
      if (typeof translate !== "number")
          return;
      let originPoint = mix(originAxis.min, originAxis.max, origin);
      if (axis === originAxis)
          originPoint -= translate;
      axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);
      axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);
  }
  /**
   * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse
   * and acts as a bridge between motion values and removeAxisDelta
   */
  function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {
      removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
  }
  /**
   * The names of the motion values we want to apply as translation, scale and origin.
   */
  const delta_remove_xKeys = ["x", "scaleX", "originX"];
  const delta_remove_yKeys = ["y", "scaleY", "originY"];
  /**
   * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse
   * and acts as a bridge between motion values and removeAxisDelta
   */
  function removeBoxTransforms(box, transforms, originBox, sourceBox) {
      removeAxisTransforms(box.x, transforms, delta_remove_xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);
      removeAxisTransforms(box.y, transforms, delta_remove_yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
  
  
  function isAxisDeltaZero(delta) {
      return delta.translate === 0 && delta.scale === 1;
  }
  function isDeltaZero(delta) {
      return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
  }
  function boxEquals(a, b) {
      return (a.x.min === b.x.min &&
          a.x.max === b.x.max &&
          a.y.min === b.y.min &&
          a.y.max === b.y.max);
  }
  function boxEqualsRounded(a, b) {
      return (Math.round(a.x.min) === Math.round(b.x.min) &&
          Math.round(a.x.max) === Math.round(b.x.max) &&
          Math.round(a.y.min) === Math.round(b.y.min) &&
          Math.round(a.y.max) === Math.round(b.y.max));
  }
  function aspectRatio(box) {
      return calcLength(box.x) / calcLength(box.y);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/shared/stack.mjs
  
  
  class NodeStack {
      constructor() {
          this.members = [];
      }
      add(node) {
          addUniqueItem(this.members, node);
          node.scheduleRender();
      }
      remove(node) {
          removeItem(this.members, node);
          if (node === this.prevLead) {
              this.prevLead = undefined;
          }
          if (node === this.lead) {
              const prevLead = this.members[this.members.length - 1];
              if (prevLead) {
                  this.promote(prevLead);
              }
          }
      }
      relegate(node) {
          const indexOfNode = this.members.findIndex((member) => node === member);
          if (indexOfNode === 0)
              return false;
          /**
           * Find the next projection node that is present
           */
          let prevLead;
          for (let i = indexOfNode; i >= 0; i--) {
              const member = this.members[i];
              if (member.isPresent !== false) {
                  prevLead = member;
                  break;
              }
          }
          if (prevLead) {
              this.promote(prevLead);
              return true;
          }
          else {
              return false;
          }
      }
      promote(node, preserveFollowOpacity) {
          const prevLead = this.lead;
          if (node === prevLead)
              return;
          this.prevLead = prevLead;
          this.lead = node;
          node.show();
          if (prevLead) {
              prevLead.instance && prevLead.scheduleRender();
              node.scheduleRender();
              node.resumeFrom = prevLead;
              if (preserveFollowOpacity) {
                  node.resumeFrom.preserveOpacity = true;
              }
              if (prevLead.snapshot) {
                  node.snapshot = prevLead.snapshot;
                  node.snapshot.latestValues =
                      prevLead.animationValues || prevLead.latestValues;
              }
              if (node.root && node.root.isUpdating) {
                  node.isLayoutDirty = true;
              }
              const { crossfade } = node.options;
              if (crossfade === false) {
                  prevLead.hide();
              }
              /**
               * TODO:
               *   - Test border radius when previous node was deleted
               *   - boxShadow mixing
               *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)
               *   - Shared between element A in transformed container and element B (transform stays the same or changes)
               *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)
               * ---
               *   - Crossfade opacity of root nodes
               *   - layoutId changes after animation
               *   - layoutId changes mid animation
               */
          }
      }
      exitAnimationComplete() {
          this.members.forEach((node) => {
              const { options, resumingFrom } = node;
              options.onExitComplete && options.onExitComplete();
              if (resumingFrom) {
                  resumingFrom.options.onExitComplete &&
                      resumingFrom.options.onExitComplete();
              }
          });
      }
      scheduleRender() {
          this.members.forEach((node) => {
              node.instance && node.scheduleRender(false);
          });
      }
      /**
       * Clear any leads that have been removed this render to prevent them from being
       * used in future animations and to prevent memory leaks
       */
      removeLeadSnapshot() {
          if (this.lead && this.lead.snapshot) {
              this.lead.snapshot = undefined;
          }
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/styles/transform.mjs
  function buildProjectionTransform(delta, treeScale, latestTransform) {
      let transform = "";
      /**
       * The translations we use to calculate are always relative to the viewport coordinate space.
       * But when we apply scales, we also scale the coordinate space of an element and its children.
       * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need
       * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.
       */
      const xTranslate = delta.x.translate / treeScale.x;
      const yTranslate = delta.y.translate / treeScale.y;
      if (xTranslate || yTranslate) {
          transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;
      }
      /**
       * Apply scale correction for the tree transform.
       * This will apply scale to the screen-orientated axes.
       */
      if (treeScale.x !== 1 || treeScale.y !== 1) {
          transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
      }
      if (latestTransform) {
          const { rotate, rotateX, rotateY } = latestTransform;
          if (rotate)
              transform += `rotate(${rotate}deg) `;
          if (rotateX)
              transform += `rotateX(${rotateX}deg) `;
          if (rotateY)
              transform += `rotateY(${rotateY}deg) `;
      }
      /**
       * Apply scale to match the size of the element to the size we want it.
       * This will apply scale to the element-orientated axes.
       */
      const elementScaleX = delta.x.scale * treeScale.x;
      const elementScaleY = delta.y.scale * treeScale.y;
      if (elementScaleX !== 1 || elementScaleY !== 1) {
          transform += `scale(${elementScaleX}, ${elementScaleY})`;
      }
      return transform || "none";
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
  const compareByDepth = (a, b) => a.depth - b.depth;
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
  
  
  
  class FlatTree {
      constructor() {
          this.children = [];
          this.isDirty = false;
      }
      add(child) {
          addUniqueItem(this.children, child);
          this.isDirty = true;
      }
      remove(child) {
          removeItem(this.children, child);
          this.isDirty = true;
      }
      forEach(callback) {
          this.isDirty && this.children.sort(compareByDepth);
          this.isDirty = false;
          this.children.forEach(callback);
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/delay.mjs
  
  
  /**
   * Timeout defined in ms
   */
  function delay(callback, timeout) {
      const start = performance.now();
      const checkElapsed = ({ timestamp }) => {
          const elapsed = timestamp - start;
          if (elapsed >= timeout) {
              cancelFrame(checkElapsed);
              callback(elapsed - timeout);
          }
      };
      frame_frame.read(checkElapsed, true);
      return () => cancelFrame(checkElapsed);
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/debug/record.mjs
  function record(data) {
      if (window.MotionDebug) {
          window.MotionDebug.record(data);
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs
  function isSVGElement(element) {
      return element instanceof SVGElement && element.tagName !== "svg";
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs
  
  
  
  
  function animateSingleValue(value, keyframes, options) {
      const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
      motionValue$1.start(animateMotionValue("", motionValue$1, keyframes, options));
      return motionValue$1.animation;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  const transformAxes = ["", "X", "Y", "Z"];
  /**
   * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1
   * which has a noticeable difference in spring animations
   */
  const animationTarget = 1000;
  let create_projection_node_id = 0;
  /**
   * Use a mutable data object for debug data so as to not create a new
   * object every frame.
   */
  const projectionFrameData = {
      type: "projectionFrame",
      totalNodes: 0,
      resolvedTargetDeltas: 0,
      recalculatedProjection: 0,
  };
  function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {
      return class ProjectionNode {
          constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
              /**
               * A unique ID generated for every projection node.
               */
              this.id = create_projection_node_id++;
              /**
               * An id that represents a unique session instigated by startUpdate.
               */
              this.animationId = 0;
              /**
               * A Set containing all this component's children. This is used to iterate
               * through the children.
               *
               * TODO: This could be faster to iterate as a flat array stored on the root node.
               */
              this.children = new Set();
              /**
               * Options for the node. We use this to configure what kind of layout animations
               * we should perform (if any).
               */
              this.options = {};
              /**
               * We use this to detect when its safe to shut down part of a projection tree.
               * We have to keep projecting children for scale correction and relative projection
               * until all their parents stop performing layout animations.
               */
              this.isTreeAnimating = false;
              this.isAnimationBlocked = false;
              /**
               * Flag to true if we think this layout has been changed. We can't always know this,
               * currently we set it to true every time a component renders, or if it has a layoutDependency
               * if that has changed between renders. Additionally, components can be grouped by LayoutGroup
               * and if one node is dirtied, they all are.
               */
              this.isLayoutDirty = false;
              /**
               * Flag to true if we think the projection calculations for this node needs
               * recalculating as a result of an updated transform or layout animation.
               */
              this.isProjectionDirty = false;
              /**
               * Flag to true if the layout *or* transform has changed. This then gets propagated
               * throughout the projection tree, forcing any element below to recalculate on the next frame.
               */
              this.isSharedProjectionDirty = false;
              /**
               * Flag transform dirty. This gets propagated throughout the whole tree but is only
               * respected by shared nodes.
               */
              this.isTransformDirty = false;
              /**
               * Block layout updates for instant layout transitions throughout the tree.
               */
              this.updateManuallyBlocked = false;
              this.updateBlockedByResize = false;
              /**
               * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`
               * call.
               */
              this.isUpdating = false;
              /**
               * If this is an SVG element we currently disable projection transforms
               */
              this.isSVG = false;
              /**
               * Flag to true (during promotion) if a node doing an instant layout transition needs to reset
               * its projection styles.
               */
              this.needsReset = false;
              /**
               * Flags whether this node should have its transform reset prior to measuring.
               */
              this.shouldResetTransform = false;
              /**
               * An object representing the calculated contextual/accumulated/tree scale.
               * This will be used to scale calculcated projection transforms, as these are
               * calculated in screen-space but need to be scaled for elements to layoutly
               * make it to their calculated destinations.
               *
               * TODO: Lazy-init
               */
              this.treeScale = { x: 1, y: 1 };
              /**
               *
               */
              this.eventHandlers = new Map();
              this.hasTreeAnimated = false;
              // Note: Currently only running on root node
              this.updateScheduled = false;
              this.checkUpdateFailed = () => {
                  if (this.isUpdating) {
                      this.isUpdating = false;
                      this.clearAllSnapshots();
                  }
              };
              /**
               * This is a multi-step process as shared nodes might be of different depths. Nodes
               * are sorted by depth order, so we need to resolve the entire tree before moving to
               * the next step.
               */
              this.updateProjection = () => {
                  /**
                   * Reset debug counts. Manually resetting rather than creating a new
                   * object each frame.
                   */
                  projectionFrameData.totalNodes =
                      projectionFrameData.resolvedTargetDeltas =
                          projectionFrameData.recalculatedProjection =
                              0;
                  this.nodes.forEach(propagateDirtyNodes);
                  this.nodes.forEach(resolveTargetDelta);
                  this.nodes.forEach(calcProjection);
                  this.nodes.forEach(cleanDirtyNodes);
                  record(projectionFrameData);
              };
              this.hasProjected = false;
              this.isVisible = true;
              this.animationProgress = 0;
              /**
               * Shared layout
               */
              // TODO Only running on root node
              this.sharedNodes = new Map();
              this.latestValues = latestValues;
              this.root = parent ? parent.root || parent : this;
              this.path = parent ? [...parent.path, parent] : [];
              this.parent = parent;
              this.depth = parent ? parent.depth + 1 : 0;
              for (let i = 0; i < this.path.length; i++) {
                  this.path[i].shouldResetTransform = true;
              }
              if (this.root === this)
                  this.nodes = new FlatTree();
          }
          addEventListener(name, handler) {
              if (!this.eventHandlers.has(name)) {
                  this.eventHandlers.set(name, new SubscriptionManager());
              }
              return this.eventHandlers.get(name).add(handler);
          }
          notifyListeners(name, ...args) {
              const subscriptionManager = this.eventHandlers.get(name);
              subscriptionManager && subscriptionManager.notify(...args);
          }
          hasListeners(name) {
              return this.eventHandlers.has(name);
          }
          /**
           * Lifecycles
           */
          mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
              if (this.instance)
                  return;
              this.isSVG = isSVGElement(instance);
              this.instance = instance;
              const { layoutId, layout, visualElement } = this.options;
              if (visualElement && !visualElement.current) {
                  visualElement.mount(instance);
              }
              this.root.nodes.add(this);
              this.parent && this.parent.children.add(this);
              if (isLayoutDirty && (layout || layoutId)) {
                  this.isLayoutDirty = true;
              }
              if (attachResizeListener) {
                  let cancelDelay;
                  const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);
                  attachResizeListener(instance, () => {
                      this.root.updateBlockedByResize = true;
                      cancelDelay && cancelDelay();
                      cancelDelay = delay(resizeUnblockUpdate, 250);
                      if (globalProjectionState.hasAnimatedSinceResize) {
                          globalProjectionState.hasAnimatedSinceResize = false;
                          this.nodes.forEach(finishAnimation);
                      }
                  });
              }
              if (layoutId) {
                  this.root.registerSharedNode(layoutId, this);
              }
              // Only register the handler if it requires layout animation
              if (this.options.animate !== false &&
                  visualElement &&
                  (layoutId || layout)) {
                  this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {
                      if (this.isTreeAnimationBlocked()) {
                          this.target = undefined;
                          this.relativeTarget = undefined;
                          return;
                      }
                      // TODO: Check here if an animation exists
                      const layoutTransition = this.options.transition ||
                          visualElement.getDefaultTransition() ||
                          defaultLayoutTransition;
                      const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();
                      /**
                       * The target layout of the element might stay the same,
                       * but its position relative to its parent has changed.
                       */
                      const targetChanged = !this.targetLayout ||
                          !boxEqualsRounded(this.targetLayout, newLayout) ||
                          hasRelativeTargetChanged;
                      /**
                       * If the layout hasn't seemed to have changed, it might be that the
                       * element is visually in the same place in the document but its position
                       * relative to its parent has indeed changed. So here we check for that.
                       */
                      const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
                      if (this.options.layoutRoot ||
                          (this.resumeFrom && this.resumeFrom.instance) ||
                          hasOnlyRelativeTargetChanged ||
                          (hasLayoutChanged &&
                              (targetChanged || !this.currentAnimation))) {
                          if (this.resumeFrom) {
                              this.resumingFrom = this.resumeFrom;
                              this.resumingFrom.resumingFrom = undefined;
                          }
                          this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
                          const animationOptions = {
                              ...getValueTransition(layoutTransition, "layout"),
                              onPlay: onLayoutAnimationStart,
                              onComplete: onLayoutAnimationComplete,
                          };
                          if (visualElement.shouldReduceMotion ||
                              this.options.layoutRoot) {
                              animationOptions.delay = 0;
                              animationOptions.type = false;
                          }
                          this.startAnimation(animationOptions);
                      }
                      else {
                          /**
                           * If the layout hasn't changed and we have an animation that hasn't started yet,
                           * finish it immediately. Otherwise it will be animating from a location
                           * that was probably never commited to screen and look like a jumpy box.
                           */
                          if (!hasLayoutChanged) {
                              finishAnimation(this);
                          }
                          if (this.isLead() && this.options.onExitComplete) {
                              this.options.onExitComplete();
                          }
                      }
                      this.targetLayout = newLayout;
                  });
              }
          }
          unmount() {
              this.options.layoutId && this.willUpdate();
              this.root.nodes.remove(this);
              const stack = this.getStack();
              stack && stack.remove(this);
              this.parent && this.parent.children.delete(this);
              this.instance = undefined;
              cancelFrame(this.updateProjection);
          }
          // only on the root
          blockUpdate() {
              this.updateManuallyBlocked = true;
          }
          unblockUpdate() {
              this.updateManuallyBlocked = false;
          }
          isUpdateBlocked() {
              return this.updateManuallyBlocked || this.updateBlockedByResize;
          }
          isTreeAnimationBlocked() {
              return (this.isAnimationBlocked ||
                  (this.parent && this.parent.isTreeAnimationBlocked()) ||
                  false);
          }
          // Note: currently only running on root node
          startUpdate() {
              if (this.isUpdateBlocked())
                  return;
              this.isUpdating = true;
              this.nodes && this.nodes.forEach(resetRotation);
              this.animationId++;
          }
          getTransformTemplate() {
              const { visualElement } = this.options;
              return visualElement && visualElement.getProps().transformTemplate;
          }
          willUpdate(shouldNotifyListeners = true) {
              this.root.hasTreeAnimated = true;
              if (this.root.isUpdateBlocked()) {
                  this.options.onExitComplete && this.options.onExitComplete();
                  return;
              }
              !this.root.isUpdating && this.root.startUpdate();
              if (this.isLayoutDirty)
                  return;
              this.isLayoutDirty = true;
              for (let i = 0; i < this.path.length; i++) {
                  const node = this.path[i];
                  node.shouldResetTransform = true;
                  node.updateScroll("snapshot");
                  if (node.options.layoutRoot) {
                      node.willUpdate(false);
                  }
              }
              const { layoutId, layout } = this.options;
              if (layoutId === undefined && !layout)
                  return;
              const transformTemplate = this.getTransformTemplate();
              this.prevTransformTemplateValue = transformTemplate
                  ? transformTemplate(this.latestValues, "")
                  : undefined;
              this.updateSnapshot();
              shouldNotifyListeners && this.notifyListeners("willUpdate");
          }
          update() {
              this.updateScheduled = false;
              const updateWasBlocked = this.isUpdateBlocked();
              // When doing an instant transition, we skip the layout update,
              // but should still clean up the measurements so that the next
              // snapshot could be taken correctly.
              if (updateWasBlocked) {
                  this.unblockUpdate();
                  this.clearAllSnapshots();
                  this.nodes.forEach(clearMeasurements);
                  return;
              }
              if (!this.isUpdating) {
                  this.nodes.forEach(clearIsLayoutDirty);
              }
              this.isUpdating = false;
              /**
               * Write
               */
              this.nodes.forEach(resetTransformStyle);
              /**
               * Read ==================
               */
              // Update layout measurements of updated children
              this.nodes.forEach(updateLayout);
              /**
               * Write
               */
              // Notify listeners that the layout is updated
              this.nodes.forEach(notifyLayoutUpdate);
              this.clearAllSnapshots();
              /**
               * Manually flush any pending updates. Ideally
               * we could leave this to the following requestAnimationFrame but this seems
               * to leave a flash of incorrectly styled content.
               */
              const now = performance.now();
              frameData.delta = clamp_clamp(0, 1000 / 60, now - frameData.timestamp);
              frameData.timestamp = now;
              frameData.isProcessing = true;
              steps.update.process(frameData);
              steps.preRender.process(frameData);
              steps.render.process(frameData);
              frameData.isProcessing = false;
          }
          didUpdate() {
              if (!this.updateScheduled) {
                  this.updateScheduled = true;
                  queueMicrotask(() => this.update());
              }
          }
          clearAllSnapshots() {
              this.nodes.forEach(clearSnapshot);
              this.sharedNodes.forEach(removeLeadSnapshots);
          }
          scheduleUpdateProjection() {
              frame_frame.preRender(this.updateProjection, false, true);
          }
          scheduleCheckAfterUnmount() {
              /**
               * If the unmounting node is in a layoutGroup and did trigger a willUpdate,
               * we manually call didUpdate to give a chance to the siblings to animate.
               * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.
               */
              frame_frame.postRender(() => {
                  if (this.isLayoutDirty) {
                      this.root.didUpdate();
                  }
                  else {
                      this.root.checkUpdateFailed();
                  }
              });
          }
          /**
           * Update measurements
           */
          updateSnapshot() {
              if (this.snapshot || !this.instance)
                  return;
              this.snapshot = this.measure();
          }
          updateLayout() {
              if (!this.instance)
                  return;
              // TODO: Incorporate into a forwarded scroll offset
              this.updateScroll();
              if (!(this.options.alwaysMeasureLayout && this.isLead()) &&
                  !this.isLayoutDirty) {
                  return;
              }
              /**
               * When a node is mounted, it simply resumes from the prevLead's
               * snapshot instead of taking a new one, but the ancestors scroll
               * might have updated while the prevLead is unmounted. We need to
               * update the scroll again to make sure the layout we measure is
               * up to date.
               */
              if (this.resumeFrom && !this.resumeFrom.instance) {
                  for (let i = 0; i < this.path.length; i++) {
                      const node = this.path[i];
                      node.updateScroll();
                  }
              }
              const prevLayout = this.layout;
              this.layout = this.measure(false);
              this.layoutCorrected = createBox();
              this.isLayoutDirty = false;
              this.projectionDelta = undefined;
              this.notifyListeners("measure", this.layout.layoutBox);
              const { visualElement } = this.options;
              visualElement &&
                  visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);
          }
          updateScroll(phase = "measure") {
              let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
              if (this.scroll &&
                  this.scroll.animationId === this.root.animationId &&
                  this.scroll.phase === phase) {
                  needsMeasurement = false;
              }
              if (needsMeasurement) {
                  this.scroll = {
                      animationId: this.root.animationId,
                      phase,
                      isRoot: checkIsScrollRoot(this.instance),
                      offset: measureScroll(this.instance),
                  };
              }
          }
          resetTransform() {
              if (!resetTransform)
                  return;
              const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
              const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
              const transformTemplate = this.getTransformTemplate();
              const transformTemplateValue = transformTemplate
                  ? transformTemplate(this.latestValues, "")
                  : undefined;
              const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
              if (isResetRequested &&
                  (hasProjection ||
                      hasTransform(this.latestValues) ||
                      transformTemplateHasChanged)) {
                  resetTransform(this.instance, transformTemplateValue);
                  this.shouldResetTransform = false;
                  this.scheduleRender();
              }
          }
          measure(removeTransform = true) {
              const pageBox = this.measurePageBox();
              let layoutBox = this.removeElementScroll(pageBox);
              /**
               * Measurements taken during the pre-render stage
               * still have transforms applied so we remove them
               * via calculation.
               */
              if (removeTransform) {
                  layoutBox = this.removeTransform(layoutBox);
              }
              roundBox(layoutBox);
              return {
                  animationId: this.root.animationId,
                  measuredBox: pageBox,
                  layoutBox,
                  latestValues: {},
                  source: this.id,
              };
          }
          measurePageBox() {
              const { visualElement } = this.options;
              if (!visualElement)
                  return createBox();
              const box = visualElement.measureViewportBox();
              // Remove viewport scroll to give page-relative coordinates
              const { scroll } = this.root;
              if (scroll) {
                  translateAxis(box.x, scroll.offset.x);
                  translateAxis(box.y, scroll.offset.y);
              }
              return box;
          }
          removeElementScroll(box) {
              const boxWithoutScroll = createBox();
              copyBoxInto(boxWithoutScroll, box);
              /**
               * Performance TODO: Keep a cumulative scroll offset down the tree
               * rather than loop back up the path.
               */
              for (let i = 0; i < this.path.length; i++) {
                  const node = this.path[i];
                  const { scroll, options } = node;
                  if (node !== this.root && scroll && options.layoutScroll) {
                      /**
                       * If this is a new scroll root, we want to remove all previous scrolls
                       * from the viewport box.
                       */
                      if (scroll.isRoot) {
                          copyBoxInto(boxWithoutScroll, box);
                          const { scroll: rootScroll } = this.root;
                          /**
                           * Undo the application of page scroll that was originally added
                           * to the measured bounding box.
                           */
                          if (rootScroll) {
                              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);
                              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);
                          }
                      }
                      translateAxis(boxWithoutScroll.x, scroll.offset.x);
                      translateAxis(boxWithoutScroll.y, scroll.offset.y);
                  }
              }
              return boxWithoutScroll;
          }
          applyTransform(box, transformOnly = false) {
              const withTransforms = createBox();
              copyBoxInto(withTransforms, box);
              for (let i = 0; i < this.path.length; i++) {
                  const node = this.path[i];
                  if (!transformOnly &&
                      node.options.layoutScroll &&
                      node.scroll &&
                      node !== node.root) {
                      transformBox(withTransforms, {
                          x: -node.scroll.offset.x,
                          y: -node.scroll.offset.y,
                      });
                  }
                  if (!hasTransform(node.latestValues))
                      continue;
                  transformBox(withTransforms, node.latestValues);
              }
              if (hasTransform(this.latestValues)) {
                  transformBox(withTransforms, this.latestValues);
              }
              return withTransforms;
          }
          removeTransform(box) {
              const boxWithoutTransform = createBox();
              copyBoxInto(boxWithoutTransform, box);
              for (let i = 0; i < this.path.length; i++) {
                  const node = this.path[i];
                  if (!node.instance)
                      continue;
                  if (!hasTransform(node.latestValues))
                      continue;
                  hasScale(node.latestValues) && node.updateSnapshot();
                  const sourceBox = createBox();
                  const nodeBox = node.measurePageBox();
                  copyBoxInto(sourceBox, nodeBox);
                  removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);
              }
              if (hasTransform(this.latestValues)) {
                  removeBoxTransforms(boxWithoutTransform, this.latestValues);
              }
              return boxWithoutTransform;
          }
          setTargetDelta(delta) {
              this.targetDelta = delta;
              this.root.scheduleUpdateProjection();
              this.isProjectionDirty = true;
          }
          setOptions(options) {
              this.options = {
                  ...this.options,
                  ...options,
                  crossfade: options.crossfade !== undefined ? options.crossfade : true,
              };
          }
          clearMeasurements() {
              this.scroll = undefined;
              this.layout = undefined;
              this.snapshot = undefined;
              this.prevTransformTemplateValue = undefined;
              this.targetDelta = undefined;
              this.target = undefined;
              this.isLayoutDirty = false;
          }
          forceRelativeParentToResolveTarget() {
              if (!this.relativeParent)
                  return;
              /**
               * If the parent target isn't up-to-date, force it to update.
               * This is an unfortunate de-optimisation as it means any updating relative
               * projection will cause all the relative parents to recalculate back
               * up the tree.
               */
              if (this.relativeParent.resolvedRelativeTargetAt !==
                  frameData.timestamp) {
                  this.relativeParent.resolveTargetDelta(true);
              }
          }
          resolveTargetDelta(forceRecalculation = false) {
              var _a;
              /**
               * Once the dirty status of nodes has been spread through the tree, we also
               * need to check if we have a shared node of a different depth that has itself
               * been dirtied.
               */
              const lead = this.getLead();
              this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
              this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
              this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
              const isShared = Boolean(this.resumingFrom) || this !== lead;
              /**
               * We don't use transform for this step of processing so we don't
               * need to check whether any nodes have changed transform.
               */
              const canSkip = !(forceRecalculation ||
                  (isShared && this.isSharedProjectionDirty) ||
                  this.isProjectionDirty ||
                  ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||
                  this.attemptToResolveRelativeTarget);
              if (canSkip)
                  return;
              const { layout, layoutId } = this.options;
              /**
               * If we have no layout, we can't perform projection, so early return
               */
              if (!this.layout || !(layout || layoutId))
                  return;
              this.resolvedRelativeTargetAt = frameData.timestamp;
              /**
               * If we don't have a targetDelta but do have a layout, we can attempt to resolve
               * a relativeParent. This will allow a component to perform scale correction
               * even if no animation has started.
               */
              // TODO If this is unsuccessful this currently happens every frame
              if (!this.targetDelta && !this.relativeTarget) {
                  // TODO: This is a semi-repetition of further down this function, make DRY
                  const relativeParent = this.getClosestProjectingParent();
                  if (relativeParent &&
                      relativeParent.layout &&
                      this.animationProgress !== 1) {
                      this.relativeParent = relativeParent;
                      this.forceRelativeParentToResolveTarget();
                      this.relativeTarget = createBox();
                      this.relativeTargetOrigin = createBox();
                      calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
                      copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
                  }
                  else {
                      this.relativeParent = this.relativeTarget = undefined;
                  }
              }
              /**
               * If we have no relative target or no target delta our target isn't valid
               * for this frame.
               */
              if (!this.relativeTarget && !this.targetDelta)
                  return;
              /**
               * Lazy-init target data structure
               */
              if (!this.target) {
                  this.target = createBox();
                  this.targetWithTransforms = createBox();
              }
              /**
               * If we've got a relative box for this component, resolve it into a target relative to the parent.
               */
              if (this.relativeTarget &&
                  this.relativeTargetOrigin &&
                  this.relativeParent &&
                  this.relativeParent.target) {
                  this.forceRelativeParentToResolveTarget();
                  calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
                  /**
                   * If we've only got a targetDelta, resolve it into a target
                   */
              }
              else if (this.targetDelta) {
                  if (Boolean(this.resumingFrom)) {
                      // TODO: This is creating a new object every frame
                      this.target = this.applyTransform(this.layout.layoutBox);
                  }
                  else {
                      copyBoxInto(this.target, this.layout.layoutBox);
                  }
                  applyBoxDelta(this.target, this.targetDelta);
              }
              else {
                  /**
                   * If no target, use own layout as target
                   */
                  copyBoxInto(this.target, this.layout.layoutBox);
              }
              /**
               * If we've been told to attempt to resolve a relative target, do so.
               */
              if (this.attemptToResolveRelativeTarget) {
                  this.attemptToResolveRelativeTarget = false;
                  const relativeParent = this.getClosestProjectingParent();
                  if (relativeParent &&
                      Boolean(relativeParent.resumingFrom) ===
                          Boolean(this.resumingFrom) &&
                      !relativeParent.options.layoutScroll &&
                      relativeParent.target &&
                      this.animationProgress !== 1) {
                      this.relativeParent = relativeParent;
                      this.forceRelativeParentToResolveTarget();
                      this.relativeTarget = createBox();
                      this.relativeTargetOrigin = createBox();
                      calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
                      copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
                  }
                  else {
                      this.relativeParent = this.relativeTarget = undefined;
                  }
              }
              /**
               * Increase debug counter for resolved target deltas
               */
              projectionFrameData.resolvedTargetDeltas++;
          }
          getClosestProjectingParent() {
              if (!this.parent ||
                  hasScale(this.parent.latestValues) ||
                  has2DTranslate(this.parent.latestValues)) {
                  return undefined;
              }
              if (this.parent.isProjecting()) {
                  return this.parent;
              }
              else {
                  return this.parent.getClosestProjectingParent();
              }
          }
          isProjecting() {
              return Boolean((this.relativeTarget ||
                  this.targetDelta ||
                  this.options.layoutRoot) &&
                  this.layout);
          }
          calcProjection() {
              var _a;
              const lead = this.getLead();
              const isShared = Boolean(this.resumingFrom) || this !== lead;
              let canSkip = true;
              /**
               * If this is a normal layout animation and neither this node nor its nearest projecting
               * is dirty then we can't skip.
               */
              if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {
                  canSkip = false;
              }
              /**
               * If this is a shared layout animation and this node's shared projection is dirty then
               * we can't skip.
               */
              if (isShared &&
                  (this.isSharedProjectionDirty || this.isTransformDirty)) {
                  canSkip = false;
              }
              /**
               * If we have resolved the target this frame we must recalculate the
               * projection to ensure it visually represents the internal calculations.
               */
              if (this.resolvedRelativeTargetAt === frameData.timestamp) {
                  canSkip = false;
              }
              if (canSkip)
                  return;
              const { layout, layoutId } = this.options;
              /**
               * If this section of the tree isn't animating we can
               * delete our target sources for the following frame.
               */
              this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||
                  this.currentAnimation ||
                  this.pendingAnimation);
              if (!this.isTreeAnimating) {
                  this.targetDelta = this.relativeTarget = undefined;
              }
              if (!this.layout || !(layout || layoutId))
                  return;
              /**
               * Reset the corrected box with the latest values from box, as we're then going
               * to perform mutative operations on it.
               */
              copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
              /**
               * Record previous tree scales before updating.
               */
              const prevTreeScaleX = this.treeScale.x;
              const prevTreeScaleY = this.treeScale.y;
              /**
               * Apply all the parent deltas to this box to produce the corrected box. This
               * is the layout box, as it will appear on screen as a result of the transforms of its parents.
               */
              applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
              /**
               * If this layer needs to perform scale correction but doesn't have a target,
               * use the layout as the target.
               */
              if (lead.layout &&
                  !lead.target &&
                  (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
                  lead.target = lead.layout.layoutBox;
              }
              const { target } = lead;
              if (!target) {
                  /**
                   * If we don't have a target to project into, but we were previously
                   * projecting, we want to remove the stored transform and schedule
                   * a render to ensure the elements reflect the removed transform.
                   */
                  if (this.projectionTransform) {
                      this.projectionDelta = createDelta();
                      this.projectionTransform = "none";
                      this.scheduleRender();
                  }
                  return;
              }
              if (!this.projectionDelta) {
                  this.projectionDelta = createDelta();
                  this.projectionDeltaWithTransform = createDelta();
              }
              const prevProjectionTransform = this.projectionTransform;
              /**
               * Update the delta between the corrected box and the target box before user-set transforms were applied.
               * This will allow us to calculate the corrected borderRadius and boxShadow to compensate
               * for our layout reprojection, but still allow them to be scaled correctly by the user.
               * It might be that to simplify this we may want to accept that user-set scale is also corrected
               * and we wouldn't have to keep and calc both deltas, OR we could support a user setting
               * to allow people to choose whether these styles are corrected based on just the
               * layout reprojection or the final bounding box.
               */
              calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
              this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
              if (this.projectionTransform !== prevProjectionTransform ||
                  this.treeScale.x !== prevTreeScaleX ||
                  this.treeScale.y !== prevTreeScaleY) {
                  this.hasProjected = true;
                  this.scheduleRender();
                  this.notifyListeners("projectionUpdate", target);
              }
              /**
               * Increase debug counter for recalculated projections
               */
              projectionFrameData.recalculatedProjection++;
          }
          hide() {
              this.isVisible = false;
              // TODO: Schedule render
          }
          show() {
              this.isVisible = true;
              // TODO: Schedule render
          }
          scheduleRender(notifyAll = true) {
              this.options.scheduleRender && this.options.scheduleRender();
              if (notifyAll) {
                  const stack = this.getStack();
                  stack && stack.scheduleRender();
              }
              if (this.resumingFrom && !this.resumingFrom.instance) {
                  this.resumingFrom = undefined;
              }
          }
          setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
              const snapshot = this.snapshot;
              const snapshotLatestValues = snapshot
                  ? snapshot.latestValues
                  : {};
              const mixedValues = { ...this.latestValues };
              const targetDelta = createDelta();
              if (!this.relativeParent ||
                  !this.relativeParent.options.layoutRoot) {
                  this.relativeTarget = this.relativeTargetOrigin = undefined;
              }
              this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
              const relativeLayout = createBox();
              const snapshotSource = snapshot ? snapshot.source : undefined;
              const layoutSource = this.layout ? this.layout.source : undefined;
              const isSharedLayoutAnimation = snapshotSource !== layoutSource;
              const stack = this.getStack();
              const isOnlyMember = !stack || stack.members.length <= 1;
              const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&
                  !isOnlyMember &&
                  this.options.crossfade === true &&
                  !this.path.some(hasOpacityCrossfade));
              this.animationProgress = 0;
              let prevRelativeTarget;
              this.mixTargetDelta = (latest) => {
                  const progress = latest / 1000;
                  mixAxisDelta(targetDelta.x, delta.x, progress);
                  mixAxisDelta(targetDelta.y, delta.y, progress);
                  this.setTargetDelta(targetDelta);
                  if (this.relativeTarget &&
                      this.relativeTargetOrigin &&
                      this.layout &&
                      this.relativeParent &&
                      this.relativeParent.layout) {
                      calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
                      mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);
                      /**
                       * If this is an unchanged relative target we can consider the
                       * projection not dirty.
                       */
                      if (prevRelativeTarget &&
                          boxEquals(this.relativeTarget, prevRelativeTarget)) {
                          this.isProjectionDirty = false;
                      }
                      if (!prevRelativeTarget)
                          prevRelativeTarget = createBox();
                      copyBoxInto(prevRelativeTarget, this.relativeTarget);
                  }
                  if (isSharedLayoutAnimation) {
                      this.animationValues = mixedValues;
                      mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);
                  }
                  this.root.scheduleUpdateProjection();
                  this.scheduleRender();
                  this.animationProgress = progress;
              };
              this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);
          }
          startAnimation(options) {
              this.notifyListeners("animationStart");
              this.currentAnimation && this.currentAnimation.stop();
              if (this.resumingFrom && this.resumingFrom.currentAnimation) {
                  this.resumingFrom.currentAnimation.stop();
              }
              if (this.pendingAnimation) {
                  cancelFrame(this.pendingAnimation);
                  this.pendingAnimation = undefined;
              }
              /**
               * Start the animation in the next frame to have a frame with progress 0,
               * where the target is the same as when the animation started, so we can
               * calculate the relative positions correctly for instant transitions.
               */
              this.pendingAnimation = frame_frame.update(() => {
                  globalProjectionState.hasAnimatedSinceResize = true;
                  this.currentAnimation = animateSingleValue(0, animationTarget, {
                      ...options,
                      onUpdate: (latest) => {
                          this.mixTargetDelta(latest);
                          options.onUpdate && options.onUpdate(latest);
                      },
                      onComplete: () => {
                          options.onComplete && options.onComplete();
                          this.completeAnimation();
                      },
                  });
                  if (this.resumingFrom) {
                      this.resumingFrom.currentAnimation = this.currentAnimation;
                  }
                  this.pendingAnimation = undefined;
              });
          }
          completeAnimation() {
              if (this.resumingFrom) {
                  this.resumingFrom.currentAnimation = undefined;
                  this.resumingFrom.preserveOpacity = undefined;
              }
              const stack = this.getStack();
              stack && stack.exitAnimationComplete();
              this.resumingFrom =
                  this.currentAnimation =
                      this.animationValues =
                          undefined;
              this.notifyListeners("animationComplete");
          }
          finishAnimation() {
              if (this.currentAnimation) {
                  this.mixTargetDelta && this.mixTargetDelta(animationTarget);
                  this.currentAnimation.stop();
              }
              this.completeAnimation();
          }
          applyTransformsToTarget() {
              const lead = this.getLead();
              let { targetWithTransforms, target, layout, latestValues } = lead;
              if (!targetWithTransforms || !target || !layout)
                  return;
              /**
               * If we're only animating position, and this element isn't the lead element,
               * then instead of projecting into the lead box we instead want to calculate
               * a new target that aligns the two boxes but maintains the layout shape.
               */
              if (this !== lead &&
                  this.layout &&
                  layout &&
                  shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {
                  target = this.target || createBox();
                  const xLength = calcLength(this.layout.layoutBox.x);
                  target.x.min = lead.target.x.min;
                  target.x.max = target.x.min + xLength;
                  const yLength = calcLength(this.layout.layoutBox.y);
                  target.y.min = lead.target.y.min;
                  target.y.max = target.y.min + yLength;
              }
              copyBoxInto(targetWithTransforms, target);
              /**
               * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.
               * This is the final box that we will then project into by calculating a transform delta and
               * applying it to the corrected box.
               */
              transformBox(targetWithTransforms, latestValues);
              /**
               * Update the delta between the corrected box and the final target box, after
               * user-set transforms are applied to it. This will be used by the renderer to
               * create a transform style that will reproject the element from its layout layout
               * into the desired bounding box.
               */
              calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
          }
          registerSharedNode(layoutId, node) {
              if (!this.sharedNodes.has(layoutId)) {
                  this.sharedNodes.set(layoutId, new NodeStack());
              }
              const stack = this.sharedNodes.get(layoutId);
              stack.add(node);
              const config = node.options.initialPromotionConfig;
              node.promote({
                  transition: config ? config.transition : undefined,
                  preserveFollowOpacity: config && config.shouldPreserveFollowOpacity
                      ? config.shouldPreserveFollowOpacity(node)
                      : undefined,
              });
          }
          isLead() {
              const stack = this.getStack();
              return stack ? stack.lead === this : true;
          }
          getLead() {
              var _a;
              const { layoutId } = this.options;
              return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;
          }
          getPrevLead() {
              var _a;
              const { layoutId } = this.options;
              return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;
          }
          getStack() {
              const { layoutId } = this.options;
              if (layoutId)
                  return this.root.sharedNodes.get(layoutId);
          }
          promote({ needsReset, transition, preserveFollowOpacity, } = {}) {
              const stack = this.getStack();
              if (stack)
                  stack.promote(this, preserveFollowOpacity);
              if (needsReset) {
                  this.projectionDelta = undefined;
                  this.needsReset = true;
              }
              if (transition)
                  this.setOptions({ transition });
          }
          relegate() {
              const stack = this.getStack();
              if (stack) {
                  return stack.relegate(this);
              }
              else {
                  return false;
              }
          }
          resetRotation() {
              const { visualElement } = this.options;
              if (!visualElement)
                  return;
              // If there's no detected rotation values, we can early return without a forced render.
              let hasRotate = false;
              /**
               * An unrolled check for rotation values. Most elements don't have any rotation and
               * skipping the nested loop and new object creation is 50% faster.
               */
              const { latestValues } = visualElement;
              if (latestValues.rotate ||
                  latestValues.rotateX ||
                  latestValues.rotateY ||
                  latestValues.rotateZ) {
                  hasRotate = true;
              }
              // If there's no rotation values, we don't need to do any more.
              if (!hasRotate)
                  return;
              const resetValues = {};
              // Check the rotate value of all axes and reset to 0
              for (let i = 0; i < transformAxes.length; i++) {
                  const key = "rotate" + transformAxes[i];
                  // Record the rotation and then temporarily set it to 0
                  if (latestValues[key]) {
                      resetValues[key] = latestValues[key];
                      visualElement.setStaticValue(key, 0);
                  }
              }
              // Force a render of this element to apply the transform with all rotations
              // set to 0.
              visualElement.render();
              // Put back all the values we reset
              for (const key in resetValues) {
                  visualElement.setStaticValue(key, resetValues[key]);
              }
              // Schedule a render for the next frame. This ensures we won't visually
              // see the element with the reset rotate value applied.
              visualElement.scheduleRender();
          }
          getProjectionStyles(styleProp = {}) {
              var _a, _b;
              // TODO: Return lifecycle-persistent object
              const styles = {};
              if (!this.instance || this.isSVG)
                  return styles;
              if (!this.isVisible) {
                  return { visibility: "hidden" };
              }
              else {
                  styles.visibility = "";
              }
              const transformTemplate = this.getTransformTemplate();
              if (this.needsReset) {
                  this.needsReset = false;
                  styles.opacity = "";
                  styles.pointerEvents =
                      resolveMotionValue(styleProp.pointerEvents) || "";
                  styles.transform = transformTemplate
                      ? transformTemplate(this.latestValues, "")
                      : "none";
                  return styles;
              }
              const lead = this.getLead();
              if (!this.projectionDelta || !this.layout || !lead.target) {
                  const emptyStyles = {};
                  if (this.options.layoutId) {
                      emptyStyles.opacity =
                          this.latestValues.opacity !== undefined
                              ? this.latestValues.opacity
                              : 1;
                      emptyStyles.pointerEvents =
                          resolveMotionValue(styleProp.pointerEvents) || "";
                  }
                  if (this.hasProjected && !hasTransform(this.latestValues)) {
                      emptyStyles.transform = transformTemplate
                          ? transformTemplate({}, "")
                          : "none";
                      this.hasProjected = false;
                  }
                  return emptyStyles;
              }
              const valuesToRender = lead.animationValues || lead.latestValues;
              this.applyTransformsToTarget();
              styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
              if (transformTemplate) {
                  styles.transform = transformTemplate(valuesToRender, styles.transform);
              }
              const { x, y } = this.projectionDelta;
              styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
              if (lead.animationValues) {
                  /**
                   * If the lead component is animating, assign this either the entering/leaving
                   * opacity
                   */
                  styles.opacity =
                      lead === this
                          ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1
                          : this.preserveOpacity
                              ? this.latestValues.opacity
                              : valuesToRender.opacityExit;
              }
              else {
                  /**
                   * Or we're not animating at all, set the lead component to its layout
                   * opacity and other components to hidden.
                   */
                  styles.opacity =
                      lead === this
                          ? valuesToRender.opacity !== undefined
                              ? valuesToRender.opacity
                              : ""
                          : valuesToRender.opacityExit !== undefined
                              ? valuesToRender.opacityExit
                              : 0;
              }
              /**
               * Apply scale correction
               */
              for (const key in scaleCorrectors) {
                  if (valuesToRender[key] === undefined)
                      continue;
                  const { correct, applyTo } = scaleCorrectors[key];
                  /**
                   * Only apply scale correction to the value if we have an
                   * active projection transform. Otherwise these values become
                   * vulnerable to distortion if the element changes size without
                   * a corresponding layout animation.
                   */
                  const corrected = styles.transform === "none"
                      ? valuesToRender[key]
                      : correct(valuesToRender[key], lead);
                  if (applyTo) {
                      const num = applyTo.length;
                      for (let i = 0; i < num; i++) {
                          styles[applyTo[i]] = corrected;
                      }
                  }
                  else {
                      styles[key] = corrected;
                  }
              }
              /**
               * Disable pointer events on follow components. This is to ensure
               * that if a follow component covers a lead component it doesn't block
               * pointer events on the lead.
               */
              if (this.options.layoutId) {
                  styles.pointerEvents =
                      lead === this
                          ? resolveMotionValue(styleProp.pointerEvents) || ""
                          : "none";
              }
              return styles;
          }
          clearSnapshot() {
              this.resumeFrom = this.snapshot = undefined;
          }
          // Only run on root
          resetTree() {
              this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });
              this.root.nodes.forEach(clearMeasurements);
              this.root.sharedNodes.clear();
          }
      };
  }
  function updateLayout(node) {
      node.updateLayout();
  }
  function notifyLayoutUpdate(node) {
      var _a;
      const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;
      if (node.isLead() &&
          node.layout &&
          snapshot &&
          node.hasListeners("didUpdate")) {
          const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;
          const { animationType } = node.options;
          const isShared = snapshot.source !== node.layout.source;
          // TODO Maybe we want to also resize the layout snapshot so we don't trigger
          // animations for instance if layout="size" and an element has only changed position
          if (animationType === "size") {
              eachAxis((axis) => {
                  const axisSnapshot = isShared
                      ? snapshot.measuredBox[axis]
                      : snapshot.layoutBox[axis];
                  const length = calcLength(axisSnapshot);
                  axisSnapshot.min = layout[axis].min;
                  axisSnapshot.max = axisSnapshot.min + length;
              });
          }
          else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {
              eachAxis((axis) => {
                  const axisSnapshot = isShared
                      ? snapshot.measuredBox[axis]
                      : snapshot.layoutBox[axis];
                  const length = calcLength(layout[axis]);
                  axisSnapshot.max = axisSnapshot.min + length;
                  /**
                   * Ensure relative target gets resized and rerendererd
                   */
                  if (node.relativeTarget && !node.currentAnimation) {
                      node.isProjectionDirty = true;
                      node.relativeTarget[axis].max =
                          node.relativeTarget[axis].min + length;
                  }
              });
          }
          const layoutDelta = createDelta();
          calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);
          const visualDelta = createDelta();
          if (isShared) {
              calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);
          }
          else {
              calcBoxDelta(visualDelta, layout, snapshot.layoutBox);
          }
          const hasLayoutChanged = !isDeltaZero(layoutDelta);
          let hasRelativeTargetChanged = false;
          if (!node.resumeFrom) {
              const relativeParent = node.getClosestProjectingParent();
              /**
               * If the relativeParent is itself resuming from a different element then
               * the relative snapshot is not relavent
               */
              if (relativeParent && !relativeParent.resumeFrom) {
                  const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
                  if (parentSnapshot && parentLayout) {
                      const relativeSnapshot = createBox();
                      calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
                      const relativeLayout = createBox();
                      calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);
                      if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
                          hasRelativeTargetChanged = true;
                      }
                      if (relativeParent.options.layoutRoot) {
                          node.relativeTarget = relativeLayout;
                          node.relativeTargetOrigin = relativeSnapshot;
                          node.relativeParent = relativeParent;
                      }
                  }
              }
          }
          node.notifyListeners("didUpdate", {
              layout,
              snapshot,
              delta: visualDelta,
              layoutDelta,
              hasLayoutChanged,
              hasRelativeTargetChanged,
          });
      }
      else if (node.isLead()) {
          const { onExitComplete } = node.options;
          onExitComplete && onExitComplete();
      }
      /**
       * Clearing transition
       * TODO: Investigate why this transition is being passed in as {type: false } from Framer
       * and why we need it at all
       */
      node.options.transition = undefined;
  }
  function propagateDirtyNodes(node) {
      /**
       * Increase debug counter for nodes encountered this frame
       */
      projectionFrameData.totalNodes++;
      if (!node.parent)
          return;
      /**
       * If this node isn't projecting, propagate isProjectionDirty. It will have
       * no performance impact but it will allow the next child that *is* projecting
       * but *isn't* dirty to just check its parent to see if *any* ancestor needs
       * correcting.
       */
      if (!node.isProjecting()) {
          node.isProjectionDirty = node.parent.isProjectionDirty;
      }
      /**
       * Propagate isSharedProjectionDirty and isTransformDirty
       * throughout the whole tree. A future revision can take another look at
       * this but for safety we still recalcualte shared nodes.
       */
      node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||
          node.parent.isProjectionDirty ||
          node.parent.isSharedProjectionDirty));
      node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);
  }
  function cleanDirtyNodes(node) {
      node.isProjectionDirty =
          node.isSharedProjectionDirty =
              node.isTransformDirty =
                  false;
  }
  function clearSnapshot(node) {
      node.clearSnapshot();
  }
  function clearMeasurements(node) {
      node.clearMeasurements();
  }
  function clearIsLayoutDirty(node) {
      node.isLayoutDirty = false;
  }
  function resetTransformStyle(node) {
      const { visualElement } = node.options;
      if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
          visualElement.notify("BeforeLayoutMeasure");
      }
      node.resetTransform();
  }
  function finishAnimation(node) {
      node.finishAnimation();
      node.targetDelta = node.relativeTarget = node.target = undefined;
      node.isProjectionDirty = true;
  }
  function resolveTargetDelta(node) {
      node.resolveTargetDelta();
  }
  function calcProjection(node) {
      node.calcProjection();
  }
  function resetRotation(node) {
      node.resetRotation();
  }
  function removeLeadSnapshots(stack) {
      stack.removeLeadSnapshot();
  }
  function mixAxisDelta(output, delta, p) {
      output.translate = mix(delta.translate, 0, p);
      output.scale = mix(delta.scale, 1, p);
      output.origin = delta.origin;
      output.originPoint = delta.originPoint;
  }
  function mixAxis(output, from, to, p) {
      output.min = mix(from.min, to.min, p);
      output.max = mix(from.max, to.max, p);
  }
  function mixBox(output, from, to, p) {
      mixAxis(output.x, from.x, to.x, p);
      mixAxis(output.y, from.y, to.y, p);
  }
  function hasOpacityCrossfade(node) {
      return (node.animationValues && node.animationValues.opacityExit !== undefined);
  }
  const defaultLayoutTransition = {
      duration: 0.45,
      ease: [0.4, 0, 0.1, 1],
  };
  const userAgentContains = (string) => typeof navigator !== "undefined" &&
      navigator.userAgent.toLowerCase().includes(string);
  /**
   * Measured bounding boxes must be rounded in Safari and
   * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements
   * can appear to jump.
   */
  const roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/")
      ? Math.round
      : noop_noop;
  function roundAxis(axis) {
      // Round to the nearest .5 pixels to support subpixel layouts
      axis.min = roundPoint(axis.min);
      axis.max = roundPoint(axis.max);
  }
  function roundBox(box) {
      roundAxis(box.x);
      roundAxis(box.y);
  }
  function shouldAnimatePositionOnly(animationType, snapshot, layout) {
      return (animationType === "position" ||
          (animationType === "preserve-aspect" &&
              !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
  
  
  
  const DocumentProjectionNode = createProjectionNode({
      attachResizeListener: (ref, notify) => addDomEvent(ref, "resize", notify),
      measureScroll: () => ({
          x: document.documentElement.scrollLeft || document.body.scrollLeft,
          y: document.documentElement.scrollTop || document.body.scrollTop,
      }),
      checkIsScrollRoot: () => true,
  });
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
  
  
  
  const rootProjectionNode = {
      current: undefined,
  };
  const HTMLProjectionNode = createProjectionNode({
      measureScroll: (instance) => ({
          x: instance.scrollLeft,
          y: instance.scrollTop,
      }),
      defaultParent: () => {
          if (!rootProjectionNode.current) {
              const documentNode = new DocumentProjectionNode({});
              documentNode.mount(window);
              documentNode.setOptions({ layoutScroll: true });
              rootProjectionNode.current = documentNode;
          }
          return rootProjectionNode.current;
      },
      resetTransform: (instance, value) => {
          instance.style.transform = value !== undefined ? value : "none";
      },
      checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed"),
  });
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/drag.mjs
  
  
  
  
  
  const drag = {
      pan: {
          Feature: PanGesture,
      },
      drag: {
          Feature: DragGesture,
          ProjectionNode: HTMLProjectionNode,
          MeasureLayout: MeasureLayout,
      },
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
  
  
  
  
  /**
   * Parse Framer's special CSS variable format into a CSS token and a fallback.
   *
   * ```
   * `var(--foo, #fff)` => [`--foo`, '#fff']
   * ```
   *
   * @param current
   */
  const splitCSSVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
  function parseCSSVariable(current) {
      const match = splitCSSVariableRegex.exec(current);
      if (!match)
          return [,];
      const [, token, fallback] = match;
      return [token, fallback];
  }
  const maxDepth = 4;
  function getVariableValue(current, element, depth = 1) {
      invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
      const [token, fallback] = parseCSSVariable(current);
      // No CSS variable detected
      if (!token)
          return;
      // Attempt to read this CSS variable off the element
      const resolved = window.getComputedStyle(element).getPropertyValue(token);
      if (resolved) {
          const trimmed = resolved.trim();
          return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
      }
      else if (isCSSVariableToken(fallback)) {
          // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.
          return getVariableValue(fallback, element, depth + 1);
      }
      else {
          return fallback;
      }
  }
  /**
   * Resolve CSS variables from
   *
   * @internal
   */
  function resolveCSSVariables(visualElement, { ...target }, transitionEnd) {
      const element = visualElement.current;
      if (!(element instanceof Element))
          return { target, transitionEnd };
      // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`
      // only if they change but I think this reads clearer and this isn't a performance-critical path.
      if (transitionEnd) {
          transitionEnd = { ...transitionEnd };
      }
      // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved
      visualElement.values.forEach((value) => {
          const current = value.get();
          if (!isCSSVariableToken(current))
              return;
          const resolved = getVariableValue(current, element);
          if (resolved)
              value.set(resolved);
      });
      // Cycle through every target property and resolve CSS variables. Currently
      // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`
      for (const key in target) {
          const current = target[key];
          if (!isCSSVariableToken(current))
              continue;
          const resolved = getVariableValue(current, element);
          if (!resolved)
              continue;
          // Clone target if it hasn't already been
          target[key] = resolved;
          if (!transitionEnd)
              transitionEnd = {};
          // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved
          // CSS variable. This will ensure that after the animation the component will reflect
          // changes in the value of the CSS variable.
          if (transitionEnd[key] === undefined) {
              transitionEnd[key] = current;
          }
      }
      return { target, transitionEnd };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
  
  
  
  
  
  
  
  
  const positionalKeys = new Set([
      "width",
      "height",
      "top",
      "left",
      "right",
      "bottom",
      "x",
      "y",
      "translateX",
      "translateY",
  ]);
  const isPositionalKey = (key) => positionalKeys.has(key);
  const hasPositionalKey = (target) => {
      return Object.keys(target).some(isPositionalKey);
  };
  const isNumOrPxType = (v) => v === number || v === px;
  const getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
  const getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {
      if (transform === "none" || !transform)
          return 0;
      const matrix3d = transform.match(/^matrix3d\((.+)\)$/);
      if (matrix3d) {
          return getPosFromMatrix(matrix3d[1], pos3);
      }
      else {
          const matrix = transform.match(/^matrix\((.+)\)$/);
          if (matrix) {
              return getPosFromMatrix(matrix[1], pos2);
          }
          else {
              return 0;
          }
      }
  };
  const transformKeys = new Set(["x", "y", "z"]);
  const nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
  function removeNonTranslationalTransform(visualElement) {
      const removedTransforms = [];
      nonTranslationalTransformKeys.forEach((key) => {
          const value = visualElement.getValue(key);
          if (value !== undefined) {
              removedTransforms.push([key, value.get()]);
              value.set(key.startsWith("scale") ? 1 : 0);
          }
      });
      // Apply changes to element before measurement
      if (removedTransforms.length)
          visualElement.render();
      return removedTransforms;
  }
  const positionalValues = {
      // Dimensions
      width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
      height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
      top: (_bbox, { top }) => parseFloat(top),
      left: (_bbox, { left }) => parseFloat(left),
      bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),
      right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),
      // Transform
      x: getTranslateFromMatrix(4, 13),
      y: getTranslateFromMatrix(5, 14),
  };
  // Alias translate longform names
  positionalValues.translateX = positionalValues.x;
  positionalValues.translateY = positionalValues.y;
  const convertChangedValueTypes = (target, visualElement, changedKeys) => {
      const originBbox = visualElement.measureViewportBox();
      const element = visualElement.current;
      const elementComputedStyle = getComputedStyle(element);
      const { display } = elementComputedStyle;
      const origin = {};
      // If the element is currently set to display: "none", make it visible before
      // measuring the target bounding box
      if (display === "none") {
          visualElement.setStaticValue("display", target.display || "block");
      }
      /**
       * Record origins before we render and update styles
       */
      changedKeys.forEach((key) => {
          origin[key] = positionalValues[key](originBbox, elementComputedStyle);
      });
      // Apply the latest values (as set in checkAndConvertChangedValueTypes)
      visualElement.render();
      const targetBbox = visualElement.measureViewportBox();
      changedKeys.forEach((key) => {
          // Restore styles to their **calculated computed style**, not their actual
          // originally set style. This allows us to animate between equivalent pixel units.
          const value = visualElement.getValue(key);
          value && value.jump(origin[key]);
          target[key] = positionalValues[key](targetBbox, elementComputedStyle);
      });
      return target;
  };
  const checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {
      target = { ...target };
      transitionEnd = { ...transitionEnd };
      const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
      // We want to remove any transform values that could affect the element's bounding box before
      // it's measured. We'll reapply these later.
      let removedTransformValues = [];
      let hasAttemptedToRemoveTransformValues = false;
      const changedValueTypeKeys = [];
      targetPositionalKeys.forEach((key) => {
          const value = visualElement.getValue(key);
          if (!visualElement.hasValue(key))
              return;
          let from = origin[key];
          let fromType = findDimensionValueType(from);
          const to = target[key];
          let toType;
          // TODO: The current implementation of this basically throws an error
          // if you try and do value conversion via keyframes. There's probably
          // a way of doing this but the performance implications would need greater scrutiny,
          // as it'd be doing multiple resize-remeasure operations.
          if (isKeyframesTarget(to)) {
              const numKeyframes = to.length;
              const fromIndex = to[0] === null ? 1 : 0;
              from = to[fromIndex];
              fromType = findDimensionValueType(from);
              for (let i = fromIndex; i < numKeyframes; i++) {
                  /**
                   * Don't allow wildcard keyframes to be used to detect
                   * a difference in value types.
                   */
                  if (to[i] === null)
                      break;
                  if (!toType) {
                      toType = findDimensionValueType(to[i]);
                      invariant(toType === fromType ||
                          (isNumOrPxType(fromType) && isNumOrPxType(toType)), "Keyframes must be of the same dimension as the current value");
                  }
                  else {
                      invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
                  }
              }
          }
          else {
              toType = findDimensionValueType(to);
          }
          if (fromType !== toType) {
              // If they're both just number or px, convert them both to numbers rather than
              // relying on resize/remeasure to convert (which is wasteful in this situation)
              if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
                  const current = value.get();
                  if (typeof current === "string") {
                      value.set(parseFloat(current));
                  }
                  if (typeof to === "string") {
                      target[key] = parseFloat(to);
                  }
                  else if (Array.isArray(to) && toType === px) {
                      target[key] = to.map(parseFloat);
                  }
              }
              else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&
                  (toType === null || toType === void 0 ? void 0 : toType.transform) &&
                  (from === 0 || to === 0)) {
                  // If one or the other value is 0, it's safe to coerce it to the
                  // type of the other without measurement
                  if (from === 0) {
                      value.set(toType.transform(from));
                  }
                  else {
                      target[key] = fromType.transform(to);
                  }
              }
              else {
                  // If we're going to do value conversion via DOM measurements, we first
                  // need to remove non-positional transform values that could affect the bbox measurements.
                  if (!hasAttemptedToRemoveTransformValues) {
                      removedTransformValues =
                          removeNonTranslationalTransform(visualElement);
                      hasAttemptedToRemoveTransformValues = true;
                  }
                  changedValueTypeKeys.push(key);
                  transitionEnd[key] =
                      transitionEnd[key] !== undefined
                          ? transitionEnd[key]
                          : target[key];
                  value.jump(to);
              }
          }
      });
      if (changedValueTypeKeys.length) {
          const scrollY = changedValueTypeKeys.indexOf("height") >= 0
              ? window.pageYOffset
              : null;
          const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
          // If we removed transform values, reapply them before the next render
          if (removedTransformValues.length) {
              removedTransformValues.forEach(([key, value]) => {
                  visualElement.getValue(key).set(value);
              });
          }
          // Reapply original values
          visualElement.render();
          // Restore scroll position
          if (isBrowser && scrollY !== null) {
              window.scrollTo({ top: scrollY });
          }
          return { target: convertedTarget, transitionEnd };
      }
      else {
          return { target, transitionEnd };
      }
  };
  /**
   * Convert value types for x/y/width/height/top/left/bottom/right
   *
   * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`
   *
   * @internal
   */
  function unitConversion(visualElement, target, origin, transitionEnd) {
      return hasPositionalKey(target)
          ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)
          : { target, transitionEnd };
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
  
  
  
  /**
   * Parse a DOM variant to make it animatable. This involves resolving CSS variables
   * and ensuring animations like "20%" => "calc(50vw)" are performed in pixels.
   */
  const parseDomVariant = (visualElement, target, origin, transitionEnd) => {
      const resolved = resolveCSSVariables(visualElement, target, transitionEnd);
      target = resolved.target;
      transitionEnd = resolved.transitionEnd;
      return unitConversion(visualElement, target, origin, transitionEnd);
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs
  // Does this device prefer reduced motion? Returns `null` server-side.
  const prefersReducedMotion = { current: null };
  const hasReducedMotionListener = { current: false };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
  
  
  
  function initPrefersReducedMotion() {
      hasReducedMotionListener.current = true;
      if (!isBrowser)
          return;
      if (window.matchMedia) {
          const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
          const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);
          motionMediaQuery.addListener(setReducedMotionPreferences);
          setReducedMotionPreferences();
      }
      else {
          prefersReducedMotion.current = false;
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
  
  
  
  
  
  function updateMotionValuesFromProps(element, next, prev) {
      const { willChange } = next;
      for (const key in next) {
          const nextValue = next[key];
          const prevValue = prev[key];
          if (isMotionValue(nextValue)) {
              /**
               * If this is a motion value found in props or style, we want to add it
               * to our visual element's motion value map.
               */
              element.addValue(key, nextValue);
              if (isWillChangeMotionValue(willChange)) {
                  willChange.add(key);
              }
              /**
               * Check the version of the incoming motion value with this version
               * and warn against mismatches.
               */
              if (false) {}
          }
          else if (isMotionValue(prevValue)) {
              /**
               * If we're swapping from a motion value to a static value,
               * create a new motion value from that
               */
              element.addValue(key, motionValue(nextValue, { owner: element }));
              if (isWillChangeMotionValue(willChange)) {
                  willChange.remove(key);
              }
          }
          else if (prevValue !== nextValue) {
              /**
               * If this is a flat value that has changed, update the motion value
               * or create one if it doesn't exist. We only want to do this if we're
               * not handling the value with our animation state.
               */
              if (element.hasValue(key)) {
                  const existingValue = element.getValue(key);
                  // TODO: Only update values that aren't being animated or even looked at
                  !existingValue.hasAnimated && existingValue.set(nextValue);
              }
              else {
                  const latestValue = element.getStaticValue(key);
                  element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));
              }
          }
      }
      // Handle removed values
      for (const key in prev) {
          if (next[key] === undefined)
              element.removeValue(key);
      }
      return next;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/store.mjs
  const visualElementStore = new WeakMap();
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/VisualElement.mjs
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  const featureNames = Object.keys(featureDefinitions);
  const numFeatures = featureNames.length;
  const propEventHandlers = [
      "AnimationStart",
      "AnimationComplete",
      "Update",
      "BeforeLayoutMeasure",
      "LayoutMeasure",
      "LayoutAnimationStart",
      "LayoutAnimationComplete",
  ];
  const numVariantProps = variantProps.length;
  /**
   * A VisualElement is an imperative abstraction around UI elements such as
   * HTMLElement, SVGElement, Three.Object3D etc.
   */
  class VisualElement {
      constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {
          /**
           * A reference to the current underlying Instance, e.g. a HTMLElement
           * or Three.Mesh etc.
           */
          this.current = null;
          /**
           * A set containing references to this VisualElement's children.
           */
          this.children = new Set();
          /**
           * Determine what role this visual element should take in the variant tree.
           */
          this.isVariantNode = false;
          this.isControllingVariants = false;
          /**
           * Decides whether this VisualElement should animate in reduced motion
           * mode.
           *
           * TODO: This is currently set on every individual VisualElement but feels
           * like it could be set globally.
           */
          this.shouldReduceMotion = null;
          /**
           * A map of all motion values attached to this visual element. Motion
           * values are source of truth for any given animated value. A motion
           * value might be provided externally by the component via props.
           */
          this.values = new Map();
          /**
           * Cleanup functions for active features (hover/tap/exit etc)
           */
          this.features = {};
          /**
           * A map of every subscription that binds the provided or generated
           * motion values onChange listeners to this visual element.
           */
          this.valueSubscriptions = new Map();
          /**
           * A reference to the previously-provided motion values as returned
           * from scrapeMotionValuesFromProps. We use the keys in here to determine
           * if any motion values need to be removed after props are updated.
           */
          this.prevMotionValues = {};
          /**
           * An object containing a SubscriptionManager for each active event.
           */
          this.events = {};
          /**
           * An object containing an unsubscribe function for each prop event subscription.
           * For example, every "Update" event can have multiple subscribers via
           * VisualElement.on(), but only one of those can be defined via the onUpdate prop.
           */
          this.propEventSubscriptions = {};
          this.notifyUpdate = () => this.notify("Update", this.latestValues);
          this.render = () => {
              if (!this.current)
                  return;
              this.triggerBuild();
              this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
          };
          this.scheduleRender = () => frame_frame.render(this.render, false, true);
          const { latestValues, renderState } = visualState;
          this.latestValues = latestValues;
          this.baseTarget = { ...latestValues };
          this.initialValues = props.initial ? { ...latestValues } : {};
          this.renderState = renderState;
          this.parent = parent;
          this.props = props;
          this.presenceContext = presenceContext;
          this.depth = parent ? parent.depth + 1 : 0;
          this.reducedMotionConfig = reducedMotionConfig;
          this.options = options;
          this.isControllingVariants = isControllingVariants(props);
          this.isVariantNode = isVariantNode(props);
          if (this.isVariantNode) {
              this.variantChildren = new Set();
          }
          this.manuallyAnimateOnMount = Boolean(parent && parent.current);
          /**
           * Any motion values that are provided to the element when created
           * aren't yet bound to the element, as this would technically be impure.
           * However, we iterate through the motion values and set them to the
           * initial values for this component.
           *
           * TODO: This is impure and we should look at changing this to run on mount.
           * Doing so will break some tests but this isn't neccessarily a breaking change,
           * more a reflection of the test.
           */
          const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});
          for (const key in initialMotionValues) {
              const value = initialMotionValues[key];
              if (latestValues[key] !== undefined && isMotionValue(value)) {
                  value.set(latestValues[key], false);
                  if (isWillChangeMotionValue(willChange)) {
                      willChange.add(key);
                  }
              }
          }
      }
      /**
       * This method takes React props and returns found MotionValues. For example, HTML
       * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
       *
       * This isn't an abstract method as it needs calling in the constructor, but it is
       * intended to be one.
       */
      scrapeMotionValuesFromProps(_props, _prevProps) {
          return {};
      }
      mount(instance) {
          this.current = instance;
          visualElementStore.set(instance, this);
          if (this.projection && !this.projection.instance) {
              this.projection.mount(instance);
          }
          if (this.parent && this.isVariantNode && !this.isControllingVariants) {
              this.removeFromVariantTree = this.parent.addVariantChild(this);
          }
          this.values.forEach((value, key) => this.bindToMotionValue(key, value));
          if (!hasReducedMotionListener.current) {
              initPrefersReducedMotion();
          }
          this.shouldReduceMotion =
              this.reducedMotionConfig === "never"
                  ? false
                  : this.reducedMotionConfig === "always"
                      ? true
                      : prefersReducedMotion.current;
          if (false) {}
          if (this.parent)
              this.parent.children.add(this);
          this.update(this.props, this.presenceContext);
      }
      unmount() {
          visualElementStore.delete(this.current);
          this.projection && this.projection.unmount();
          cancelFrame(this.notifyUpdate);
          cancelFrame(this.render);
          this.valueSubscriptions.forEach((remove) => remove());
          this.removeFromVariantTree && this.removeFromVariantTree();
          this.parent && this.parent.children.delete(this);
          for (const key in this.events) {
              this.events[key].clear();
          }
          for (const key in this.features) {
              this.features[key].unmount();
          }
          this.current = null;
      }
      bindToMotionValue(key, value) {
          const valueIsTransform = transformProps.has(key);
          const removeOnChange = value.on("change", (latestValue) => {
              this.latestValues[key] = latestValue;
              this.props.onUpdate &&
                  frame_frame.update(this.notifyUpdate, false, true);
              if (valueIsTransform && this.projection) {
                  this.projection.isTransformDirty = true;
              }
          });
          const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
          this.valueSubscriptions.set(key, () => {
              removeOnChange();
              removeOnRenderRequest();
          });
      }
      sortNodePosition(other) {
          /**
           * If these nodes aren't even of the same type we can't compare their depth.
           */
          if (!this.current ||
              !this.sortInstanceNodePosition ||
              this.type !== other.type) {
              return 0;
          }
          return this.sortInstanceNodePosition(this.current, other.current);
      }
      loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {
          let ProjectionNodeConstructor;
          let MeasureLayout;
          /**
           * If we're in development mode, check to make sure we're not rendering a motion component
           * as a child of LazyMotion, as this will break the file-size benefits of using it.
           */
          if (false) {}
          for (let i = 0; i < numFeatures; i++) {
              const name = featureNames[i];
              const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];
              if (ProjectionNode)
                  ProjectionNodeConstructor = ProjectionNode;
              if (isEnabled(renderedProps)) {
                  if (!this.features[name] && FeatureConstructor) {
                      this.features[name] = new FeatureConstructor(this);
                  }
                  if (MeasureLayoutComponent) {
                      MeasureLayout = MeasureLayoutComponent;
                  }
              }
          }
          if (!this.projection && ProjectionNodeConstructor) {
              this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);
              const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;
              this.projection.setOptions({
                  layoutId,
                  layout,
                  alwaysMeasureLayout: Boolean(drag) ||
                      (dragConstraints && isRefObject(dragConstraints)),
                  visualElement: this,
                  scheduleRender: () => this.scheduleRender(),
                  /**
                   * TODO: Update options in an effect. This could be tricky as it'll be too late
                   * to update by the time layout animations run.
                   * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
                   * ensuring it gets called if there's no potential layout animations.
                   *
                   */
                  animationType: typeof layout === "string" ? layout : "both",
                  initialPromotionConfig: initialLayoutGroupConfig,
                  layoutScroll,
                  layoutRoot,
              });
          }
          return MeasureLayout;
      }
      updateFeatures() {
          for (const key in this.features) {
              const feature = this.features[key];
              if (feature.isMounted) {
                  feature.update();
              }
              else {
                  feature.mount();
                  feature.isMounted = true;
              }
          }
      }
      triggerBuild() {
          this.build(this.renderState, this.latestValues, this.options, this.props);
      }
      /**
       * Measure the current viewport box with or without transforms.
       * Only measures axis-aligned boxes, rotate and skew must be manually
       * removed with a re-render to work.
       */
      measureViewportBox() {
          return this.current
              ? this.measureInstanceViewportBox(this.current, this.props)
              : createBox();
      }
      getStaticValue(key) {
          return this.latestValues[key];
      }
      setStaticValue(key, value) {
          this.latestValues[key] = value;
      }
      /**
       * Make a target animatable by Popmotion. For instance, if we're
       * trying to animate width from 100px to 100vw we need to measure 100vw
       * in pixels to determine what we really need to animate to. This is also
       * pluggable to support Framer's custom value types like Color,
       * and CSS variables.
       */
      makeTargetAnimatable(target, canMutate = true) {
          return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);
      }
      /**
       * Update the provided props. Ensure any newly-added motion values are
       * added to our map, old ones removed, and listeners updated.
       */
      update(props, presenceContext) {
          if (props.transformTemplate || this.props.transformTemplate) {
              this.scheduleRender();
          }
          this.prevProps = this.props;
          this.props = props;
          this.prevPresenceContext = this.presenceContext;
          this.presenceContext = presenceContext;
          /**
           * Update prop event handlers ie onAnimationStart, onAnimationComplete
           */
          for (let i = 0; i < propEventHandlers.length; i++) {
              const key = propEventHandlers[i];
              if (this.propEventSubscriptions[key]) {
                  this.propEventSubscriptions[key]();
                  delete this.propEventSubscriptions[key];
              }
              const listener = props["on" + key];
              if (listener) {
                  this.propEventSubscriptions[key] = this.on(key, listener);
              }
          }
          this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);
          if (this.handleChildMotionValue) {
              this.handleChildMotionValue();
          }
      }
      getProps() {
          return this.props;
      }
      /**
       * Returns the variant definition with a given name.
       */
      getVariant(name) {
          return this.props.variants ? this.props.variants[name] : undefined;
      }
      /**
       * Returns the defined default transition on this component.
       */
      getDefaultTransition() {
          return this.props.transition;
      }
      getTransformPagePoint() {
          return this.props.transformPagePoint;
      }
      getClosestVariantNode() {
          return this.isVariantNode
              ? this
              : this.parent
                  ? this.parent.getClosestVariantNode()
                  : undefined;
      }
      getVariantContext(startAtParent = false) {
          if (startAtParent) {
              return this.parent ? this.parent.getVariantContext() : undefined;
          }
          if (!this.isControllingVariants) {
              const context = this.parent
                  ? this.parent.getVariantContext() || {}
                  : {};
              if (this.props.initial !== undefined) {
                  context.initial = this.props.initial;
              }
              return context;
          }
          const context = {};
          for (let i = 0; i < numVariantProps; i++) {
              const name = variantProps[i];
              const prop = this.props[name];
              if (isVariantLabel(prop) || prop === false) {
                  context[name] = prop;
              }
          }
          return context;
      }
      /**
       * Add a child visual element to our set of children.
       */
      addVariantChild(child) {
          const closestVariantNode = this.getClosestVariantNode();
          if (closestVariantNode) {
              closestVariantNode.variantChildren &&
                  closestVariantNode.variantChildren.add(child);
              return () => closestVariantNode.variantChildren.delete(child);
          }
      }
      /**
       * Add a motion value and bind it to this visual element.
       */
      addValue(key, value) {
          // Remove existing value if it exists
          if (value !== this.values.get(key)) {
              this.removeValue(key);
              this.bindToMotionValue(key, value);
          }
          this.values.set(key, value);
          this.latestValues[key] = value.get();
      }
      /**
       * Remove a motion value and unbind any active subscriptions.
       */
      removeValue(key) {
          this.values.delete(key);
          const unsubscribe = this.valueSubscriptions.get(key);
          if (unsubscribe) {
              unsubscribe();
              this.valueSubscriptions.delete(key);
          }
          delete this.latestValues[key];
          this.removeValueFromRenderState(key, this.renderState);
      }
      /**
       * Check whether we have a motion value for this key
       */
      hasValue(key) {
          return this.values.has(key);
      }
      getValue(key, defaultValue) {
          if (this.props.values && this.props.values[key]) {
              return this.props.values[key];
          }
          let value = this.values.get(key);
          if (value === undefined && defaultValue !== undefined) {
              value = motionValue(defaultValue, { owner: this });
              this.addValue(key, value);
          }
          return value;
      }
      /**
       * If we're trying to animate to a previously unencountered value,
       * we need to check for it in our state and as a last resort read it
       * directly from the instance (which might have performance implications).
       */
      readValue(key) {
          var _a;
          return this.latestValues[key] !== undefined || !this.current
              ? this.latestValues[key]
              : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);
      }
      /**
       * Set the base target to later animate back to. This is currently
       * only hydrated on creation and when we first read a value.
       */
      setBaseTarget(key, value) {
          this.baseTarget[key] = value;
      }
      /**
       * Find the base target for a value thats been removed from all animation
       * props.
       */
      getBaseTarget(key) {
          var _a;
          const { initial } = this.props;
          const valueFromInitial = typeof initial === "string" || typeof initial === "object"
              ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]
              : undefined;
          /**
           * If this value still exists in the current initial variant, read that.
           */
          if (initial && valueFromInitial !== undefined) {
              return valueFromInitial;
          }
          /**
           * Alternatively, if this VisualElement config has defined a getBaseTarget
           * so we can read the value from an alternative source, try that.
           */
          const target = this.getBaseTargetFromProps(this.props, key);
          if (target !== undefined && !isMotionValue(target))
              return target;
          /**
           * If the value was initially defined on initial, but it doesn't any more,
           * return undefined. Otherwise return the value as initially read from the DOM.
           */
          return this.initialValues[key] !== undefined &&
              valueFromInitial === undefined
              ? undefined
              : this.baseTarget[key];
      }
      on(eventName, callback) {
          if (!this.events[eventName]) {
              this.events[eventName] = new SubscriptionManager();
          }
          return this.events[eventName].add(callback);
      }
      notify(eventName, ...args) {
          if (this.events[eventName]) {
              this.events[eventName].notify(...args);
          }
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
  
  
  
  
  class DOMVisualElement extends VisualElement {
      sortInstanceNodePosition(a, b) {
          /**
           * compareDocumentPosition returns a bitmask, by using the bitwise &
           * we're returning true if 2 in that bitmask is set to true. 2 is set
           * to true if b preceeds a.
           */
          return a.compareDocumentPosition(b) & 2 ? 1 : -1;
      }
      getBaseTargetFromProps(props, key) {
          return props.style ? props.style[key] : undefined;
      }
      removeValueFromRenderState(key, { vars, style }) {
          delete vars[key];
          delete style[key];
      }
      makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {
          let origin = getOrigin(target, transition || {}, this);
          /**
           * If Framer has provided a function to convert `Color` etc value types, convert them
           */
          if (transformValues) {
              if (transitionEnd)
                  transitionEnd = transformValues(transitionEnd);
              if (target)
                  target = transformValues(target);
              if (origin)
                  origin = transformValues(origin);
          }
          if (isMounted) {
              checkTargetForNewValues(this, target, origin);
              const parsed = parseDomVariant(this, target, origin, transitionEnd);
              transitionEnd = parsed.transitionEnd;
              target = parsed.target;
          }
          return {
              transition,
              transitionEnd,
              ...target,
          };
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
  
  
  
  
  
  
  
  
  
  
  function HTMLVisualElement_getComputedStyle(element) {
      return window.getComputedStyle(element);
  }
  class HTMLVisualElement extends DOMVisualElement {
      readValueFromInstance(instance, key) {
          if (transformProps.has(key)) {
              const defaultType = getDefaultValueType(key);
              return defaultType ? defaultType.default || 0 : 0;
          }
          else {
              const computedStyle = HTMLVisualElement_getComputedStyle(instance);
              const value = (isCSSVariableName(key)
                  ? computedStyle.getPropertyValue(key)
                  : computedStyle[key]) || 0;
              return typeof value === "string" ? value.trim() : value;
          }
      }
      measureInstanceViewportBox(instance, { transformPagePoint }) {
          return measureViewportBox(instance, transformPagePoint);
      }
      build(renderState, latestValues, options, props) {
          buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
      }
      scrapeMotionValuesFromProps(props, prevProps) {
          return scrapeMotionValuesFromProps(props, prevProps);
      }
      handleChildMotionValue() {
          if (this.childSubscription) {
              this.childSubscription();
              delete this.childSubscription;
          }
          const { children } = this.props;
          if (isMotionValue(children)) {
              this.childSubscription = children.on("change", (latest) => {
                  if (this.current)
                      this.current.textContent = `${latest}`;
              });
          }
      }
      renderInstance(instance, renderState, styleProp, projection) {
          renderHTML(instance, renderState, styleProp, projection);
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs
  
  
  
  
  
  
  
  
  
  
  
  class SVGVisualElement extends DOMVisualElement {
      constructor() {
          super(...arguments);
          this.isSVGTag = false;
      }
      getBaseTargetFromProps(props, key) {
          return props[key];
      }
      readValueFromInstance(instance, key) {
          if (transformProps.has(key)) {
              const defaultType = getDefaultValueType(key);
              return defaultType ? defaultType.default || 0 : 0;
          }
          key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
          return instance.getAttribute(key);
      }
      measureInstanceViewportBox() {
          return createBox();
      }
      scrapeMotionValuesFromProps(props, prevProps) {
          return scrape_motion_values_scrapeMotionValuesFromProps(props, prevProps);
      }
      build(renderState, latestValues, options, props) {
          buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);
      }
      renderInstance(instance, renderState, styleProp, projection) {
          renderSVG(instance, renderState, styleProp, projection);
      }
      mount(instance) {
          this.isSVGTag = isSVGTag(instance.tagName);
          super.mount(instance);
      }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
  
  
  
  
  const create_visual_element_createDomVisualElement = (Component, options) => {
      return isSVGComponent(Component)
          ? new SVGVisualElement(options, { enableHardwareAcceleration: false })
          : new HTMLVisualElement(options, { enableHardwareAcceleration: true });
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/motion/features/layout.mjs
  
  
  
  const layout = {
      layout: {
          ProjectionNode: HTMLProjectionNode,
          MeasureLayout: MeasureLayout,
      },
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/framer-motion/dist/es/render/dom/motion.mjs
  
  
  
  
  
  
  
  
  
  const preloadedFeatures = {
      ...animations,
      ...gestureAnimations,
      ...drag,
      ...layout,
  };
  /**
   * HTML & SVG components, optimised for use with gestures and animation. These can be used as
   * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.
   *
   * @public
   */
  const motion = /*@__PURE__*/ createMotionProxy((Component, config) => create_config_createDomMotionConfig(Component, config, preloadedFeatures, create_visual_element_createDomVisualElement));
  /**
   * Create a DOM `motion` component with the provided string. This is primarily intended
   * as a full alternative to `motion` for consumers who have to support environments that don't
   * support `Proxy`.
   *
   * ```javascript
   * import { createDomMotionComponent } from "framer-motion"
   *
   * const motion = {
   *   div: createDomMotionComponent('div')
   * }
   * ```
   *
   * @public
   */
  function createDomMotionComponent(key) {
      return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));
  }
  
  
  
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/useModuleClassName.jsx
  function mcn(names) {
    var className = '';
    names === null || names === void 0 || names.forEach(function (name, idx) {
      if (name) className = idx == 0 ? "".concat(name) : "".concat(className, " ").concat(name);
    });
    return className;
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/useDeviceCheck.jsx
  
  
  function useDeviceCheck() {
    var _useState = (0,react.useState)(false),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      isMobile = _useState2[0],
      setIsMobile = _useState2[1];
    (0,react.useEffect)(function () {
      var checkDeviceType = function checkDeviceType() {
        var userAgent = navigator.userAgent;
        console.log(userAgent);
        //유형 추가해야함. ipad는 ipad가 안뜨고 Macintosh가 뜸
        var mobileKeywords = ['Android', 'webOS', 'iPhone', 'iPad', 'iPod', 'BlackBerry', 'IEMobile', 'Opera Mini'];
        var isMobileDevice = mobileKeywords.some(function (keyword) {
          return userAgent.includes(keyword);
        });
        setIsMobile(isMobileDevice);
      };
      checkDeviceType();
      return function () {};
    }, []);
    return isMobile;
  }
  /* harmony default export */ const hooks_useDeviceCheck = (useDeviceCheck);
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/useTouchDevice.jsx
  
  
  var useTouchDevice = function useTouchDevice() {
    var _useState = (0,react.useState)(false),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      isTouchDevice = _useState2[0],
      setIsTouchDevice = _useState2[1];
    (0,react.useEffect)(function () {
      var checkTouchDevice = function checkTouchDevice() {
        setIsTouchDevice('ontouchstart' in window);
      };
  
      // Initial check
      checkTouchDevice();
  
      // Event listener to update when the device type changes
      window.addEventListener('touchstart', checkTouchDevice);
  
      // Cleanup the event listener on component unmount
      return function () {
        window.removeEventListener('touchstart', checkTouchDevice);
      };
    }, []);
    return isTouchDevice;
  };
  /* harmony default export */ const hooks_useTouchDevice = (useTouchDevice);
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Button.jsx
  
  
  
  
  
  
  
  
  
  
  
  // Libraries - Components - Buttons
  //[TODO] kv에 들어가는 span 분기 처리
  function Button(_ref) {
    var children = _ref.children,
      cate = _ref.cate,
      size = _ref.size,
      type = _ref.type,
      theme = _ref.theme,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? "button" : _ref$tag,
      href = _ref.href,
      target = _ref.target,
      download = _ref.download,
      _ref$font = _ref.font,
      font = _ref$font === void 0 ? "off" : _ref$font,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$active = _ref.active,
      active = _ref$active === void 0 ? "off" : _ref$active,
      callback = _ref.callback,
      className = _ref.className,
      _ref$hoverState = _ref.hoverState,
      hoverState = _ref$hoverState === void 0 ? 0 : _ref$hoverState,
      _ref$isActivate = _ref.isActivate,
      isActivate = _ref$isActivate === void 0 ? false : _ref$isActivate,
      pointerEvents = _ref.pointerEvents,
      _ref$iconPos = _ref.iconPos,
      iconPos = _ref$iconPos === void 0 ? "right" : _ref$iconPos,
      _ref$tagging = _ref.tagging,
      tagging = _ref$tagging === void 0 ? false : _ref$tagging;
    var _useState = (0,react.useState)(hoverState),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      hover = _useState2[0],
      setHover = _useState2[1];
    var _useState3 = (0,react.useState)(isActivate),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      isActive = _useState4[0],
      setIsActive = _useState4[1];
    var icon;
    var txt;
    function onClickEvent(callback) {
      if (callback) callback();
    }
    function onTaggingEvent() {
      setTagging(tagging);
    }
    if (Array.isArray(children)) {
      // ---- TEXT + ICON ---- //
      children.map(function (el) {
        typeof el === "string" ? txt = el : icon = el;
      });
    } else {
      // ---- ONLY TEXT or ONLY ICON ---- //
      if (typeof children === "string") {
        (type === "outline-fix" || type === "ghost-fix") && (iconPos = "center");
        txt = children;
      } else {
        icon = children;
        iconPos = "center";
      }
    }
    var isTouchDevice = hooks_useTouchDevice();
    var Component = tag === "a" ? motion.a : motion.button;
    (0,react.useEffect)(function () {
      if (isTouchDevice) {
        if (isActive) {
          setHover(1);
        } else setHover(2);
      }
    }, [isActive]);
    return /*#__PURE__*/react.createElement(Component, _extends({
      className: "".concat(Button_module.button, " ").concat(Button_module[cate], " ").concat(Button_module[size], " ").concat(Button_module[type], " ").concat(Button_module[theme], " ").concat(Button_module["font-".concat(font)], " ").concat(Button_module[iconPos == "right" && typeof children !== "string" ? "right" : typeof children === "string" ? "" : iconPos == "left" ? "left" : "center"], " ").concat(isActive ? "".concat(Button_module.active) : "", " ").concat(disabled ? "".concat(Button_module.disabled) : "", " ").concat(mcn(className)),
      style: {
        pointerEvents: pointerEvents
      },
      onHoverStart: function onHoverStart() {
        if (isTouchDevice) {
          //setHover(0)
        } else {
          if (isActive) {
            setHover(1);
          } else setHover(1);
        }
      },
      onHoverEnd: function onHoverEnd() {
        if (isTouchDevice) {
          //setHover(0)
        } else {
          if (isActive) {
            setHover(1);
          } else {
            setHover(2);
          }
        }
      },
      onClick: function onClick() {
        onClickEvent(callback);
        tagging && onTaggingEvent();
        if (active == "on") {
          setIsActive(!isActive);
        }
      },
      href: href,
      target: target
    }, download && {
      download: true
    }), /*#__PURE__*/react.createElement("div", {
      className: "".concat(Button_module.border)
    }), /*#__PURE__*/react.createElement("div", {
      className: "".concat(Button_module["circle-container"], " circle-container")
    }, /*#__PURE__*/react.createElement(motion.div, {
      className: "".concat(Button_module.circle),
      initial: {
        left: "50%",
        top: "180%"
      },
      animate: {
        top: hover == 0 ? "180%" : hover == 1 ? ["180%", "50%"] : ["50%", "-130%"]
      },
      transition: {
        type: "easeCircle",
        duration: 0.33
      }
    })), /*#__PURE__*/react.createElement("div", {
      className: "".concat(Button_module["text-container"])
    }, /*#__PURE__*/react.createElement(motion.div, {
      className: "".concat(Button_module.container, " text-motion-container"),
      animate: {
        y: hover == 0 ? 0 : hover == 1 ? [30, 0] : [-30, 0],
        opacity: hover == 0 ? 1 : hover == 1 ? [0, 1] : [0, 1]
      },
      transition: {
        type: "easeCircle",
        duration: 0.33
      }
    }, iconPos == "left" && icon, iconPos == "center" && icon, txt && /*#__PURE__*/react.createElement(motion.span, {
      dangerouslySetInnerHTML: {
        __html: txt
      },
      className: "".concat(Button_module["".concat(size, "-txt")])
    }), iconPos == "right" && icon)));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/BtnTagList.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const BtnTagList_module = ({"btn-tag-list":"BtnTagList-module__btn-tag-list--gsvku","md":"BtnTagList-module__md--Jq9lY","sm":"BtnTagList-module__sm--DzGPi"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/BtnTagList.jsx
  
  
  
  // Libraries - Components - Tag
  function BtnTagList(_ref) {
    var children = _ref.children,
      size = _ref.size;
    return /*#__PURE__*/react.createElement("div", {
      className: "".concat(BtnTagList_module["btn-tag-list"], " ").concat(BtnTagList_module[size])
    }, children);
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/BtnTag.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const BtnTag_module = ({"btn-tag":"BtnTag-module__btn-tag--savea","md":"BtnTag-module__md--HqRxq","sm":"BtnTag-module__sm--jIqwv","light":"BtnTag-module__light--sD556","orange":"BtnTag-module__orange--KCeOW","primary":"BtnTag-module__primary--_hYlg","md-txt":"BtnTag-module__md-txt--CQhSH","sm-txt":"BtnTag-module__sm-txt--iRmL_","secondary":"BtnTag-module__secondary--Wo1Lj","font-on":"BtnTag-module__font-on--WVitm","font-off":"BtnTag-module__font-off--VzBqW"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/BtnTag.jsx
  
  
  
  // Libraries - Components - Tag
  function BtnTag(_ref) {
    var children = _ref.children,
      type = _ref.type,
      size = _ref.size,
      font = _ref.font,
      link = _ref.link,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'button' : _ref$tag,
      href = _ref.href,
      onClick = _ref.onClick;
    var Component = tag === 'a' ? 'a' : 'button';
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Component, {
      className: "".concat(BtnTag_module["btn-tag"], " ").concat(BtnTag_module[type], " ").concat(BtnTag_module[size], "  ").concat(BtnTag_module["font-".concat(font)]),
      type: "button",
      href: href,
      onClick: onClick
    }, /*#__PURE__*/react.createElement("span", {
      className: "".concat(BtnTag_module["".concat(size, "-txt")])
    }, children)));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Checkbox.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const Checkbox_module = ({"input-wrap":"Checkbox-module__input-wrap--wfdEg","input-box":"Checkbox-module__input-box--ZHlw2","circle":"Checkbox-module__circle--Y6fcN"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Checkbox.jsx
  
  
  function Checkbox(_ref) {
    var txt = _ref.txt,
      checked = _ref.checked,
      onChange = _ref.onChange;
    return /*#__PURE__*/react.createElement("div", {
      className: "".concat(Checkbox_module["input-wrap"]),
      "data-type": "checkbox",
      id: "check-box"
    }, /*#__PURE__*/react.createElement("input", {
      type: "checkbox",
      id: "check1",
      name: "check1",
      className: "".concat(Checkbox_module["input"]),
      checked: checked,
      onChange: onChange
    }), /*#__PURE__*/react.createElement("label", {
      className: "".concat(Checkbox_module["checkbox_btn"]),
      htmlFor: "check1"
    }, /*#__PURE__*/react.createElement("div", {
      className: "".concat(Checkbox_module["input-box"])
    }, /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: "12",
      height: "12",
      viewBox: "0 0 12 12",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M1.5 5.66667L4.71429 9L10.5 3",
      stroke: "white",
      strokeWidth: "1.5",
      strokeLinecap: "square"
    }))), /*#__PURE__*/react.createElement("p", null, txt)));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/SearchWideBar.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const SearchWideBar_module = ({"search-wrap":"SearchWideBar-module__search-wrap--uEi0b","search-wide-bar":"SearchWideBar-module__search-wide-bar--DBJIh","focus":"SearchWideBar-module__focus--TXX3a","btn-wrap":"SearchWideBar-module__btn-wrap--AQTVS","close-btn":"SearchWideBar-module__close-btn--xS6kv","inner":"SearchWideBar-module__inner--bipm3","submit-btn":"SearchWideBar-module__submit-btn--YoL2M"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/useAxios.jsx
  
  
  
  
  
  function useAxios(url) {
    var _useState = (0,react.useState)(null),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];
    var _useState3 = (0,react.useState)(null),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      error = _useState4[0],
      setError = _useState4[1];
    var _useState5 = (0,react.useState)(true),
      _useState6 = slicedToArray_slicedToArray(_useState5, 2),
      loading = _useState6[0],
      setLoading = _useState6[1];
    var _useState7 = (0,react.useState)(true),
      _useState8 = slicedToArray_slicedToArray(_useState7, 2),
      newsLoading = _useState8[0],
      setNewsLoading = _useState8[1];
    var source = lib_axios.CancelToken.source();
    (0,react.useEffect)(function () {
      var fetchData = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
          var response, _error$response, _error$response2;
          return regenerator_default().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                // setLoading(true);
                setNewsLoading(true);
                _context.prev = 1;
                _context.next = 4;
                return lib_axios.get(url, {
                  cancelToken: source.token
                });
              case 4:
                response = _context.sent;
                // console.log(response.request.responseURL)
                setData(response.data);
                setError(null);
                _context.next = 13;
                break;
              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](1);
                setError(_context.t0);
                if ((_context.t0 === null || _context.t0 === void 0 || (_error$response = _context.t0.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404 || (_context.t0 === null || _context.t0 === void 0 || (_error$response2 = _context.t0.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 500) {
                  window.location.href = "/error.do";
                }
              case 13:
                _context.prev = 13;
                setLoading(false);
                setNewsLoading(false);
                return _context.finish(13);
              case 17:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[1, 9, 13, 17]]);
        }));
        return function fetchData() {
          return _ref.apply(this, arguments);
        };
      }();
      fetchData();
      return function () {
        // 컴포넌트가 언마운트되면 요청 취소
        source.cancel('Component unmounted');
      };
    }, [url]);
    return {
      data: data,
      error: error,
      loading: loading,
      newsLoading: newsLoading
    };
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/SearchWideBar.jsx
  
  
  
  
  
  
  
  
  function SearchWideBar(_ref) {
    var type = _ref.type,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? "" : _ref$value,
      setSearchText = _ref.setSearchText,
      setReSearchText = _ref.setReSearchText;
    var _useAxios = useAxios("/api/v1/keyword/list-ajax.do"),
      data = _useAxios.data,
      loading = _useAxios.loading,
      error = _useAxios.error;
    var _useState = (0,react.useState)(0),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      textLength = _useState2[0],
      setTextLength = _useState2[1];
    var _useState3 = (0,react.useState)(false),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      isFocused = _useState4[0],
      setIsFocused = _useState4[1];
    var _useState5 = (0,react.useState)(''),
      _useState6 = slicedToArray_slicedToArray(_useState5, 2),
      text = _useState6[0],
      setText = _useState6[1];
    var _useState7 = (0,react.useState)(false),
      _useState8 = slicedToArray_slicedToArray(_useState7, 2),
      isChecked = _useState8[0],
      setIsChecked = _useState8[1];
    var inputRef = (0,react.useRef)(null);
    var handleFocus = function handleFocus() {
      setIsFocused(true);
    };
    var handleBlur = function handleBlur() {
      setIsFocused(false);
    };
    var handleSearch = function handleSearch() {
      if (isChecked == true) {
        setReSearchText && setReSearchText(text);
      } else {
        setSearchText && setSearchText(text);
      }
    };
    var handleTextReset = function handleTextReset() {
      setText('');
      inputRef.current.focus();
    };
    var handleKeyPress = function handleKeyPress(event) {
      if (event.key === 'Enter') {
        if (text !== '') {
          if (isChecked == true) {
            setReSearchText && setReSearchText(text);
          } else {
            setSearchText && setSearchText(text);
          }
        }
      }
    };
    var handleCheckbox = function handleCheckbox() {
      setIsChecked(!isChecked);
    };
    (0,react.useEffect)(function () {
      setText(value);
    }, [value]);
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
      className: "".concat(SearchWideBar_module["search-wrap"]),
      "data-type": "".concat(type == 'check' ? 'check' : 'tag')
    }, /*#__PURE__*/react.createElement("div", {
      className: "".concat(isFocused && SearchWideBar_module["focus"], " ").concat(SearchWideBar_module["search-wide-bar"])
    }, /*#__PURE__*/react.createElement("input", {
      ref: inputRef,
      className: "".concat(isFocused && SearchWideBar_module["focus"]),
      type: "text",
      onFocus: handleFocus,
      onBlur: handleBlur,
      placeholder: "\uAC80\uC0C9\uC5B4\uB97C \uC785\uB825\uD574\uC8FC\uC138\uC694.",
      value: text || '',
      onChange: function onChange(e) {
        setText(e.target.value);
        setTextLength(e.target.value.length);
      },
      onKeyDown: handleKeyPress
    }), /*#__PURE__*/react.createElement("div", {
      className: "".concat(SearchWideBar_module["btn-wrap"])
    }, text !== '' && type == 'check' && /*#__PURE__*/react.createElement("button", {
      className: "".concat(SearchWideBar_module["close-btn"]),
      onClick: handleTextReset
    }, /*#__PURE__*/react.createElement("div", {
      className: "".concat(SearchWideBar_module["inner"])
    }, /*#__PURE__*/react.createElement(BasicIcon, {
      type: "delete-s",
      color: "white",
      size: "16"
    }))), /*#__PURE__*/react.createElement("button", {
      className: "".concat(SearchWideBar_module["submit-btn"]),
      onClick: handleSearch
    }, /*#__PURE__*/react.createElement(BasicIcon, {
      type: "search",
      color: "typo1",
      size: "32"
    })))), type == 'check' && /*#__PURE__*/react.createElement(Checkbox, {
      txt: '결과 내 재검색',
      checked: isChecked,
      onChange: handleCheckbox
    }), type == 'tag' && /*#__PURE__*/react.createElement("div", {
      className: "".concat(SearchWideBar_module["search-tag"])
    }, /*#__PURE__*/react.createElement(BtnTagList, {
      size: "md"
    }, data === null || data === void 0 ? void 0 : data.map(function (el, idx) {
      return /*#__PURE__*/react.createElement(BtnTag, {
        key: "tag".concat(idx),
        tag: "a",
        href: "/search.do?searchText=".concat(el),
        type: "primary",
        size: "md",
        font: "off"
      }, "#".concat(el));
    })))));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Stack.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const Stack_module = ({"h-xxl":"Stack-module__h-xxl--Fdn5b","h-xl":"Stack-module__h-xl--G8jd1","h-l":"Stack-module__h-l--R4H7t","h-m":"Stack-module__h-m--dGcUh","v-xl":"Stack-module__v-xl--W6lcM","v-l":"Stack-module__v-l--vr5C3","v-m":"Stack-module__v-m--3UhIq","v-s":"Stack-module__v-s--g21pb"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Stack.jsx
  
  
  
  // Libraries - Styles - Layout & Spacing
  function Stack(_ref) {
    var size = _ref.size;
    return /*#__PURE__*/react.createElement("div", {
      className: "".concat(Stack_module[size])
    });
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/layout/Container.jsx
  
  
  
  // // Libraries - Styles - Layout & Spacing
  function Container(_ref) {
    var children = _ref.children,
      size = _ref.size,
      className = _ref.className;
    return /*#__PURE__*/react.createElement("div", {
      className: "container gutter-".concat(size, " ").concat(mcn(className))
    }, children);
  }
  ;// CONCATENATED MODULE: ./node_modules/gsap/all.js
  
  
  var all_gsapWithCSS = gsap_core_gsap.registerPlugin(CSSPlugin) || gsap_core_gsap,
      // to protect from tree shaking
  all_TweenMaxWithCSS = all_gsapWithCSS.core.Tween;
  
  
  
  
  
  
  
  
  
  
  
  
  
   //BONUS EXPORTS
  
  
  
  
  
  
  
  
  
  
  
  
  
  // EXTERNAL MODULE: ./node_modules/react-dom/index.js
  var react_dom = __webpack_require__(3935);
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/HeaderSearchTooltip.jsx
  
  
  
  
  /* harmony default export */ const HeaderSearchTooltip = (/*#__PURE__*/(0,react.forwardRef)(function HeaderSearchTooltip(_ref, ref) {
    var isShowSearchTooltip = _ref.isShowSearchTooltip,
      setIsShowSearchTooltip = _ref.setIsShowSearchTooltip;
    var _useState = (0,react.useState)(false),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      mounted = _useState2[0],
      setMounted = _useState2[1];
    var _useState3 = (0,react.useState)(0),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      posTop = _useState4[0],
      setPosTop = _useState4[1];
    (0,react.useEffect)(function () {
      setTimeout(function () {
        setPosTop(document.querySelector('#header .util-item.search').getBoundingClientRect().bottom); /** init posTop */
        setMounted(true);
      }, 1000);
      return function () {
        setMounted(false);
      };
    }, []);
    (0,react.useEffect)(function () {
      if (mounted) handleTooltipArrowPos();
    }, [mounted]);
    (0,react.useEffect)(function () {
      console.log(isShowSearchTooltip);
    }, [isShowSearchTooltip]);
    if (!mounted || !isShowSearchTooltip) return null;
    return /*#__PURE__*/(0,react_dom.createPortal)( /*#__PURE__*/react.createElement("div", {
      className: "header-search-tooltip body4",
      style: {
        "--parentBottom": "".concat(posTop, "px")
      },
      ref: ref
    }, /*#__PURE__*/react.createElement("div", null, "\uD544\uC694\uD55C \uC815\uBCF4\uB97C \uAC80\uC0C9\uD574 \uD655\uC778\uD574\uBCF4\uC138\uC694."), /*#__PURE__*/react.createElement("button", {
      onClick: function onClick() {
        return setIsShowSearchTooltip(false);
      },
      "aria-label": "\uB9D0\uD48D\uC120 \uB2EB\uAE30"
    }, /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: "16",
      height: "16",
      viewBox: "0 0 16 16",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M12.6666 12.6668L3.33325 3.3335",
      stroke: "white",
      strokeWidth: "1.5",
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M3.33341 12.6668L12.6667 3.3335",
      stroke: "white",
      strokeWidth: "1.5",
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })))), document.body);
  }));
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Header.jsx
  
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Header_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  function Header_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Header_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Header_arrayLikeToArray(o, minLen); }
  function Header_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
  
  
  
  
  
  
  
  
  
  
  
  
  function HeaderComp(_ref) {
    var theme = _ref.theme,
      data = _ref.data;
    var header = document.getElementById('header');
    var _useState = (0,react.useState)(theme),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      headerTheme = _useState2[0],
      setHeaderTheme = _useState2[1];
    var _useState3 = (0,react.useState)(''),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      headerSrhText = _useState4[0],
      setHeaderSrhText = _useState4[1];
    var _useState5 = (0,react.useState)(true),
      _useState6 = slicedToArray_slicedToArray(_useState5, 2),
      isShowSearchTooltip = _useState6[0],
      setIsShowSearchTooltip = _useState6[1];
    var deviceType = hooks_useDeviceType();
    var isWeb = deviceType == 'web' || deviceType == 'labtop';
    var isMobile = deviceType == 'mobile';
    var tooltipRef = (0,react.useRef)(null);
    (0,react.useEffect)(function () {
      new Header();
      setScroll();
      document.querySelector('#header .util-item.lang').addEventListener('mouseleave', function (e) {
        var isOut = e.target.closest('.util-item.lang');
        var isOpen = document.querySelector('#header .util-item.lang .lang').classList.contains('open');
        if (isOut && isOpen) toggleLangContainer(-1);
      });
      if (location.pathname !== "/notice/list.do" && location.pathname !== "/notice/view.do") {
        sessionStorage.clear();
      }
  
      // 검색하기 유도 툴팁 관련 Observer
      window.addEventListener("scroll", function () {
        handleTooltipPosY();
        handleTooltipArrowPos(tooltipRef.current);
      });
      window.addEventListener("resize", function () {
        handleTooltipPosY();
        handleTooltipArrowPos(tooltipRef.current);
      });
      var config = {
        attributes: true,
        childList: true,
        subtree: true
      };
      var tooltipPosYCallback = function tooltipPosYCallback(mutationList, observer) {
        var _iterator = _createForOfIteratorHelper(mutationList),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var mutation = _step.value;
            var delayTime = 500;
            setTimeout(handleTooltipPosY, delayTime);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      };
      var tooltipshowCallback = function tooltipshowCallback(mutationList, observer) {
        var tooltip = tooltipRef.current;
        var _iterator2 = _createForOfIteratorHelper(mutationList),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var mutation = _step2.value;
            if (mutation.target === header) {
              if (mutation.target.classList.contains('is-search') || mutation.target.classList.contains('is-lang')) {
                if (tooltip) {
                  tooltip.style.display = 'none';
                }
              } else {
                if (tooltip) {
                  tooltip.style.display = 'flex';
                }
              }
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      };
      var headerObserver = new MutationObserver(tooltipPosYCallback);
      var headerObserver_2 = new MutationObserver(tooltipshowCallback);
      headerObserver.observe(header, config);
      headerObserver_2.observe(header, config);
    }, []);
    (0,react.useEffect)(function () {
      checkSearchText();
    }, [headerSrhText]);
    function setLangPos() {
      var langBtnPos = document.querySelector('.util-item.lang');
      var langBtnList = document.querySelector('.lang-container');
      var w = langBtnPos.clientWidth;
      var pos = langBtnPos.getBoundingClientRect();
      langBtnList.style.top = pos.bottom + 12 + 'px';
      langBtnList.style.left = pos.left + 'px';
      // langBtnList.style.left = pos.left + langBtnPos.querySelector('span').offsetWidth / 2 + 'px'
    }
    function setLangSize() {
      var lang = document.querySelector('.lang-container .lang');
      var height = lang.querySelector('ul').clientHeight;
      lang.dataset.height = height + 2;
    }
    function toggleLangContainer(speed) {
      var header = document.getElementById('header');
      var langContainer = header.querySelector('.lang-container');
      var lang = langContainer.querySelector('.lang');
      var isOpen = lang.classList.contains('open');
      var duration = speed >= 0 ? speed : .5;
      setLangSize();
      all_gsapWithCSS.killTweensOf(lang);
      if (!isOpen) header.classList.add('is-lang');
      lang.classList.toggle('open', !isOpen);
      all_gsapWithCSS.to(lang, {
        height: isOpen ? 0 : lang.dataset.height,
        duration: duration,
        onComplete: function onComplete() {
          if (isOpen) header.classList.remove('is-lang');
        }
      });
    }
    function setScroll() {
      var currentPage = document.querySelector('[data-current-page]');
      window.headerToggleSt = ScrollTrigger_ScrollTrigger.create({
        trigger: currentPage,
        start: 'top top',
        end: 'bottom top',
        onUpdate: function onUpdate(self) {
          if (!header.classList.contains('is-search')) {
            requestAnimationFrame(function () {
              return headerHandler(self);
            });
          }
        }
      });
      setTimeout(function () {
        window.requestAnimationFrame(function () {
          return headerHandler(self);
        });
      }, 10);
  
      // setTimeout(() => {
      //   window.headerToggleSt.refresh()
      // }, 1500);
    }
    function headerHandler(self) {
      var upState = self.progress > 0.01 && self.direction != 1;
      header.classList.toggle('top', self.progress <= 0.01);
      header.classList.toggle('up', upState);
      header.classList.toggle('hide', self.direction === 1);
      document.body.classList.toggle('up', upState);
      if (document.querySelector('#header .lang-container .lang').classList.contains('open')) toggleLangContainer(0);
    }
    function checkSearchText() {
      if (headerSrhText !== '') {
        location.href = "/search.do?searchText=".concat(headerSrhText);
      }
    }
    function handleOpenGroupNav() {
      var isOpen = document.querySelector('#side-group-nav').classList.contains('open');
      if (isOpen) {
        document.querySelector('#side-group-nav').classList.remove('open');
        window.lenis.start();
      } else {
        document.querySelector('#side-group-nav').classList.add('open');
        window.lenis.stop();
      }
    }
    function gropNavBtnBlurHandler() {
      var isOpen = document.querySelector('#side-group-nav').classList.contains('open');
      var mainFirstBtn = document.querySelector('main a, main button');
      if (!isOpen) {
        mainFirstBtn && mainFirstBtn.focus();
      }
    }
    function handleTooltipPosY() {
      /**
       * 검색 유도 툴팁의 Y 위치값 계산 함수
       * - GNB의 search Y의 위치값의 변화에 따라 변동됨
       */
      var tooltip = tooltipRef.current;
      var targetParent = document.querySelector('#header .util-item.search');
      if (tooltip) {
        var rect = targetParent.getBoundingClientRect();
        if (rect.bottom < 0) {
          tooltip.style.opacity = 0;
          tooltip === null || tooltip === void 0 || tooltip.style.setProperty("--parentBottom", "".concat(rect.bottom, "px "));
        } else {
          tooltip === null || tooltip === void 0 || tooltip.style.setProperty("--parentBottom", "".concat(rect.bottom, "px "));
          tooltip.style.opacity = 1;
        }
      }
    }
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
      className: "header-container"
    }, /*#__PURE__*/react.createElement("div", {
      className: "header-wrap container gutter-xl"
    }, /*#__PURE__*/react.createElement("div", {
      className: "logo"
    }, /*#__PURE__*/react.createElement("a", {
      href: "/",
      "aria-label": "\uD55C\uD654\uADF8\uB8F9 \uD648\uD398\uC774\uC9C0\uB85C \uC774\uB3D9"
    }, /*#__PURE__*/react.createElement("svg", {
      width: "160",
      height: "45",
      viewBox: "0 0 160 45",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("g", {
      clipPath: "url(#clip0_32_618)"
    }, /*#__PURE__*/react.createElement("path", {
      className: "path-logo",
      d: "M17.9699 23.0675C17.3392 17.2173 23.3499 12.518 31.4005 12.5895C39.4511 12.653 46.4896 17.4475 47.1202 23.2898C47.7509 29.1479 41.7402 33.8313 33.6896 33.7678C25.639 33.7122 18.6005 28.9177 17.9699 23.0675ZM48.6229 24.8853C47.8988 17.63 39.7937 11.6846 30.5285 11.6052C21.2555 11.5258 14.3416 17.3443 15.0657 24.5995C15.7898 31.8548 23.8949 37.8003 33.1601 37.8797C42.4253 37.9511 49.3548 32.1405 48.6229 24.8853Z",
      fill: "#FBB584"
    }), /*#__PURE__*/react.createElement("path", {
      className: "path-logo",
      d: "M34.6315 38.0226C30.069 42.8885 22.7425 43.2933 18.2656 38.9275C13.7965 34.5616 13.8666 27.0841 18.4369 22.2261C22.9994 17.3681 30.3337 16.9633 34.795 21.3212C39.2641 25.687 39.1941 33.1646 34.6237 38.0226M17.7284 22.0674C12.4262 27.7191 12.3405 36.4112 17.5337 41.4835C22.7269 46.5558 31.2447 46.0875 36.5469 40.4357C41.8568 34.7839 41.9425 26.0919 36.7415 21.0196C31.5483 15.9472 23.0306 16.4156 17.7206 22.0674",
      fill: "#F89B6C"
    }), /*#__PURE__*/react.createElement("path", {
      className: "path-logo",
      d: "M18.2114 3.87348C27.7024 0.245853 37.0922 3.91317 39.1788 12.0654C41.2654 20.2176 35.2625 29.7749 25.7715 33.3946C16.2805 37.0222 6.8907 33.3549 4.80408 25.2026C2.70968 17.0504 8.72038 7.5011 18.2114 3.87348ZM9.39775 6.99307C-0.451394 14.9389 -2.95845 26.4568 3.79191 32.7119C10.5501 38.9749 24.0041 37.6016 33.861 29.6479C43.7102 21.702 46.2172 10.1841 39.4591 3.9211C32.7009 -2.33397 19.2391 -0.960709 9.39775 6.98514",
      fill: "#F37321"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M71.2954 13.4865V31.4817H68.5314V21.988H58.0672V31.4817H55.3032V13.4865H58.0672V19.5272H68.5314V13.4865H71.2954Z",
      fill: "black"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M77.9289 31.4818C76.6365 31.4818 75.6165 31.1166 74.8613 30.3784C74.0905 29.6402 73.709 28.6956 73.709 27.5366V26.5761C73.709 25.4013 74.0905 24.4488 74.8613 23.7105C75.6165 22.9564 76.6365 22.5834 77.9289 22.5834H85.1387V22.5119C85.1387 21.0672 84.3601 20.3528 82.8107 20.3528H74.7912V17.9556H82.764C84.4224 17.9556 85.6915 18.3842 86.5635 19.2494C87.4511 20.0829 87.9027 21.2895 87.9027 22.8691V27.6398C87.9027 28.8623 87.4978 29.8227 86.6803 30.5292C85.9406 31.1722 84.9051 31.4897 83.5659 31.4897H77.9212L77.9289 31.4818ZM82.9742 24.9727H78.5985C77.1815 24.9727 76.4808 25.5839 76.4808 26.8063V27.2509C76.4808 28.4574 77.1893 29.0607 78.5985 29.0607H82.9742C84.4146 29.0607 85.1387 28.4574 85.1387 27.2509V26.8063C85.1387 25.5839 84.4146 24.9727 82.9742 24.9727Z",
      fill: "black"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M96 17.9476H98.7172C100.438 17.9476 101.793 18.4557 102.774 19.4717C103.755 20.4878 104.245 21.9086 104.245 23.7264V31.4818H101.481V23.8693C101.481 22.7421 101.263 21.9166 100.835 21.4006C100.298 20.7259 99.5192 20.3925 98.507 20.3925H96.1557C95.1747 20.3925 94.4039 20.7259 93.8511 21.4006C93.454 21.9166 93.2515 22.7421 93.2515 23.8693V31.4818H90.4875V23.7264C90.4875 21.9086 90.9781 20.4957 91.9591 19.4717C92.9401 18.4557 94.2871 17.9476 95.9922 17.9476H96Z",
      fill: "black"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M116.991 29.6719C116.01 30.8785 114.787 31.4818 113.324 31.4818H111.619C110.085 31.4818 108.862 30.9896 107.951 30.0053C107.087 29.0845 106.659 27.7748 106.659 26.084V17.9556H109.4V26.1078C109.4 27.0921 109.61 27.8144 110.022 28.2669C110.497 28.7829 111.12 29.0448 111.891 29.0448H113.09C113.876 29.0448 114.507 28.7829 114.982 28.2669C115.41 27.8144 115.628 27.0921 115.628 26.1078V17.9556H118.346V26.1078C118.346 27.0921 118.556 27.8144 118.968 28.2669C119.443 28.7829 120.066 29.0448 120.837 29.0448H122.036C122.822 29.0448 123.453 28.7829 123.928 28.2669C124.356 27.8144 124.574 27.0921 124.574 26.1078V17.9556H127.315V26.084C127.315 27.7748 126.871 29.0845 125.976 30.0053C125.065 30.9896 123.842 31.4818 122.285 31.4818H120.603C119.171 31.4818 117.972 30.8785 116.983 29.6719H116.991Z",
      fill: "black"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M135.436 20.3924C134.455 20.3924 133.684 20.7258 133.131 21.4006C132.734 21.9165 132.532 22.7421 132.532 23.8693V31.4817H129.768V13.4388H132.532V18.7731C133.334 18.2254 134.244 17.9476 135.272 17.9476H137.989C139.71 17.9476 141.065 18.4556 142.046 19.4717C143.027 20.4877 143.517 21.9086 143.517 23.7264V31.4817H140.753V23.8693C140.753 22.7421 140.535 21.9165 140.107 21.4006C139.57 20.7258 138.791 20.3924 137.779 20.3924H135.428H135.436Z",
      fill: "black"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M150.019 31.4818C148.726 31.4818 147.706 31.1166 146.951 30.3784C146.18 29.6402 145.799 28.6956 145.799 27.5366V26.5761C145.799 25.4013 146.18 24.4488 146.951 23.7105C147.706 22.9564 148.726 22.5834 150.019 22.5834H157.228V22.5119C157.228 21.0672 156.45 20.3528 154.9 20.3528H146.881V17.9556H154.854C156.512 17.9556 157.781 18.3842 158.653 19.2494C159.541 20.0829 159.992 21.2895 159.992 22.8691V27.6398C159.992 28.8623 159.587 29.8227 158.77 30.5292C158.03 31.1722 156.995 31.4897 155.656 31.4897H150.011L150.019 31.4818ZM155.064 24.9727H150.688C149.271 24.9727 148.57 25.5839 148.57 26.8063V27.2509C148.57 28.4574 149.279 29.0607 150.688 29.0607H155.064C156.504 29.0607 157.228 28.4574 157.228 27.2509V26.8063C157.228 25.5839 156.504 24.9727 155.064 24.9727Z",
      fill: "black"
    })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {
      id: "clip0_32_618"
    }, /*#__PURE__*/react.createElement("rect", {
      width: "160",
      height: "45",
      fill: "white"
    })))))), /*#__PURE__*/react.createElement(Gnb, {
      data: data
    }), /*#__PURE__*/react.createElement("div", {
      className: "util"
    }, /*#__PURE__*/react.createElement("ul", {
      className: "util-list"
    }, isWeb && /*#__PURE__*/react.createElement("li", {
      className: "util-item showroom"
    }, headerTheme == 'light' && /*#__PURE__*/react.createElement(Button, {
      tag: "a",
      href: "".concat(isLiverServer(), "business/hanwha_hub.do"),
      cate: "btn-1",
      size: "sm",
      type: "outline-hug",
      theme: 'dark',
      font: "on",
      target: '_blank'
    }, "Hanwha Hub"), /*#__PURE__*/react.createElement(Button, {
      tag: "a",
      href: "".concat(isLiverServer(), "business/hanwha_hub.do"),
      target: '_blank',
      cate: "btn-1",
      size: "sm",
      type: "outline-hug",
      theme: 'light',
      font: "on"
    }, "Hanwha Hub")), /*#__PURE__*/react.createElement("li", {
      className: "util-item lang"
    }, /*#__PURE__*/react.createElement("span", {
      className: "current",
      onClick: function onClick() {
        toggleLangContainer();
      }
    }, "KR"), /*#__PURE__*/react.createElement("div", {
      className: "lang-container"
    }, /*#__PURE__*/react.createElement("div", {
      className: "lang"
    }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/"
    }, "KR")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "https://www.hanwha.com",
      target: "_blank",
      onClick: function onClick() {
        setTagging('gnb_goto_engsite');
      }
    }, "EN")))))), /*#__PURE__*/react.createElement("li", {
      className: "util-item search"
    }, /*#__PURE__*/react.createElement("button", {
      type: "button",
      "aria-label": "\uAC80\uC0C9\uD558\uAE30 \uC0AC\uC774\uB4DC\uBC14 \uC5F4\uAE30"
    }, /*#__PURE__*/react.createElement("span", {
      className: "search-btn"
    }, /*#__PURE__*/react.createElement("svg", {
      width: "28",
      height: "28",
      viewBox: "0 0 28 28",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M12.8333 22.1667C17.988 22.1667 22.1667 17.988 22.1667 12.8333C22.1667 7.67868 17.988 3.5 12.8333 3.5C7.67868 3.5 3.5 7.67868 3.5 12.8333C3.5 17.988 7.67868 22.1667 12.8333 22.1667Z",
      stroke: "black",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M24.5 24.5L19.425 19.425",
      stroke: "black",
      strokeWidth: "2",
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }))), /*#__PURE__*/react.createElement("span", {
      className: "close-btn"
    }, /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M19 19L5 5",
      stroke: "black",
      strokeWidth: "1.5",
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M4.99999 19L19 5",
      stroke: "black",
      strokeWidth: "1.5",
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }))))), /*#__PURE__*/react.createElement("li", {
      className: "util-item group",
      onClick: handleOpenGroupNav,
      onBlur: gropNavBtnBlurHandler
    }, /*#__PURE__*/react.createElement("button", {
      type: "button",
      "aria-label": "\uADF8\uB8F9\uC0AC \uBC14\uB85C\uAC00\uAE30 \uC0AC\uC774\uB4DC\uBC14 \uC5F4\uAE30"
    }, /*#__PURE__*/react.createElement("span", {
      className: "group-btn"
    }, /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: "28",
      height: "28",
      viewBox: "0 0 28 28",
      fill: "none"
    }, /*#__PURE__*/react.createElement("rect", {
      x: "3.21666",
      y: "3.63086",
      width: "4",
      height: "4",
      fill: "black",
      stroke: "black"
    }), /*#__PURE__*/react.createElement("rect", {
      x: "12",
      y: "3.63086",
      width: "4",
      height: "4",
      fill: "black",
      stroke: "black"
    }), /*#__PURE__*/react.createElement("rect", {
      x: "20.7833",
      y: "3.63086",
      width: "4",
      height: "4",
      fill: "black",
      stroke: "black"
    }), /*#__PURE__*/react.createElement("rect", {
      x: "3.21666",
      y: "11.7314",
      width: "4",
      height: "4",
      fill: "black",
      stroke: "black"
    }), /*#__PURE__*/react.createElement("rect", {
      x: "12",
      y: "11.7314",
      width: "4",
      height: "4",
      fill: "black",
      stroke: "black"
    }), /*#__PURE__*/react.createElement("rect", {
      x: "20.7833",
      y: "11.7314",
      width: "4",
      height: "4",
      fill: "black",
      stroke: "black"
    }), /*#__PURE__*/react.createElement("rect", {
      x: "3.21666",
      y: "19.8311",
      width: "4",
      height: "4",
      fill: "black",
      stroke: "black"
    }), /*#__PURE__*/react.createElement("rect", {
      x: "12",
      y: "19.8311",
      width: "4",
      height: "4",
      fill: "black",
      stroke: "black"
    }), /*#__PURE__*/react.createElement("rect", {
      x: "20.7833",
      y: "19.8311",
      width: "4",
      height: "4",
      fill: "black",
      stroke: "black"
    })))))), /*#__PURE__*/react.createElement("button", {
      type: "button",
      className: "btn-menu"
    }, /*#__PURE__*/react.createElement("span", null), /*#__PURE__*/react.createElement("span", null), /*#__PURE__*/react.createElement("span", null), /*#__PURE__*/react.createElement("span", null))))), /*#__PURE__*/react.createElement("div", {
      className: "header-search"
    }, /*#__PURE__*/react.createElement(Container, {
      size: 'xl'
    }, !isMobile && /*#__PURE__*/react.createElement(Stack, {
      size: "h-m"
    }), /*#__PURE__*/react.createElement(SearchWideBar, {
      type: 'tag',
      value: headerSrhText,
      setSearchText: setHeaderSrhText
    }), /*#__PURE__*/react.createElement(Stack, {
      size: "h-l"
    }))), /*#__PURE__*/react.createElement("div", {
      className: "header-dimed"
    }), /*#__PURE__*/react.createElement(HeaderSearchTooltip, {
      setIsShowSearchTooltip: setIsShowSearchTooltip,
      isShowSearchTooltip: isShowSearchTooltip,
      ref: tooltipRef
    }));
  }
  function handleTooltipArrowPos() {
    /**
     * Tooltip Arrow Position Function for responsive design
     * <HeaderSearchTooltip>에서 사용하기 위해서 export
     */
  
    var tooltip = document.querySelector('.header-search-tooltip');
    if (!tooltip) return;
    var targetParent = document.querySelector('#header .util-item.search .search-btn');
    var rect = targetParent.getBoundingClientRect();
    var header = document.getElementById('header');
    console.log('getComputedStyle(tooltip)', getComputedStyle(tooltip).right);
    var tooltipArrowPos = window.innerWidth - rect.right - getComputedStyle(tooltip).right.split('px')[0] - rect.width / 4;
    tooltip.style.setProperty("--parentRight", "".concat(tooltipArrowPos, "px "));
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  
  
  
  
  function toConsumableArray_toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/HeaderSiderGroupNav.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const HeaderSiderGroupNav_module = ({"button":"HeaderSiderGroupNav-module__button--FCYZQ","container":"HeaderSiderGroupNav-module__container--MWUZj","border":"HeaderSiderGroupNav-module__border--E1fEY","text-container":"HeaderSiderGroupNav-module__text-container--wHFxJ","circle-container":"HeaderSiderGroupNav-module__circle-container--cVpxR","circle":"HeaderSiderGroupNav-module__circle--JUZC4","lg":"HeaderSiderGroupNav-module__lg--Kvtg5","center":"HeaderSiderGroupNav-module__center--dAL9e","md":"HeaderSiderGroupNav-module__md--hiqCq","left":"HeaderSiderGroupNav-module__left--KdGBE","right":"HeaderSiderGroupNav-module__right--Qn8vi","sm":"HeaderSiderGroupNav-module__sm--bONTS","outline-hug":"HeaderSiderGroupNav-module__outline-hug--jIj2L","ghost-hug":"HeaderSiderGroupNav-module__ghost-hug--KUhUa","btn-1":"HeaderSiderGroupNav-module__btn-1--AZ2Wm","light":"HeaderSiderGroupNav-module__light--k9Q2w","outline-fix":"HeaderSiderGroupNav-module__outline-fix--FfCBY","ghost-fix":"HeaderSiderGroupNav-module__ghost-fix--nu8_t","dark":"HeaderSiderGroupNav-module__dark--z7fjY","btn-2":"HeaderSiderGroupNav-module__btn-2--dI7ox","none":"HeaderSiderGroupNav-module__none--SHq_N","md-txt":"HeaderSiderGroupNav-module__md-txt--yDEbK","sm-txt":"HeaderSiderGroupNav-module__sm-txt--XdvLD","active":"HeaderSiderGroupNav-module__active--boGcG","disabled":"HeaderSiderGroupNav-module__disabled--ZdTvW","font-on":"HeaderSiderGroupNav-module__font-on--UK5t1","font-off":"HeaderSiderGroupNav-module__font-off--YcSJH","dimmed":"HeaderSiderGroupNav-module__dimmed--cqvJY","sideNavInner":"HeaderSiderGroupNav-module__sideNavInner--TayNb","sideContainer":"HeaderSiderGroupNav-module__sideContainer--ls8F1","category":"HeaderSiderGroupNav-module__category--yu2es","groupTitieWrap":"HeaderSiderGroupNav-module__groupTitieWrap--fEltC","groupListWrap":"HeaderSiderGroupNav-module__groupListWrap--Y32jY","tabItemBox":"HeaderSiderGroupNav-module__tabItemBox--IGdY9","groupItemBox":"HeaderSiderGroupNav-module__groupItemBox--tEXDo","groupItemInner":"HeaderSiderGroupNav-module__groupItemInner--fcHUk","itemInner":"HeaderSiderGroupNav-module__itemInner--oi2Gb","groupItemTitle":"HeaderSiderGroupNav-module__groupItemTitle--mjVND","arrowBox":"HeaderSiderGroupNav-module__arrowBox--j_eh7","disActive":"HeaderSiderGroupNav-module__disActive--uunNn","tit":"HeaderSiderGroupNav-module__tit--U5YPb","subTiite":"HeaderSiderGroupNav-module__subTiite--L8NUk","web":"HeaderSiderGroupNav-module__web--S1wGk","mob":"HeaderSiderGroupNav-module__mob--OohtH"});
  ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
  
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/HoverButton.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const HoverButton_module = ({"button":"HoverButton-module__button--qXYF9","container":"HoverButton-module__container--jUX7r","border":"HoverButton-module__border--BC8pb","text-container":"HoverButton-module__text-container--LRGzl","circle-container":"HoverButton-module__circle-container--nxMas","circle":"HoverButton-module__circle--JzIbh","lg":"HoverButton-module__lg--Z9TZK","center":"HoverButton-module__center--fWiz3","md":"HoverButton-module__md--Ux6HI","left":"HoverButton-module__left--dGo3A","right":"HoverButton-module__right--QuJk9","sm":"HoverButton-module__sm--HSxCY","outline-hug":"HoverButton-module__outline-hug--OXWk6","ghost-hug":"HoverButton-module__ghost-hug--NYkO1","btn-1":"HoverButton-module__btn-1--m2uQM","light":"HoverButton-module__light--xoJk9","outline-fix":"HoverButton-module__outline-fix--Lh_9K","ghost-fix":"HoverButton-module__ghost-fix--jHXJT","dark":"HoverButton-module__dark--hKkXx","btn-2":"HoverButton-module__btn-2--GVULK","none":"HoverButton-module__none--DEbez","md-txt":"HoverButton-module__md-txt--BynF5","sm-txt":"HoverButton-module__sm-txt--qKYOY","active":"HoverButton-module__active--aCcVI","disabled":"HoverButton-module__disabled--HUt_T","font-on":"HoverButton-module__font-on--L4DCZ","font-off":"HoverButton-module__font-off--B8KpC","keyword":"HoverButton-module__keyword--z5BSZ","square":"HoverButton-module__square--zE0Wa"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/HoverBtn.jsx
  
  
  
  
  
  
  function HoverButton(_ref) {
    var _txt;
    var children = _ref.children,
      _ref$cate = _ref.cate,
      cate = _ref$cate === void 0 ? "btn-1" : _ref$cate,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "sm" : _ref$size,
      theme = _ref.theme,
      _ref$font = _ref.font,
      font = _ref$font === void 0 ? "off" : _ref$font,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      callback = _ref.callback,
      className = _ref.className,
      color = _ref.color,
      _ref$isActivate = _ref.isActivate,
      isActivate = _ref$isActivate === void 0 ? false : _ref$isActivate;
    var leftIcon;
    var rightIcon;
    var txt;
    var position;
    function onClickEvent(callback) {
      if (callback) callback();
    }
    if (Array.isArray(children)) {
      var element1 = children === null || children === void 0 ? void 0 : children[0];
      var element2 = children === null || children === void 0 ? void 0 : children[1];
      if (typeof element1 === "string") {
        txt = element1;
        rightIcon = element2;
        position = "right";
      } else {
        leftIcon = element1;
        txt = element2;
        position = "left";
      }
    } else {
      var element = children;
      if (typeof element === "string") {
        txt = element;
        position = "none";
      } else {
        leftIcon = element;
        position = "center";
      }
    }
    var isMobile = hooks_useDeviceCheck();
    var need = ((_txt = txt) === null || _txt === void 0 ? void 0 : _txt.indexOf('한화')) != -1;
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(motion.button, {
      type: "button",
      className: "\n                ".concat(HoverButton_module.button, "\n                ").concat(HoverButton_module[cate], "\n                ").concat(HoverButton_module[size], "\n                ").concat(HoverButton_module[theme], "\n                ").concat(HoverButton_module["font-".concat(font)], "\n                ").concat(HoverButton_module[position], "\n                ").concat(isActivate && "".concat(HoverButton_module.active), "\n                ").concat(mcn(className), "\n            "),
      disabled: disabled,
      onClick: function onClick() {
        onClickEvent(callback);
      }
    }, /*#__PURE__*/react.createElement("div", {
      className: "".concat(HoverButton_module.border)
    }), /*#__PURE__*/react.createElement(motion.div, {
      className: "".concat(HoverButton_module.container)
    }, leftIcon && leftIcon, txt && /*#__PURE__*/react.createElement(motion.span, {
      className: "".concat(HoverButton_module["".concat(size, "-txt")]),
      dangerouslySetInnerHTML: {
        __html: txt.replace('한화', '<i class="font-hanwha">한화</i>')
      }
    }), rightIcon && rightIcon)));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Tabs.jsx
  
  
  
  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  
  
  
  function Tabs(_ref) {
    var _tabData$data;
    var depth = _ref.depth,
      _ref$current = _ref.current,
      current = _ref$current === void 0 ? 0 : _ref$current,
      data = _ref.data,
      className = _ref.className,
      tabIndex = _ref.tabIndex,
      setTabIndex = _ref.setTabIndex,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? "light" : _ref$theme,
      setCategory = _ref.setCategory;
    var _useState = (0,react.useState)(_objectSpread({}, data)),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      tabData = _useState2[0],
      setTabData = _useState2[1];
    var _useState3 = (0,react.useState)(current),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      activeIdx = _useState4[0],
      setActiveIdx = _useState4[1];
    function onClickEvent(index, callback, tabName) {
      setActiveIdx(index);
      if (setTabIndex) {
        setTabIndex(index);
      }
      if (setCategory) {
        setCategory(tabName);
      }
      if (callback) callback();
    }
    (0,react.useEffect)(function () {
      setTabData(_objectSpread({}, data));
      console.log('current', current);
    }, [data]);
    (0,react.useEffect)(function () {
      if (tabIndex !== undefined) {
        setActiveIdx(tabIndex);
      }
    }, [tabIndex]);
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
      className: "tabs-container",
      "data-lenis-prevent": true
    }, /*#__PURE__*/react.createElement("ul", {
      className: "tabs-list ".concat(mcn(className)),
      "data-depth": depth
    }, (_tabData$data = tabData.data) === null || _tabData$data === void 0 ? void 0 : _tabData$data.map(function (_d, index) {
      var hasTagging = _d.tagging ? {
        'data-tagging': _d.tagging
      } : '';
      return /*#__PURE__*/react.createElement(react.Fragment, {
        key: "li".concat(index)
      }, depth == 2 && /*#__PURE__*/react.createElement("li", {
        key: index,
        className: 'tabs-item'.concat(" ", activeIdx == index ? 'active' : ""),
        onClick: function onClick() {
          return onClickEvent(index, _d.callback);
        }
      }, _d.href ? /*#__PURE__*/react.createElement("a", _extends({}, hasTagging, {
        onClick: function onClick() {
          return _d.tagging && setTagging(_d.tagging);
        },
        href: _d.href
      }), /*#__PURE__*/react.createElement(Title, {
        txt: _d.title
      })) : /*#__PURE__*/react.createElement("button", _extends({}, hasTagging, {
        type: "button"
      }), /*#__PURE__*/react.createElement(Title, {
        txt: _d.title
      }))), depth == 3 && /*#__PURE__*/react.createElement("li", {
        key: index,
        className: 'tabs-item'.concat(" ", activeIdx == index ? 'active' : ""),
        onClick: function onClick() {
          return onClickEvent(index, _d.callback);
        }
      }, _d.href ? /*#__PURE__*/react.createElement("a", {
        onClick: function onClick() {
          return _d.tagging && setTagging(_d.tagging);
        },
        href: _d.href
      }, /*#__PURE__*/react.createElement(Title, {
        txt: _d.title
      })) : /*#__PURE__*/react.createElement("button", {
        type: "button"
      }, /*#__PURE__*/react.createElement(Title, {
        txt: _d.title
      }))), depth == 4 && /*#__PURE__*/react.createElement("li", {
        key: index,
        className: 'tabs-item'.concat(" ", activeIdx == index ? 'active' : ""),
        onClick: function onClick() {
          return onClickEvent(index, _d.callback, _d.tabName);
        }
      }, /*#__PURE__*/react.createElement(HoverButton, {
        theme: theme,
        isActivate: activeIdx == index
      }, _d.title)));
    }))));
  }
  function Title(_ref2) {
    var txt = _ref2.txt;
    if (!txt) return null;
    return /*#__PURE__*/react.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: txt.replace('한화', '<i class="font-hanwha">한화</i>')
      }
    });
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/HeaderSideGroupNav.jsx
  
  
  
  
  
  
  
  function HeaderSideGroupNav(props) {
    var data = props.data;
    var _useState = (0,react.useState)(0),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      tabIndex = _useState2[0],
      setTabIndex = _useState2[1]; // 탭(<Tabs/>)의 인덱스 상태를 관리하는 state
    var _useState3 = (0,react.useState)([]),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      tabNameData = _useState4[0],
      setTabNameData = _useState4[1]; //[{key: "ALL", title: "전체", callback : fnc}] : 데이터 구조
    var _useState5 = (0,react.useState)([]),
      _useState6 = slicedToArray_slicedToArray(_useState5, 2),
      tabListData = _useState6[0],
      setTabListData = _useState6[1]; // 그룹사 리스트 데이터
    var _useState7 = (0,react.useState)(null),
      _useState8 = slicedToArray_slicedToArray(_useState7, 2),
      activeIdx = _useState8[0],
      setActiveIdx = _useState8[1]; // 마우스 오버된 인덱스
    var _useState9 = (0,react.useState)(null),
      _useState10 = slicedToArray_slicedToArray(_useState9, 2),
      isOpen = _useState10[0],
      setIsOpen = _useState10[1]; // 사이드바 열림 상태 : true || false
    var groupItemBox = (0,react.useRef)(null);
    (0,react.useEffect)(function () {
      if (!data) return;
  
      // 모든 탭 데이터를 한 번에 생성
      var newTabNameData = [{
        key: "ALL",
        title: "전체",
        callback: function callback() {
          return handleTabClick("ALL");
        }
      }];
  
      // Object.entries로 데이터 순회하여 탭 생성
      var _loop = function _loop() {
        var _Object$entries$_i = slicedToArray_slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        newTabNameData.push({
          key: key,
          title: data[key].name,
          callback: function callback() {
            return handleTabClick(key);
          }
        });
      };
      for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {
        _loop();
      }
  
      // 한 번에 상태 업데이트
      setTabNameData(newTabNameData);
  
      // 첫 번째 useEffect에서는 탭 클릭 처리 안함
    }, [data]);
    (0,react.useEffect)(function () {
      // tabNameData가 업데이트된 후에만 handleTabClick 호출
      if (tabNameData.length > 1) {
        handleTabClick("ALL");
      }
    }, [tabNameData]);
  
    // 리사이즈 시 lenis 작동 여부 제어
    window.addEventListener('resize', function () {
      var isSideOpen = document.querySelector('#side-group-nav').classList.contains('open');
      if (isSideOpen) {
        setTimeout(function () {
          window.lenis.stop();
        }, 100);
      }
    });
    function handleTabClick(tabTitle) {
      groupItemBox.current.scrollTo(0, 0);
      groupItemBox.current.style.opacity = 0;
      setTimeout(function () {
        if (tabTitle !== "ALL") {
          setTabListData(data[tabTitle].list);
        } else {
          setTabListData([]); // 초기화
          setTabIndex(0);
          var _loop2 = function _loop2() {
            var _Object$entries2$_i = slicedToArray_slicedToArray(_Object$entries2[_i2], 2),
              key = _Object$entries2$_i[0],
              value = _Object$entries2$_i[1];
            setTabListData(function (prev) {
              return [].concat(toConsumableArray_toConsumableArray(prev), toConsumableArray_toConsumableArray(data[key].list));
            });
          };
          for (var _i2 = 0, _Object$entries2 = Object.entries(data); _i2 < _Object$entries2.length; _i2++) {
            _loop2();
          }
        }
      }, 200); // 200ms 후에 탭 리스트를 설정함으로써 애니메이션 효과를 줌
  
      setTimeout(function () {
        if (groupItemBox.current) {
          var imgs = groupItemBox.current.querySelectorAll("img");
          var totalLength = imgs.length;
          var loadedCount = 0;
          imgs.forEach(function (img) {
            img.style.visibility = '=hidden';
            if (img.complete) {
              loadedCount++;
            }
            if (totalLength === totalLength) {
              groupItemBox.current.style.opacity = 1;
              setTimeout(function () {
                groupItemBox.current.querySelectorAll("img").forEach(function (img) {
                  img.style.visibility = 'visible';
                });
              }, 100); // 100ms 후에 이미지 보이도록 설정
            }
          });
        }
      }, 500); // 500ms 후에 이미지 로딩 완료 후에 opacity를 1로 설정
    }
    function handleToggleClick() {
      var _groupItemBox$current;
      var isOpen = document.querySelector('#side-group-nav').classList.contains('open');
      (_groupItemBox$current = groupItemBox.current) === null || _groupItemBox$current === void 0 || _groupItemBox$current.scrollTo(0, 0);
      if (isOpen) {
        setIsOpen(false);
        setTabIndex(0);
        setActiveIdx(null);
        handleTabClick("ALL");
        document.querySelector('#side-group-nav').classList.remove('open');
        document.querySelector('#side-group-nav').setAttribute('aria-hidden', 'false');
        window.lenis.start();
      } else {
        setIsOpen(true);
        document.querySelector('#side-group-nav').classList.add('open');
        document.querySelector('#side-group-nav').setAttribute('aria-hidden', 'true');
        window.lenis.stop();
      }
    }
    function handleNavScroll(e) {
      groupItemBox.current.scrollTo(0, groupItemBox.current.scrollTop + e.deltaY);
    }
    return /*#__PURE__*/react.createElement("div", {
      className: "".concat(HeaderSiderGroupNav_module.sideGroupNav, " ").concat(isOpen ? HeaderSiderGroupNav_module.open : '')
    }, /*#__PURE__*/react.createElement("div", {
      className: "".concat(HeaderSiderGroupNav_module.dimmed, " dimmed"),
      onClick: handleToggleClick
    }), /*#__PURE__*/react.createElement("div", {
      className: "".concat(HeaderSiderGroupNav_module.sideNavInner, " side-nav-inner")
    }, /*#__PURE__*/react.createElement("div", {
      className: "".concat(HeaderSiderGroupNav_module.sideContainer, " header-side-group-nav"),
      "data-lenis-prevent": true,
      onWheel: handleNavScroll
    }, /*#__PURE__*/react.createElement("div", {
      className: "".concat(HeaderSiderGroupNav_module.groupTitieWrap)
    }, /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", {
      className: "".concat(HeaderSiderGroupNav_module.category, " sub-category-1 ")
    }, "\uADF8\uB8F9\uC0AC \uBC14\uB85C\uAC00\uAE30"), /*#__PURE__*/react.createElement("h3", {
      className: "".concat(HeaderSiderGroupNav_module.subTiite, " sub-title-1")
    }, /*#__PURE__*/react.createElement("span", {
      className: "font-hanwha"
    }, "\uD55C\uD654"), "\uB294 \uB2E4\uC591\uD55C \uC0AC\uC5C5\uBD84\uC57C\uC5D0\uC11C", /*#__PURE__*/react.createElement("br", {
      className: HeaderSiderGroupNav_module.web
    }), "\uAC1C\uC778, \uC0AC\uD68C, \uC9C0\uAD6C\uC758 \uC9C0\uC18D\uAC00\uB2A5\uD55C", /*#__PURE__*/react.createElement("br", null), "\uB0B4\uC77C\uC744 \uC704\uD55C \uB2E4\uC591\uD55C \uC194\uB8E8\uC158\uC744 \uC81C\uACF5\uD558\uBA70", /*#__PURE__*/react.createElement("br", {
      className: "".concat(HeaderSiderGroupNav_module.web, " ").concat(HeaderSiderGroupNav_module.mob)
    }), "\uC131\uC7A5\uC744 \uC774\uC5B4\uAC00\uACE0 \uC788\uC2B5\uB2C8\uB2E4.")), /*#__PURE__*/react.createElement("button", {
      type: "button",
      onClick: handleToggleClick,
      "aria-label": "\uC0AC\uC774\uB4DC\uBC14 \uB2EB\uAE30"
    }, /*#__PURE__*/react.createElement("span", {
      className: "close-btn"
    }, /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M19 19L5 5",
      stroke: "black",
      strokeWidth: "1.5",
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M4.99999 19L19 5",
      stroke: "black",
      strokeWidth: "1.5",
      strokeLinecap: "square",
      strokeLinejoin: "round"
    }))))), /*#__PURE__*/react.createElement("div", {
      className: "".concat(HeaderSiderGroupNav_module.groupListWrap, " header-side-group-nav__inner")
    }, /*#__PURE__*/react.createElement("div", {
      className: "".concat(HeaderSiderGroupNav_module.tabItemBox, " header-side-group-nav__tab")
    }, data && /*#__PURE__*/react.createElement(Tabs, {
      depth: 2,
      data: {
        data: tabNameData
      },
      tabIndex: tabIndex // 실제 tabIndex 상태를 전달
      ,
      setTabIndex: setTabIndex // setTabIndex 함수를 전달 (상태값이 아님)
    })), /*#__PURE__*/react.createElement("div", {
      className: "".concat(HeaderSiderGroupNav_module.groupItemBox),
      ref: groupItemBox
    }, /*#__PURE__*/react.createElement("div", {
      className: "".concat(HeaderSiderGroupNav_module.groupItemInner)
    }, tabListData === null || tabListData === void 0 ? void 0 : tabListData.map(function (item, index) {
      return /*#__PURE__*/react.createElement("a", {
        key: index,
        href: item.href,
        className: activeIdx === index ? HeaderSiderGroupNav_module.active : activeIdx === null ? '' : HeaderSiderGroupNav_module.disActive,
        onMouseEnter: function onMouseEnter() {
          window.innerWidth > 768 && setActiveIdx(index);
        },
        onMouseLeave: function onMouseLeave() {
          setActiveIdx(null);
        },
        onFocus: function onFocus() {
          window.innerWidth > 768 && setActiveIdx(index);
        },
        onBlur: function onBlur() {
          index + 1 === tabListData.length ? handleToggleClick() : setActiveIdx(null);
        }
      }, /*#__PURE__*/react.createElement("div", {
        className: HeaderSiderGroupNav_module.itemInner
      }, /*#__PURE__*/react.createElement("div", {
        className: "".concat(HeaderSiderGroupNav_module.groupItemTitle)
      }, /*#__PURE__*/react.createElement("div", {
        className: "".concat(HeaderSiderGroupNav_module.tit, " font-hanwha"),
        dangerouslySetInnerHTML: {
          __html: item.title
        }
      }), /*#__PURE__*/react.createElement("div", {
        className: HeaderSiderGroupNav_module.arrowBox
      }, /*#__PURE__*/react.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        width: "40",
        height: "40",
        viewBox: "0 0 40 40",
        fill: "none"
      }, /*#__PURE__*/react.createElement("rect", {
        y: "40",
        width: "40",
        height: "40",
        rx: "8",
        transform: "rotate(-90 0 40)",
        fill: "#F37321"
      }), /*#__PURE__*/react.createElement("path", {
        d: "M18 26L23.9259 20L18 14",
        stroke: "white",
        strokeWidth: "2"
      }))))), /*#__PURE__*/react.createElement("img", {
        src: item.main,
        alt: ""
      }));
    })))))));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/MobileGnb.jsx
  
  
  
  
  function MobileGnb(_ref) {
    var data = _ref.data;
    var _useState = (0,react.useState)(''),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      headerSrhText = _useState2[0],
      setHeaderSrhText = _useState2[1];
    (0,react.useEffect)(function () {}, []);
    (0,react.useEffect)(function () {
      checkSearchText();
    }, [headerSrhText]);
    function checkSearchText() {
      if (headerSrhText !== '') {
        location.href = "/search.do?searchText=".concat(headerSrhText);
      }
    }
    return /*#__PURE__*/react.createElement("div", {
      className: "mobile-gnb-wrapper"
    }, /*#__PURE__*/react.createElement("div", {
      className: "mobile-gnb-inner"
    }, /*#__PURE__*/react.createElement("div", {
      className: "util"
    }, /*#__PURE__*/react.createElement("ul", {
      className: "util-list"
    }, /*#__PURE__*/react.createElement("li", {
      className: "util-item lang"
    }, /*#__PURE__*/react.createElement("div", {
      className: "icon"
    }, /*#__PURE__*/react.createElement("svg", {
      width: "18",
      height: "18",
      viewBox: "0 0 18 18",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M9.00004 16.0715C12.9055 16.0715 16.0715 12.9055 16.0715 9.00004C16.0715 5.09459 12.9055 1.92859 9.00004 1.92859C5.09459 1.92859 1.92859 5.09459 1.92859 9.00004C1.92859 12.9055 5.09459 16.0715 9.00004 16.0715Z",
      stroke: "black",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M1.92859 9H16.0715",
      stroke: "black",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M8.99997 1.92859C10.7687 3.865 11.7739 6.37797 11.8286 9.00004C11.7739 11.6221 10.7687 14.1351 8.99997 16.0715C7.2312 14.1351 6.22601 11.6221 6.17139 9.00004C6.22601 6.37797 7.2312 3.865 8.99997 1.92859Z",
      stroke: "black",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }))), /*#__PURE__*/react.createElement("a", {
      className: "current",
      href: "#"
    }, /*#__PURE__*/react.createElement("span", null, "KR")), /*#__PURE__*/react.createElement("a", {
      href: "https://www.hanwha.com",
      target: "_blank"
    }, /*#__PURE__*/react.createElement("span", null, "EN")))), /*#__PURE__*/react.createElement("button", {
      type: "button",
      className: "btn-menu"
    }, /*#__PURE__*/react.createElement("span", null), /*#__PURE__*/react.createElement("span", null))), /*#__PURE__*/react.createElement(Gnb, {
      data: data
    }), /*#__PURE__*/react.createElement("div", {
      className: "search"
    }, /*#__PURE__*/react.createElement(SearchWideBar, {
      type: 'tag',
      value: headerSrhText,
      setSearchText: setHeaderSrhText
    }))));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/SocialIcon.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const SocialIcon_module = ({"social-icon":"SocialIcon-module__social-icon--VoBdb"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/SocialIcon.jsx
  
  
  
  
  // Libraries - Styles - Icons
  function SocialIcon(_ref) {
    var type = _ref.type,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "24" : _ref$size,
      color = _ref.color;
    return /*#__PURE__*/react.createElement("i", {
      className: "".concat(SocialIcon_module["social-icon"], " ").concat(color !== undefined ? ColorSet_module[color] : "")
    }, type == "youtube" && color !== "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M22.584 7.65747C22.4813 6.8821 22.1859 6.14482 21.7248 5.51305C21.1529 4.9362 20.377 4.60772 19.5648 4.59866C16.542 4.38026 12.0048 4.38025 12.0048 4.38025H11.9952C11.9952 4.38025 7.46158 4.38026 4.43518 4.59866C3.62301 4.60785 2.84709 4.93631 2.27518 5.51305C1.81451 6.14494 1.51954 6.88221 1.41718 7.65747C1.28273 8.81797 1.21062 9.98484 1.20117 11.1531V12.7887C1.21061 13.9569 1.28273 15.1238 1.41718 16.2843C1.51924 17.0596 1.81424 17.7969 2.27518 18.4287C2.93275 19.0121 3.77818 19.3396 4.65718 19.3515C6.38518 19.5171 12.0012 19.5687 12.0012 19.5687C12.0012 19.5687 16.5396 19.5614 19.5612 19.343C20.3734 19.3341 21.1494 19.0056 21.7212 18.4287C22.1823 17.7969 22.4777 17.0596 22.5804 16.2843C22.7148 15.1238 22.7869 13.9569 22.7964 12.7887V11.1495C22.7879 9.98252 22.717 8.81685 22.584 7.65747ZM9.77038 14.7783V8.70864L15.6072 11.7543L9.77038 14.7783Z",
      fill: "currentColor"
    })) : type == "instagram" && color !== "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M12.001 1.19989C9.06791 1.19989 8.69973 1.21274 7.54781 1.26512C6.39804 1.31783 5.6132 1.49981 4.92654 1.76689C4.21611 2.04272 3.61358 2.41176 3.01332 3.01224C2.41251 3.61261 2.04348 4.21514 1.76678 4.92524C1.49894 5.61212 1.31674 6.39728 1.26501 7.54651C1.2135 8.69854 1.2 9.06683 1.2 12C1.2 14.9332 1.21296 15.3002 1.26523 16.4521C1.31815 17.6018 1.50013 18.3867 1.767 19.0733C2.04304 19.7838 2.41208 20.3863 3.01256 20.9866C3.61272 21.5874 4.21525 21.9573 4.92513 22.2331C5.61234 22.5002 6.39728 22.6822 7.54683 22.7349C8.69887 22.7873 9.06672 22.8001 11.9997 22.8001C14.9331 22.8001 15.3 22.7873 16.452 22.7349C17.6017 22.6822 18.3874 22.5002 19.0746 22.2331C19.7847 21.9573 20.3864 21.5874 20.9865 20.9866C21.5873 20.3863 21.9562 19.7838 22.233 19.0737C22.4985 18.3867 22.6808 17.6016 22.7348 16.4523C22.7865 15.3004 22.8 14.9332 22.8 12C22.8 9.06683 22.7865 8.69876 22.7348 7.54673C22.6808 6.39696 22.4985 5.61223 22.233 4.92557C21.9562 4.21514 21.5873 3.61261 20.9865 3.01224C20.3858 2.41154 19.785 2.04251 19.074 1.767C18.3855 1.49981 17.6002 1.31772 16.4505 1.26512C15.2984 1.21274 14.9317 1.19989 11.9976 1.19989H12.001ZM11.0321 3.14616C11.3197 3.14573 11.6406 3.14616 12.001 3.14616C14.8847 3.14616 15.2264 3.15653 16.3651 3.20826C17.4181 3.25643 17.9897 3.43236 18.3704 3.58021C18.8744 3.77591 19.2337 4.00994 19.6115 4.38805C19.9895 4.76605 20.2234 5.12601 20.4197 5.63005C20.5675 6.01021 20.7437 6.58175 20.7916 7.63475C20.8434 8.77328 20.8546 9.11521 20.8546 11.9975C20.8546 14.8798 20.8434 15.2219 20.7916 16.3603C20.7435 17.4133 20.5675 17.9848 20.4197 18.3651C20.224 18.8691 19.9895 19.228 19.6115 19.6058C19.2335 19.9838 18.8746 20.2177 18.3704 20.4135C17.9901 20.562 17.4181 20.7375 16.3651 20.7857C15.2266 20.8374 14.8847 20.8487 12.001 20.8487C9.11715 20.8487 8.77533 20.8374 7.6369 20.7857C6.5839 20.7371 6.01237 20.5612 5.63134 20.4133C5.12742 20.2175 4.76734 19.9836 4.38934 19.6056C4.01134 19.2276 3.77742 18.8685 3.58118 18.3642C3.43333 17.984 3.25718 17.4124 3.20923 16.3594C3.1575 15.2209 3.14713 14.879 3.14713 11.9948C3.14713 9.11078 3.1575 8.77058 3.20923 7.63205C3.2574 6.57905 3.43333 6.00751 3.58118 5.62681C3.77698 5.12277 4.01135 4.76281 4.38945 4.38481C4.76745 4.00681 5.12742 3.77277 5.63145 3.57665C6.01215 3.42815 6.5839 3.25265 7.6369 3.20426C8.6332 3.15923 9.01931 3.14573 11.0321 3.14346V3.14616ZM17.766 4.93939C17.0505 4.93939 16.47 5.51935 16.47 6.23496C16.47 6.95046 17.0505 7.53096 17.766 7.53096C18.4815 7.53096 19.062 6.95046 19.062 6.23496C19.062 5.51946 18.4815 4.93896 17.766 4.93896V4.93939ZM12.001 6.45366C8.93809 6.45366 6.45474 8.93701 6.45474 12C6.45474 15.063 8.93809 17.5451 12.001 17.5451C15.064 17.5451 17.5464 15.063 17.5464 12C17.5464 8.93712 15.0637 6.45366 12.0008 6.45366H12.001ZM12.001 8.39993C13.9891 8.39993 15.601 10.0116 15.601 12C15.601 13.9882 13.9891 15.6001 12.001 15.6001C10.0127 15.6001 8.40101 13.9882 8.40101 12C8.40101 10.0116 10.0127 8.39993 12.001 8.39993Z",
      fill: "currentColor"
    })) : type == "facebook" && color !== "color" ? /*#__PURE__*/react.createElement("svg", {
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("g", {
      clipPath: "url(#clip0_82_2094)"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M22.8 12.0012C22.8 6.03471 17.9651 1.19977 12.0014 1.19977C6.03775 1.19977 1.2 6.03471 1.2 12.0012C1.2 17.9676 6.03494 22.8026 12.0014 22.8026C12.2457 22.8026 12.4843 22.7913 12.723 22.7745H11.9284V15.2273H9.38739V12.2848H11.9284V10.1144C11.9284 7.59582 13.467 6.22564 15.7104 6.22564C16.7858 6.22564 17.7096 6.30706 17.9791 6.34075V8.97161H16.4208C15.1994 8.97161 14.9636 9.55282 14.9636 10.4036V12.2819H17.8752L17.4962 15.2245H14.9636V22.3842C19.4869 21.0955 22.7972 16.9344 22.7972 11.9984L22.8 12.0012Z",
      fill: "currentColor"
    })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {
      id: "clip0_82_2094"
    }, /*#__PURE__*/react.createElement("rect", {
      width: "21.6",
      height: "21.6",
      fill: "white",
      transform: "translate(1.2 1.19977)"
    })))) : type == "blog" && color !== "color" ? /*#__PURE__*/react.createElement("svg", {
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("g", {
      clipPath: "url(#clip0_82_2093)"
    }, /*#__PURE__*/react.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M19.7987 3.59998C20.7555 3.60179 21.6723 3.98351 22.3477 4.66119C23.023 5.33888 23.4015 6.25704 23.4 7.21377V15.7866C23.4 17.7816 21.7869 19.4004 19.7987 19.4004H14.4259L12.5928 22.3872C12.5928 22.3872 12.5768 22.4214 12.5301 22.4761C12.4752 22.5683 12.3972 22.6445 12.3038 22.6974C12.2104 22.7502 12.1049 22.7777 11.9976 22.7773C11.8903 22.7768 11.785 22.7484 11.692 22.6947C11.5991 22.6411 11.5217 22.5642 11.4676 22.4715C11.4453 22.445 11.4251 22.4168 11.4072 22.3872L9.57409 19.4004H4.20127C3.7275 19.3996 3.25852 19.3055 2.82112 19.1235C2.38371 18.9415 1.98645 18.6751 1.65203 18.3395C1.31761 18.0039 1.05257 17.6057 0.872066 17.1677C0.691558 16.7296 0.599114 16.2603 0.600013 15.7866V7.21377C0.600013 5.21878 2.21197 3.59998 4.20127 3.59998H19.7987ZM18.3908 9.89961H18.3281C17.9907 9.90873 16.4164 10.0547 16.4164 12.0394V12.0713C16.4232 12.3335 16.5383 14.1096 18.3361 14.1096H18.376C18.5413 14.1074 19.1854 14.0663 19.5616 13.5773V13.9033C19.5616 13.9033 19.6608 14.9236 18.6724 14.9236H18.3361V16.1605H18.9084C19.1592 16.1514 20.9182 16.0237 20.9182 13.9797V10.041H19.5616V10.4309L19.5548 10.4217C19.4097 10.2562 19.2306 10.1239 19.0297 10.0338C18.8289 9.94368 18.611 9.89792 18.3908 9.89961ZM4.47715 8.21811H3.08065V14.0333H4.49197V13.5773C4.54099 13.6605 4.88413 14.178 5.66389 14.178C5.66389 14.178 7.63039 14.1062 7.63039 12.0086C7.63039 12.0086 7.55857 9.88137 5.66389 9.88137C5.66389 9.88137 5.04145 9.88137 4.47715 10.4309V8.21811ZM13.3509 9.89961H13.3167C13.034 9.91101 11.0447 10.0535 11.0447 12.0542V12.1169C11.0561 12.4703 11.2168 14.178 13.3509 14.178H13.3851C13.6769 14.1666 15.7107 14.0241 15.7107 12.0542V12.0246C15.7107 11.7749 15.6252 9.89961 13.3509 9.89961ZM8.07955 8.08701V9.43221L8.10121 9.43335C8.21293 9.44133 8.71681 9.53595 8.71681 10.5905V14.0333H10.062L10.0609 10.2029C10.0495 9.82893 9.90127 8.08701 8.07955 8.08701ZM5.35609 11.1582C5.59404 11.1582 5.82224 11.2527 5.99049 11.421C6.15875 11.5892 6.25327 11.8174 6.25327 12.0554C6.25327 12.2933 6.15875 12.5215 5.99049 12.6898C5.82224 12.858 5.59404 12.9525 5.35609 12.9525C5.11814 12.9525 4.88994 12.858 4.72169 12.6898C4.55343 12.5215 4.45891 12.2933 4.45891 12.0554C4.45891 11.8174 4.55343 11.5892 4.72169 11.421C4.88994 11.2527 5.11814 11.1582 5.35609 11.1582ZM13.352 11.1582C13.59 11.1582 13.8182 11.2527 13.9864 11.421C14.1547 11.5892 14.2492 11.8174 14.2492 12.0554C14.2492 12.2933 14.1547 12.5215 13.9864 12.6898C13.8182 12.858 13.59 12.9525 13.352 12.9525C13.1141 12.9525 12.8859 12.858 12.7176 12.6898C12.5494 12.5215 12.4549 12.2933 12.4549 12.0554C12.4549 11.8174 12.5494 11.5892 12.7176 11.421C12.8859 11.2527 13.1141 11.1582 13.352 11.1582ZM18.7283 11.1582C18.9662 11.1582 19.1944 11.2527 19.3627 11.421C19.5309 11.5892 19.6255 11.8174 19.6255 12.0554C19.6255 12.2933 19.5309 12.5215 19.3627 12.6898C19.1944 12.858 18.9662 12.9525 18.7283 12.9525C18.4903 12.9525 18.2621 12.858 18.0939 12.6898C17.9256 12.5215 17.8311 12.2933 17.8311 12.0554C17.8311 11.8174 17.9256 11.5892 18.0939 11.421C18.2621 11.2527 18.4903 11.1582 18.7283 11.1582Z",
      fill: "currentColor"
    })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {
      id: "clip0_82_2093"
    }, /*#__PURE__*/react.createElement("rect", {
      width: size,
      height: size,
      fill: "white"
    })))) : type == "twitter" && color !== "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M13.6051 10.4384L20.8645 2H19.1442L12.841 9.32691L7.80658 2H2L9.61299 13.0796L2 21.9285H3.72032L10.3767 14.191L15.6934 21.9285H21.5L13.6047 10.4384H13.6051ZM11.2489 13.1772L10.4776 12.0739L4.34018 3.29503H6.98249L11.9354 10.3799L12.7068 11.4832L19.145 20.6924H16.5027L11.2489 13.1776V13.1772Z",
      fill: "currentColor"
    })) : type == "home" && color !== "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M12.4772 1.17655C12.2026 0.941152 11.7974 0.941152 11.5228 1.17655L1 10.196V20.8C1 22.015 1.98497 23 3.2 23H9.06667C9.47168 23 9.8 22.6717 9.8 22.2667V17.8667C9.8 16.6516 10.785 15.6667 12 15.6667C13.215 15.6667 14.2 16.6516 14.2 17.8667V22.2667C14.2 22.6717 14.5283 23 14.9333 23H20.8C22.015 23 23 22.015 23 20.8V10.196L12.4772 1.17655Z",
      fill: "currentColor"
    })) : type == "inquiry" && color !== "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 3.70036C1 2.4836 1.98439 1.5 3.2 1.5H20.8C22.0156 1.5 23 2.4836 23 3.70036V16.8998C23 18.1166 22.0156 19.1002 20.8 19.1002H12.2443L6.57315 23.3534C6.35092 23.52 6.05366 23.5468 5.80527 23.4225C5.55689 23.2982 5.4 23.0441 5.4 22.7662V19.1002H3.2C1.98439 19.1002 1 18.1166 1 16.8998V3.70036ZM6.86667 7.3664H17.1333V8.83396H6.86667V7.3664ZM6.86667 11.7662H14.2V13.2338H6.86667V11.7662Z",
      fill: "currentColor"
    })) : type == "post" && color !== "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M20 21.5H19.75C18.65 21.5 17.75 20.6 17.75 19.5V2.5H2V19.5C2 20.6 2.9 21.5 4 21.5H20ZM20 21.5C21.1 21.5 22 20.6 22 19.5V7H17.75",
      stroke: "currentColor",
      strokeWidth: 2
    }), /*#__PURE__*/react.createElement("path", {
      d: "M13.88 7.08002H5.88",
      stroke: "currentColor",
      strokeWidth: 2
    }), /*#__PURE__*/react.createElement("path", {
      d: "M13.88 11.58H5.88",
      stroke: "currentColor",
      strokeWidth: 2
    })) : type == "youtube" && color == "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M22.584 7.65747C22.4813 6.8821 22.1859 6.14482 21.7248 5.51305C21.1529 4.9362 20.377 4.60772 19.5648 4.59866C16.542 4.38026 12.0048 4.38025 12.0048 4.38025H11.9952C11.9952 4.38025 7.46158 4.38026 4.43518 4.59866C3.62301 4.60785 2.84709 4.93631 2.27518 5.51305C1.81451 6.14494 1.51954 6.88221 1.41718 7.65747C1.28273 8.81797 1.21062 9.98484 1.20117 11.1531V12.7887C1.21061 13.9569 1.28273 15.1238 1.41718 16.2843C1.51924 17.0596 1.81424 17.7969 2.27518 18.4287C2.93275 19.0121 3.77818 19.3396 4.65718 19.3515C6.38518 19.5171 12.0012 19.5687 12.0012 19.5687C12.0012 19.5687 16.5396 19.5614 19.5612 19.343C20.3734 19.3341 21.1494 19.0056 21.7212 18.4287C22.1823 17.7969 22.4777 17.0596 22.5804 16.2843C22.7148 15.1238 22.7869 13.9569 22.7964 12.7887V11.1495C22.7879 9.98252 22.717 8.81685 22.584 7.65747ZM9.77038 14.7783V8.70864L15.6072 11.7543L9.77038 14.7783Z",
      fill: "#FF0000"
    })) : type == "instagram" && color == "color" ? /*#__PURE__*/react.createElement("svg", {
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M12.001 1.19989C9.06791 1.19989 8.69973 1.21274 7.54781 1.26512C6.39804 1.31783 5.6132 1.49981 4.92654 1.76689C4.21611 2.04272 3.61358 2.41176 3.01332 3.01224C2.41251 3.61261 2.04348 4.21514 1.76678 4.92524C1.49894 5.61212 1.31674 6.39728 1.26501 7.54651C1.2135 8.69854 1.2 9.06683 1.2 12C1.2 14.9332 1.21296 15.3002 1.26523 16.4521C1.31815 17.6018 1.50013 18.3867 1.767 19.0733C2.04304 19.7838 2.41208 20.3863 3.01256 20.9866C3.61272 21.5874 4.21525 21.9573 4.92513 22.2331C5.61234 22.5002 6.39728 22.6822 7.54683 22.7349C8.69887 22.7873 9.06672 22.8001 11.9997 22.8001C14.9331 22.8001 15.3 22.7873 16.452 22.7349C17.6017 22.6822 18.3874 22.5002 19.0746 22.2331C19.7847 21.9573 20.3864 21.5874 20.9865 20.9866C21.5873 20.3863 21.9562 19.7838 22.233 19.0737C22.4985 18.3867 22.6808 17.6016 22.7348 16.4523C22.7865 15.3004 22.8 14.9332 22.8 12C22.8 9.06683 22.7865 8.69876 22.7348 7.54673C22.6808 6.39696 22.4985 5.61223 22.233 4.92557C21.9562 4.21514 21.5873 3.61261 20.9865 3.01224C20.3858 2.41154 19.785 2.04251 19.074 1.767C18.3855 1.49981 17.6002 1.31772 16.4505 1.26512C15.2984 1.21274 14.9317 1.19989 11.9976 1.19989H12.001ZM11.0321 3.14616C11.3197 3.14573 11.6406 3.14616 12.001 3.14616C14.8847 3.14616 15.2264 3.15653 16.3651 3.20826C17.4181 3.25643 17.9897 3.43236 18.3704 3.58021C18.8744 3.77591 19.2337 4.00994 19.6115 4.38805C19.9895 4.76605 20.2234 5.12601 20.4197 5.63005C20.5675 6.01021 20.7437 6.58175 20.7916 7.63475C20.8434 8.77328 20.8546 9.11521 20.8546 11.9975C20.8546 14.8798 20.8434 15.2219 20.7916 16.3603C20.7435 17.4133 20.5675 17.9848 20.4197 18.3651C20.224 18.8691 19.9895 19.228 19.6115 19.6058C19.2335 19.9838 18.8746 20.2177 18.3704 20.4135C17.9901 20.562 17.4181 20.7375 16.3651 20.7857C15.2266 20.8374 14.8847 20.8487 12.001 20.8487C9.11715 20.8487 8.77533 20.8374 7.6369 20.7857C6.5839 20.7371 6.01237 20.5612 5.63134 20.4133C5.12742 20.2175 4.76734 19.9836 4.38934 19.6056C4.01134 19.2276 3.77742 18.8685 3.58118 18.3642C3.43333 17.984 3.25718 17.4124 3.20923 16.3594C3.1575 15.2209 3.14713 14.879 3.14713 11.9948C3.14713 9.11078 3.1575 8.77058 3.20923 7.63205C3.2574 6.57905 3.43333 6.00751 3.58118 5.62681C3.77698 5.12277 4.01135 4.76281 4.38945 4.38481C4.76745 4.00681 5.12742 3.77277 5.63145 3.57665C6.01215 3.42815 6.5839 3.25265 7.6369 3.20426C8.6332 3.15923 9.01931 3.14573 11.0321 3.14346V3.14616ZM17.766 4.93939C17.0505 4.93939 16.47 5.51935 16.47 6.23496C16.47 6.95046 17.0505 7.53096 17.766 7.53096C18.4815 7.53096 19.062 6.95046 19.062 6.23496C19.062 5.51946 18.4815 4.93896 17.766 4.93896V4.93939ZM12.001 6.45366C8.93809 6.45366 6.45474 8.93701 6.45474 12C6.45474 15.063 8.93809 17.5451 12.001 17.5451C15.064 17.5451 17.5464 15.063 17.5464 12C17.5464 8.93712 15.0637 6.45366 12.0008 6.45366H12.001ZM12.001 8.39993C13.9891 8.39993 15.601 10.0116 15.601 12C15.601 13.9882 13.9891 15.6001 12.001 15.6001C10.0127 15.6001 8.40101 13.9882 8.40101 12C8.40101 10.0116 10.0127 8.39993 12.001 8.39993Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M12.001 1.19989C9.06791 1.19989 8.69973 1.21274 7.54781 1.26512C6.39804 1.31783 5.6132 1.49981 4.92654 1.76689C4.21611 2.04272 3.61358 2.41176 3.01332 3.01224C2.41251 3.61261 2.04348 4.21514 1.76678 4.92524C1.49894 5.61212 1.31674 6.39728 1.26501 7.54651C1.2135 8.69854 1.2 9.06683 1.2 12C1.2 14.9332 1.21296 15.3002 1.26523 16.4521C1.31815 17.6018 1.50013 18.3867 1.767 19.0733C2.04304 19.7838 2.41208 20.3863 3.01256 20.9866C3.61272 21.5874 4.21525 21.9573 4.92513 22.2331C5.61234 22.5002 6.39728 22.6822 7.54683 22.7349C8.69887 22.7873 9.06672 22.8001 11.9997 22.8001C14.9331 22.8001 15.3 22.7873 16.452 22.7349C17.6017 22.6822 18.3874 22.5002 19.0746 22.2331C19.7847 21.9573 20.3864 21.5874 20.9865 20.9866C21.5873 20.3863 21.9562 19.7838 22.233 19.0737C22.4985 18.3867 22.6808 17.6016 22.7348 16.4523C22.7865 15.3004 22.8 14.9332 22.8 12C22.8 9.06683 22.7865 8.69876 22.7348 7.54673C22.6808 6.39696 22.4985 5.61223 22.233 4.92557C21.9562 4.21514 21.5873 3.61261 20.9865 3.01224C20.3858 2.41154 19.785 2.04251 19.074 1.767C18.3855 1.49981 17.6002 1.31772 16.4505 1.26512C15.2984 1.21274 14.9317 1.19989 11.9976 1.19989H12.001ZM11.0321 3.14616C11.3197 3.14573 11.6406 3.14616 12.001 3.14616C14.8847 3.14616 15.2264 3.15653 16.3651 3.20826C17.4181 3.25643 17.9897 3.43236 18.3704 3.58021C18.8744 3.77591 19.2337 4.00994 19.6115 4.38805C19.9895 4.76605 20.2234 5.12601 20.4197 5.63005C20.5675 6.01021 20.7437 6.58175 20.7916 7.63475C20.8434 8.77328 20.8546 9.11521 20.8546 11.9975C20.8546 14.8798 20.8434 15.2219 20.7916 16.3603C20.7435 17.4133 20.5675 17.9848 20.4197 18.3651C20.224 18.8691 19.9895 19.228 19.6115 19.6058C19.2335 19.9838 18.8746 20.2177 18.3704 20.4135C17.9901 20.562 17.4181 20.7375 16.3651 20.7857C15.2266 20.8374 14.8847 20.8487 12.001 20.8487C9.11715 20.8487 8.77533 20.8374 7.6369 20.7857C6.5839 20.7371 6.01237 20.5612 5.63134 20.4133C5.12742 20.2175 4.76734 19.9836 4.38934 19.6056C4.01134 19.2276 3.77742 18.8685 3.58118 18.3642C3.43333 17.984 3.25718 17.4124 3.20923 16.3594C3.1575 15.2209 3.14713 14.879 3.14713 11.9948C3.14713 9.11078 3.1575 8.77058 3.20923 7.63205C3.2574 6.57905 3.43333 6.00751 3.58118 5.62681C3.77698 5.12277 4.01135 4.76281 4.38945 4.38481C4.76745 4.00681 5.12742 3.77277 5.63145 3.57665C6.01215 3.42815 6.5839 3.25265 7.6369 3.20426C8.6332 3.15923 9.01931 3.14573 11.0321 3.14346V3.14616ZM17.766 4.93939C17.0505 4.93939 16.47 5.51935 16.47 6.23496C16.47 6.95046 17.0505 7.53096 17.766 7.53096C18.4815 7.53096 19.062 6.95046 19.062 6.23496C19.062 5.51946 18.4815 4.93896 17.766 4.93896V4.93939ZM12.001 6.45366C8.93809 6.45366 6.45474 8.93701 6.45474 12C6.45474 15.063 8.93809 17.5451 12.001 17.5451C15.064 17.5451 17.5464 15.063 17.5464 12C17.5464 8.93712 15.0637 6.45366 12.0008 6.45366H12.001ZM12.001 8.39993C13.9891 8.39993 15.601 10.0116 15.601 12C15.601 13.9882 13.9891 15.6001 12.001 15.6001C10.0127 15.6001 8.40101 13.9882 8.40101 12C8.40101 10.0116 10.0127 8.39993 12.001 8.39993Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M12.001 1.19989C9.06791 1.19989 8.69973 1.21274 7.54781 1.26512C6.39804 1.31783 5.6132 1.49981 4.92654 1.76689C4.21611 2.04272 3.61358 2.41176 3.01332 3.01224C2.41251 3.61261 2.04348 4.21514 1.76678 4.92524C1.49894 5.61212 1.31674 6.39728 1.26501 7.54651C1.2135 8.69854 1.2 9.06683 1.2 12C1.2 14.9332 1.21296 15.3002 1.26523 16.4521C1.31815 17.6018 1.50013 18.3867 1.767 19.0733C2.04304 19.7838 2.41208 20.3863 3.01256 20.9866C3.61272 21.5874 4.21525 21.9573 4.92513 22.2331C5.61234 22.5002 6.39728 22.6822 7.54683 22.7349C8.69887 22.7873 9.06672 22.8001 11.9997 22.8001C14.9331 22.8001 15.3 22.7873 16.452 22.7349C17.6017 22.6822 18.3874 22.5002 19.0746 22.2331C19.7847 21.9573 20.3864 21.5874 20.9865 20.9866C21.5873 20.3863 21.9562 19.7838 22.233 19.0737C22.4985 18.3867 22.6808 17.6016 22.7348 16.4523C22.7865 15.3004 22.8 14.9332 22.8 12C22.8 9.06683 22.7865 8.69876 22.7348 7.54673C22.6808 6.39696 22.4985 5.61223 22.233 4.92557C21.9562 4.21514 21.5873 3.61261 20.9865 3.01224C20.3858 2.41154 19.785 2.04251 19.074 1.767C18.3855 1.49981 17.6002 1.31772 16.4505 1.26512C15.2984 1.21274 14.9317 1.19989 11.9976 1.19989H12.001ZM11.0321 3.14616C11.3197 3.14573 11.6406 3.14616 12.001 3.14616C14.8847 3.14616 15.2264 3.15653 16.3651 3.20826C17.4181 3.25643 17.9897 3.43236 18.3704 3.58021C18.8744 3.77591 19.2337 4.00994 19.6115 4.38805C19.9895 4.76605 20.2234 5.12601 20.4197 5.63005C20.5675 6.01021 20.7437 6.58175 20.7916 7.63475C20.8434 8.77328 20.8546 9.11521 20.8546 11.9975C20.8546 14.8798 20.8434 15.2219 20.7916 16.3603C20.7435 17.4133 20.5675 17.9848 20.4197 18.3651C20.224 18.8691 19.9895 19.228 19.6115 19.6058C19.2335 19.9838 18.8746 20.2177 18.3704 20.4135C17.9901 20.562 17.4181 20.7375 16.3651 20.7857C15.2266 20.8374 14.8847 20.8487 12.001 20.8487C9.11715 20.8487 8.77533 20.8374 7.6369 20.7857C6.5839 20.7371 6.01237 20.5612 5.63134 20.4133C5.12742 20.2175 4.76734 19.9836 4.38934 19.6056C4.01134 19.2276 3.77742 18.8685 3.58118 18.3642C3.43333 17.984 3.25718 17.4124 3.20923 16.3594C3.1575 15.2209 3.14713 14.879 3.14713 11.9948C3.14713 9.11078 3.1575 8.77058 3.20923 7.63205C3.2574 6.57905 3.43333 6.00751 3.58118 5.62681C3.77698 5.12277 4.01135 4.76281 4.38945 4.38481C4.76745 4.00681 5.12742 3.77277 5.63145 3.57665C6.01215 3.42815 6.5839 3.25265 7.6369 3.20426C8.6332 3.15923 9.01931 3.14573 11.0321 3.14346V3.14616ZM17.766 4.93939C17.0505 4.93939 16.47 5.51935 16.47 6.23496C16.47 6.95046 17.0505 7.53096 17.766 7.53096C18.4815 7.53096 19.062 6.95046 19.062 6.23496C19.062 5.51946 18.4815 4.93896 17.766 4.93896V4.93939ZM12.001 6.45366C8.93809 6.45366 6.45474 8.93701 6.45474 12C6.45474 15.063 8.93809 17.5451 12.001 17.5451C15.064 17.5451 17.5464 15.063 17.5464 12C17.5464 8.93712 15.0637 6.45366 12.0008 6.45366H12.001ZM12.001 8.39993C13.9891 8.39993 15.601 10.0116 15.601 12C15.601 13.9882 13.9891 15.6001 12.001 15.6001C10.0127 15.6001 8.40101 13.9882 8.40101 12C8.40101 10.0116 10.0127 8.39993 12.001 8.39993Z",
      fill: "url(#paint0_radial_82_1802)"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M12.001 1.19989C9.06791 1.19989 8.69973 1.21274 7.54781 1.26512C6.39804 1.31783 5.6132 1.49981 4.92654 1.76689C4.21611 2.04272 3.61358 2.41176 3.01332 3.01224C2.41251 3.61261 2.04348 4.21514 1.76678 4.92524C1.49894 5.61212 1.31674 6.39728 1.26501 7.54651C1.2135 8.69854 1.2 9.06683 1.2 12C1.2 14.9332 1.21296 15.3002 1.26523 16.4521C1.31815 17.6018 1.50013 18.3867 1.767 19.0733C2.04304 19.7838 2.41208 20.3863 3.01256 20.9866C3.61272 21.5874 4.21525 21.9573 4.92513 22.2331C5.61234 22.5002 6.39728 22.6822 7.54683 22.7349C8.69887 22.7873 9.06672 22.8001 11.9997 22.8001C14.9331 22.8001 15.3 22.7873 16.452 22.7349C17.6017 22.6822 18.3874 22.5002 19.0746 22.2331C19.7847 21.9573 20.3864 21.5874 20.9865 20.9866C21.5873 20.3863 21.9562 19.7838 22.233 19.0737C22.4985 18.3867 22.6808 17.6016 22.7348 16.4523C22.7865 15.3004 22.8 14.9332 22.8 12C22.8 9.06683 22.7865 8.69876 22.7348 7.54673C22.6808 6.39696 22.4985 5.61223 22.233 4.92557C21.9562 4.21514 21.5873 3.61261 20.9865 3.01224C20.3858 2.41154 19.785 2.04251 19.074 1.767C18.3855 1.49981 17.6002 1.31772 16.4505 1.26512C15.2984 1.21274 14.9317 1.19989 11.9976 1.19989H12.001ZM11.0321 3.14616C11.3197 3.14573 11.6406 3.14616 12.001 3.14616C14.8847 3.14616 15.2264 3.15653 16.3651 3.20826C17.4181 3.25643 17.9897 3.43236 18.3704 3.58021C18.8744 3.77591 19.2337 4.00994 19.6115 4.38805C19.9895 4.76605 20.2234 5.12601 20.4197 5.63005C20.5675 6.01021 20.7437 6.58175 20.7916 7.63475C20.8434 8.77328 20.8546 9.11521 20.8546 11.9975C20.8546 14.8798 20.8434 15.2219 20.7916 16.3603C20.7435 17.4133 20.5675 17.9848 20.4197 18.3651C20.224 18.8691 19.9895 19.228 19.6115 19.6058C19.2335 19.9838 18.8746 20.2177 18.3704 20.4135C17.9901 20.562 17.4181 20.7375 16.3651 20.7857C15.2266 20.8374 14.8847 20.8487 12.001 20.8487C9.11715 20.8487 8.77533 20.8374 7.6369 20.7857C6.5839 20.7371 6.01237 20.5612 5.63134 20.4133C5.12742 20.2175 4.76734 19.9836 4.38934 19.6056C4.01134 19.2276 3.77742 18.8685 3.58118 18.3642C3.43333 17.984 3.25718 17.4124 3.20923 16.3594C3.1575 15.2209 3.14713 14.879 3.14713 11.9948C3.14713 9.11078 3.1575 8.77058 3.20923 7.63205C3.2574 6.57905 3.43333 6.00751 3.58118 5.62681C3.77698 5.12277 4.01135 4.76281 4.38945 4.38481C4.76745 4.00681 5.12742 3.77277 5.63145 3.57665C6.01215 3.42815 6.5839 3.25265 7.6369 3.20426C8.6332 3.15923 9.01931 3.14573 11.0321 3.14346V3.14616ZM17.766 4.93939C17.0505 4.93939 16.47 5.51935 16.47 6.23496C16.47 6.95046 17.0505 7.53096 17.766 7.53096C18.4815 7.53096 19.062 6.95046 19.062 6.23496C19.062 5.51946 18.4815 4.93896 17.766 4.93896V4.93939ZM12.001 6.45366C8.93809 6.45366 6.45474 8.93701 6.45474 12C6.45474 15.063 8.93809 17.5451 12.001 17.5451C15.064 17.5451 17.5464 15.063 17.5464 12C17.5464 8.93712 15.0637 6.45366 12.0008 6.45366H12.001ZM12.001 8.39993C13.9891 8.39993 15.601 10.0116 15.601 12C15.601 13.9882 13.9891 15.6001 12.001 15.6001C10.0127 15.6001 8.40101 13.9882 8.40101 12C8.40101 10.0116 10.0127 8.39993 12.001 8.39993Z",
      fill: "url(#paint1_radial_82_1802)"
    }), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("radialGradient", {
      id: "paint0_radial_82_1802",
      cx: "0",
      cy: "0",
      r: "1",
      gradientUnits: "userSpaceOnUse",
      gradientTransform: "translate(6.9375 24.4637) rotate(-90) scale(21.4074 19.9104)"
    }, /*#__PURE__*/react.createElement("stop", {
      stopColor: "#FFDD55"
    }), /*#__PURE__*/react.createElement("stop", {
      offset: "0.1",
      stopColor: "#FFDD55"
    }), /*#__PURE__*/react.createElement("stop", {
      offset: "0.5",
      stopColor: "#FF543E"
    }), /*#__PURE__*/react.createElement("stop", {
      offset: "1",
      stopColor: "#C837AB"
    })), /*#__PURE__*/react.createElement("radialGradient", {
      id: "paint1_radial_82_1802",
      cx: "0",
      cy: "0",
      r: "1",
      gradientUnits: "userSpaceOnUse",
      gradientTransform: "translate(-2.41809 2.75586) rotate(78.6811) scale(9.56923 39.4443)"
    }, /*#__PURE__*/react.createElement("stop", {
      stopColor: "#3771C8"
    }), /*#__PURE__*/react.createElement("stop", {
      offset: "0.128",
      stopColor: "#3771C8"
    }), /*#__PURE__*/react.createElement("stop", {
      offset: "1",
      stopColor: "#6600FF",
      stopOpacity: "0"
    })))) : type == "facebook" && color == "color" ? /*#__PURE__*/react.createElement("svg", {
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("g", {
      clipPath: "url(#clip0_82_2094)"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M22.8 12.0012C22.8 6.03471 17.9651 1.19977 12.0014 1.19977C6.03775 1.19977 1.2 6.03471 1.2 12.0012C1.2 17.9676 6.03494 22.8026 12.0014 22.8026C12.2457 22.8026 12.4843 22.7913 12.723 22.7745H11.9284V15.2273H9.38739V12.2848H11.9284V10.1144C11.9284 7.59582 13.467 6.22564 15.7104 6.22564C16.7858 6.22564 17.7096 6.30706 17.9791 6.34075V8.97161H16.4208C15.1994 8.97161 14.9636 9.55282 14.9636 10.4036V12.2819H17.8752L17.4962 15.2245H14.9636V22.3842C19.4869 21.0955 22.7972 16.9344 22.7972 11.9984L22.8 12.0012Z",
      fill: "#1877F2"
    })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {
      id: "clip0_82_2094"
    }, /*#__PURE__*/react.createElement("rect", {
      width: "21.6",
      height: "21.6",
      fill: "white",
      transform: "translate(1.2 1.19977)"
    })))) : type == "blog" && color == "color" ? /*#__PURE__*/react.createElement("svg", {
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("g", {
      clipPath: "url(#clip0_82_1804)"
    }, /*#__PURE__*/react.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M19.7987 3.59998C20.7555 3.60179 21.6723 3.98351 22.3477 4.66119C23.023 5.33888 23.4015 6.25704 23.4 7.21377V15.7866C23.4 17.7816 21.7869 19.4004 19.7987 19.4004H14.4259L12.5928 22.3872C12.5928 22.3872 12.5768 22.4214 12.5301 22.4761C12.4752 22.5683 12.3972 22.6445 12.3038 22.6974C12.2104 22.7502 12.1049 22.7777 11.9976 22.7773C11.8903 22.7768 11.785 22.7484 11.692 22.6947C11.5991 22.6411 11.5217 22.5642 11.4676 22.4715C11.4453 22.445 11.4251 22.4168 11.4072 22.3872L9.57409 19.4004H4.20127C3.7275 19.3996 3.25852 19.3055 2.82112 19.1235C2.38371 18.9415 1.98645 18.6751 1.65203 18.3395C1.31761 18.0039 1.05257 17.6057 0.872066 17.1677C0.691558 16.7296 0.599114 16.2603 0.600013 15.7866V7.21377C0.600013 5.21878 2.21197 3.59998 4.20127 3.59998H19.7987ZM18.3908 9.89961H18.3281C17.9907 9.90873 16.4164 10.0547 16.4164 12.0394V12.0713C16.4232 12.3335 16.5383 14.1096 18.3361 14.1096H18.376C18.5413 14.1074 19.1854 14.0663 19.5616 13.5773V13.9033C19.5616 13.9033 19.6608 14.9236 18.6724 14.9236H18.3361V16.1605H18.9084C19.1592 16.1514 20.9182 16.0237 20.9182 13.9797V10.041H19.5616V10.4309L19.5548 10.4217C19.4097 10.2562 19.2306 10.1239 19.0297 10.0338C18.8289 9.94368 18.611 9.89792 18.3908 9.89961ZM4.47715 8.21811H3.08065V14.0333H4.49197V13.5773C4.54099 13.6605 4.88413 14.178 5.66389 14.178C5.66389 14.178 7.63039 14.1062 7.63039 12.0086C7.63039 12.0086 7.55857 9.88137 5.66389 9.88137C5.66389 9.88137 5.04145 9.88137 4.47715 10.4309V8.21811ZM13.3509 9.89961H13.3167C13.034 9.91101 11.0447 10.0535 11.0447 12.0542V12.1169C11.0561 12.4703 11.2168 14.178 13.3509 14.178H13.3851C13.6769 14.1666 15.7107 14.0241 15.7107 12.0542V12.0246C15.7107 11.7749 15.6252 9.89961 13.3509 9.89961ZM8.07955 8.08701V9.43221L8.10121 9.43335C8.21293 9.44133 8.71681 9.53595 8.71681 10.5905V14.0333H10.062L10.0609 10.2029C10.0495 9.82893 9.90127 8.08701 8.07955 8.08701ZM5.35609 11.1582C5.59404 11.1582 5.82224 11.2527 5.99049 11.421C6.15875 11.5892 6.25327 11.8174 6.25327 12.0554C6.25327 12.2933 6.15875 12.5215 5.99049 12.6898C5.82224 12.858 5.59404 12.9525 5.35609 12.9525C5.11814 12.9525 4.88994 12.858 4.72169 12.6898C4.55343 12.5215 4.45891 12.2933 4.45891 12.0554C4.45891 11.8174 4.55343 11.5892 4.72169 11.421C4.88994 11.2527 5.11814 11.1582 5.35609 11.1582ZM13.352 11.1582C13.59 11.1582 13.8182 11.2527 13.9864 11.421C14.1547 11.5892 14.2492 11.8174 14.2492 12.0554C14.2492 12.2933 14.1547 12.5215 13.9864 12.6898C13.8182 12.858 13.59 12.9525 13.352 12.9525C13.1141 12.9525 12.8859 12.858 12.7176 12.6898C12.5494 12.5215 12.4549 12.2933 12.4549 12.0554C12.4549 11.8174 12.5494 11.5892 12.7176 11.421C12.8859 11.2527 13.1141 11.1582 13.352 11.1582ZM18.7283 11.1582C18.9662 11.1582 19.1944 11.2527 19.3627 11.421C19.5309 11.5892 19.6255 11.8174 19.6255 12.0554C19.6255 12.2933 19.5309 12.5215 19.3627 12.6898C19.1944 12.858 18.9662 12.9525 18.7283 12.9525C18.4903 12.9525 18.2621 12.858 18.0939 12.6898C17.9256 12.5215 17.8311 12.2933 17.8311 12.0554C17.8311 11.8174 17.9256 11.5892 18.0939 11.421C18.2621 11.2527 18.4903 11.1582 18.7283 11.1582Z",
      fill: "#03C75A"
    })), /*#__PURE__*/react.createElement("defs", null, /*#__PURE__*/react.createElement("clipPath", {
      id: "clip0_82_1804"
    }, /*#__PURE__*/react.createElement("rect", {
      width: size,
      height: size,
      fill: "white"
    })))) : type == "twitter" && color == "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M13.6051 10.4384L20.8645 2H19.1442L12.841 9.32691L7.80658 2H2L9.61299 13.0796L2 21.9285H3.72032L10.3767 14.191L15.6934 21.9285H21.5L13.6047 10.4384H13.6051ZM11.2489 13.1772L10.4776 12.0739L4.34018 3.29503H6.98249L11.9354 10.3799L12.7068 11.4832L19.145 20.6924H16.5027L11.2489 13.1776V13.1772Z",
      fill: "#999999"
    })) : type == "home" && color == "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M12.4772 1.17655C12.2026 0.941152 11.7974 0.941152 11.5228 1.17655L1 10.196V20.8C1 22.015 1.98497 23 3.2 23H9.06667C9.47168 23 9.8 22.6717 9.8 22.2667V17.8667C9.8 16.6516 10.785 15.6667 12 15.6667C13.215 15.6667 14.2 16.6516 14.2 17.8667V22.2667C14.2 22.6717 14.5283 23 14.9333 23H20.8C22.015 23 23 22.015 23 20.8V10.196L12.4772 1.17655Z",
      fill: "black"
    })) : type == "inquiry" && color == "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 3.70036C1 2.4836 1.98439 1.5 3.2 1.5H20.8C22.0156 1.5 23 2.4836 23 3.70036V16.8998C23 18.1166 22.0156 19.1002 20.8 19.1002H12.2443L6.57315 23.3534C6.35092 23.52 6.05366 23.5468 5.80527 23.4225C5.55689 23.2982 5.4 23.0441 5.4 22.7662V19.1002H3.2C1.98439 19.1002 1 18.1166 1 16.8998V3.70036ZM6.86667 7.3664H17.1333V8.83396H6.86667V7.3664ZM6.86667 11.7662H14.2V13.2338H6.86667V11.7662Z",
      fill: "black"
    })) : type == "post" && color == "color" ? /*#__PURE__*/react.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 24 24",
      fill: "none"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M20 21.5H19.75C18.65 21.5 17.75 20.6 17.75 19.5V2.5H2V19.5C2 20.6 2.9 21.5 4 21.5H20ZM20 21.5C21.1 21.5 22 20.6 22 19.5V7H17.75",
      stroke: "currentColor",
      strokeWidth: 1
    }), /*#__PURE__*/react.createElement("path", {
      d: "M13.88 7.08002H5.88",
      stroke: "currentColor",
      strokeWidth: color
    }), /*#__PURE__*/react.createElement("path", {
      d: "M13.88 11.58H5.88",
      stroke: "currentColor",
      strokeWidth: color
    })) : null);
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Footer.jsx
  
  
  
  
  
  
  function Footer() {
    var device = hooks_useDeviceType();
    var isWeb = device == "web" || device == "labtop";
    (0,react.useEffect)(function () {}, []);
    return /*#__PURE__*/react.createElement("div", {
      className: "footer-container"
    }, /*#__PURE__*/react.createElement("div", {
      className: "footer-wrap container gutter-xl"
    }, /*#__PURE__*/react.createElement("div", {
      className: "sitemap"
    }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("h4", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_company');
      },
      href: "/company/introduce.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uADF8\uB8F9\uC18C\uAC1C"))), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_introduce');
      },
      href: "/company/introduce.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uAE30\uC5C5\uC18C\uAC1C"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_greeting');
      },
      href: "/company/greeting.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uC778\uC0AC\uB9D0"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_history');
      },
      href: "/company/history.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uC5F0\uD601"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_brand');
      },
      href: "/company/brand.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uBE0C\uB79C\uB4DC \uC2A4\uD1A0\uB9AC"))))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("h4", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_business');
      },
      "group-idx": 0,
      className: "group",
      href: "/business/group.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uC0AC\uC5C5\uBD84\uC57C"))), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_group');
      },
      "group-idx": 0,
      className: "group",
      href: "/business/group.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uADF8\uB8F9\uC0AC \uD604\uD669"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_manufacture');
      },
      "group-idx": 1,
      className: "group",
      href: "/business/group.do?idx=0"
    }, /*#__PURE__*/react.createElement("span", null, "\uC6B0\uC8FC\uD56D\uACF5\u2219\uBC29\uC0B0\u2219\uAE30\uACC4"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_energy');
      },
      "group-idx": 2,
      className: "group",
      href: "/business/group.do?idx=1"
    }, /*#__PURE__*/react.createElement("span", null, "\uC5D0\uB108\uC9C0\u2219\uC624\uC158"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_finance');
      },
      "group-idx": 3,
      className: "group",
      href: "/business/group.do?idx=2"
    }, /*#__PURE__*/react.createElement("span", null, "\uAE08\uC735"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_service');
      },
      "group-idx": 4,
      className: "group",
      href: "/business/group.do?idx=3"
    }, /*#__PURE__*/react.createElement("span", null, "\uC720\uD1B5\u2219\uC11C\uBE44\uC2A4"))))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("h4", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_newsroom');
      },
      href: "/newsroom/index.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uB274\uC2A4\uB8F8"))), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_newsroom');
      },
      href: "/newsroom/index.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uB274\uC2A4\uB8F8 \uBA54\uC778"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_mediacenter');
      },
      href: "/newsroom/media_center/news/news_list.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uBBF8\uB514\uC5B4\uC13C\uD130"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_hanwhajournal');
      },
      href: "/newsroom/discover/list.do"
    }, /*#__PURE__*/react.createElement("span", null, /*#__PURE__*/react.createElement("i", {
      className: "font-hanwha"
    }, "\uD55C\uD654"), "\uC800\uB110"))))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("h4", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_sustainability');
      },
      href: "/sustainability/philosophy.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uC9C0\uC18D\uAC00\uB2A5\uACBD\uC601"))), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_overview');
      },
      href: "/sustainability/philosophy.do"
    }, /*#__PURE__*/react.createElement("span", null, "Overview"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_environment');
      },
      href: "/sustainability/environment.do"
    }, /*#__PURE__*/react.createElement("span", null, "Environment"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_social');
      },
      href: "/sustainability/social/winning_partnership.do"
    }, /*#__PURE__*/react.createElement("span", null, "Social"))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_governance');
      },
      href: "/sustainability/governance.do"
    }, /*#__PURE__*/react.createElement("span", null, "Governance"))))), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("h4", {
      className: "outlink"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_goto_recruit');
      },
      href: "https://www.hanwhain.com",
      target: "_blank"
    }, /*#__PURE__*/react.createElement("span", null, "\uC778\uC7AC\uCC44\uC6A9 ", /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "arrow_top-right_l"
    })))))), /*#__PURE__*/react.createElement(TopBtn, null)), /*#__PURE__*/react.createElement("div", {
      className: "link"
    }, /*#__PURE__*/react.createElement("div", {
      className: "link-top"
    }, /*#__PURE__*/react.createElement("ul", {
      className: "link-list inner"
    }, /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_privacy');
      },
      href: "/utility/privacy.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uAC1C\uC778\uC815\uBCF4\uCC98\uB9AC\uBC29\uCE68"))), /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_sitemap');
      },
      href: "/utility/sitemap.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uC0AC\uC774\uD2B8\uB9F5"))), /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_map');
      },
      href: "/customer/map.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uCC3E\uC544\uC624\uC2DC\uB294 \uAE38"))), /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_inquiry');
      },
      href: "/customer/inquiry/certification.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uBB38\uC758\uD558\uAE30"))), /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_notice');
      },
      href: "/notice/list.do"
    }, /*#__PURE__*/react.createElement("span", null, "\uACF5\uC9C0\uC0AC\uD56D")))), !isWeb && /*#__PURE__*/react.createElement(TopBtn, null)), /*#__PURE__*/react.createElement("ul", {
      className: "link-list sns"
    }, /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_goto_youtube');
      },
      href: "https://www.youtube.com/user/hanwhadays",
      target: "_blank",
      "aria-label": "\uD55C\uD654\uADF8\uB8F9 \uC720\uD29C\uBE0C \uBC14\uB85C\uAC00\uAE30"
    }, /*#__PURE__*/react.createElement(SocialIcon, {
      type: "youtube"
    }), /*#__PURE__*/react.createElement(SocialIcon, {
      type: "youtube",
      color: "color"
    }))), /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_goto_instagram');
      },
      href: "https://www.instagram.com/hanwhadays/",
      target: "_blank",
      "aria-label": "\uD55C\uD654\uADF8\uB8F9 \uC778\uC2A4\uD0C0 \uBC14\uB85C\uAC00\uAE30"
    }, /*#__PURE__*/react.createElement(SocialIcon, {
      type: "instagram"
    }), /*#__PURE__*/react.createElement(SocialIcon, {
      type: "instagram",
      color: "color"
    }))), /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_goto_facebook');
      },
      href: "https://www.facebook.com/hanwhadays",
      target: "_blank",
      "aria-label": "\uD55C\uD654\uADF8\uB8F9 \uD398\uC774\uC2A4\uBD81 \uBC14\uB85C\uAC00\uAE30"
    }, /*#__PURE__*/react.createElement(SocialIcon, {
      type: "facebook"
    }), /*#__PURE__*/react.createElement(SocialIcon, {
      type: "facebook",
      color: "color"
    }))), /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_goto_x');
      },
      href: "https://twitter.com/hanwha_official",
      target: "_blank",
      "aria-label": "\uD55C\uD654\uADF8\uB8F9 \uC5D1\uC2A4 \uBC14\uB85C\uAC00\uAE30"
    }, /*#__PURE__*/react.createElement(SocialIcon, {
      type: "twitter"
    }), /*#__PURE__*/react.createElement(SocialIcon, {
      type: "twitter",
      color: "color"
    }))), /*#__PURE__*/react.createElement("li", {
      className: "link-item"
    }, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging('footer_goto_blog');
      },
      href: "https://blog.naver.com/hanwhadays",
      target: "_blank",
      "aria-label": "\uD55C\uD654\uADF8\uB8F9 \uBE14\uB85C\uADF8 \uBC14\uB85C\uAC00\uAE30"
    }, /*#__PURE__*/react.createElement(SocialIcon, {
      type: "blog"
    }), /*#__PURE__*/react.createElement(SocialIcon, {
      type: "blog",
      color: "color"
    }))))), /*#__PURE__*/react.createElement("div", {
      className: "copyright"
    }, /*#__PURE__*/react.createElement("a", {
      href: "/"
    }, /*#__PURE__*/react.createElement("img", {
      src: "/assets/img/icon/common/footer-logo.svg",
      alt: "logo"
    })), /*#__PURE__*/react.createElement("p", null, "Copyright Hanwha Group. All rights reserved."))));
  }
  function TopBtn() {
    var device = hooks_useDeviceType();
    var isWeb = device == "web" || device == "labtop";
    return /*#__PURE__*/react.createElement("div", {
      className: "btn-top"
    }, /*#__PURE__*/react.createElement(Button, {
      tag: "",
      cate: "btn-1",
      size: "md",
      type: "outline-hug",
      theme: "light",
      callback: function callback() {
        window.scrollTo(0, 0);
      }
    }, isWeb ? 'TOP' : '', /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "arrow",
      direction: "down"
    })));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/isLiverServerHub.jsx
  // [HUB-GROUP]
  function isLiverServerHub() {
    var isLiverServerHub = window.location.host == 'www.hanwhahub.com' ? true : false;
    var host = isLiverServerHub ? 'https://www.hanwha.co.kr/' : '/';
    return host;
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/HubGnb.jsx
  
  
  
  
  
  
  function HubGnb(_ref) {
    var _ref$hideMobileGnb = _ref.hideMobileGnb,
      hideMobileGnb = _ref$hideMobileGnb === void 0 ? null : _ref$hideMobileGnb,
      _ref$isMobile = _ref.isMobile,
      isMobile = _ref$isMobile === void 0 ? true : _ref$isMobile;
    var device = hooks_useDeviceType();
    var isWeb = device == "web" || device == "labtop";
    var needPrevent = !isWeb ? {
      'data-lenis-prevent': ''
    } : '';
    var isKo = document.documentElement.lang == 'ko';
    return /*#__PURE__*/react.createElement("div", _extends({
      className: "gnb hub"
    }, needPrevent), /*#__PURE__*/react.createElement("ul", {
      className: "gnb-list"
    }, /*#__PURE__*/react.createElement("li", {
      className: "gnb-item"
    }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", {
      "data-index": "space"
    }, /*#__PURE__*/react.createElement("button", {
      onClick: function onClick(e) {
        dispatchEvent(new Event('HUB_GO_SPACE'));
        if (hideMobileGnb) hideMobileGnb();
      },
      type: "button"
    }, /*#__PURE__*/react.createElement("span", null, "SPACE"), isMobile && /*#__PURE__*/react.createElement(ArrowIcon, {
      size: "28",
      type: "chevron-l"
    }))), /*#__PURE__*/react.createElement("li", {
      "data-index": "ocean"
    }, /*#__PURE__*/react.createElement("button", {
      onClick: function onClick(e) {
        dispatchEvent(new Event('HUB_GO_OCEAN'));
        if (hideMobileGnb) hideMobileGnb();
      },
      type: "button"
    }, /*#__PURE__*/react.createElement("span", null, "OCEAN"), isMobile && /*#__PURE__*/react.createElement(ArrowIcon, {
      size: "28",
      type: "chevron-l"
    }))), /*#__PURE__*/react.createElement("li", {
      "data-index": "land"
    }, /*#__PURE__*/react.createElement("button", {
      onClick: function onClick(e) {
        dispatchEvent(new Event('HUB_GO_LAND'));
        if (hideMobileGnb) hideMobileGnb();
      },
      type: "button"
    }, /*#__PURE__*/react.createElement("span", null, "LAND"), isMobile && /*#__PURE__*/react.createElement(ArrowIcon, {
      size: "28",
      type: "chevron-l"
    })))), isWeb && /*#__PURE__*/react.createElement("div", {
      className: "progress"
    }, /*#__PURE__*/react.createElement("div", {
      className: "current"
    }))), isMobile && /*#__PURE__*/react.createElement("li", {
      className: "link",
      onClick: function onClick() {
        return setTagging('hanwhahub_goto_hanwha');
      }
    }, /*#__PURE__*/react.createElement(Button, {
      tag: "a",
      target: "_blank",
      href: "".concat(isLiverServerHub()),
      cate: "btn-1",
      size: "sm",
      type: "outline-hug",
      theme: 'light',
      font: "off"
    }, isKo ? '<i class="font-hanwha">한화그룹</i> 홈페이지' : '<i class="font-hanwha">Hanwha Group</i>'))));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/HubHeader.jsx
  
  
  
  
  
  
  
  
  
  
  
  
  
  function HubHeaderComp(_ref) {
    var theme = _ref.theme;
    var header = document.getElementById('header');
    var _useState = (0,react.useState)(theme),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      headerTheme = _useState2[0],
      setHeaderTheme = _useState2[1];
    var _useState3 = (0,react.useState)(''),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      headerSrhText = _useState4[0],
      setHeaderSrhText = _useState4[1];
    var deviceType = hooks_useDeviceType();
    var isWeb = deviceType == 'web' || deviceType == 'labtop';
    var isMobile = deviceType == 'mobile';
    var isKo = document.documentElement.lang == 'ko';
    (0,react.useEffect)(function () {
      setScroll();
    }, []);
    function setLangPos() {
      var langBtnPos = document.querySelector('.util-item.lang');
      var langBtnList = document.querySelector('.lang-container');
      var w = langBtnPos.clientWidth;
      var pos = langBtnPos.getBoundingClientRect();
      langBtnList.style.top = pos.bottom + 12 + 'px';
      langBtnList.style.left = pos.left + 'px';
      // langBtnList.style.left = pos.left + langBtnPos.querySelector('span').offsetWidth / 2 + 'px'
    }
    function setLangSize() {
      var lang = document.querySelector('.lang-container .lang');
      var height = lang.querySelector('ul').clientHeight;
      lang.dataset.height = height + 2;
    }
    function toggleLangContainer(speed) {
      var header = document.getElementById('header');
      var langContainer = header.querySelector('.lang-container');
      var lang = langContainer.querySelector('.lang');
      var isOpen = lang.classList.contains('open');
      var duration = speed >= 0 ? speed : .5;
      setLangSize();
      all_gsapWithCSS.killTweensOf(lang);
      if (!isOpen) header.classList.add('is-lang');
      lang.classList.toggle('open', !isOpen);
      all_gsapWithCSS.to(lang, {
        height: isOpen ? 0 : lang.dataset.height,
        duration: duration,
        onComplete: function onComplete() {
          if (isOpen) header.classList.remove('is-lang');
        }
      });
    }
    function setScroll() {
      var currentPage = document.querySelector('[data-current-page]');
      window.headerToggleSt = ScrollTrigger_ScrollTrigger.create({
        trigger: currentPage,
        start: 'top top',
        end: 'bottom top'
      });
      // setTimeout(() => {
      //   window.headerToggleSt.refresh()
      // }, 1500);
    }
    window.requestAnimationFrame(function () {
      return headerHandler(self);
    });
    function headerHandler(self) {
      var upState = self.progress > 0.01 && self.direction != 1;
      header.classList.toggle('top', self.progress <= 0.01);
      header.classList.toggle('up', upState);
      header.classList.toggle('hide', self.direction === 1);
      document.body.classList.toggle('up', upState);
      if (document.querySelector('#header .lang-container .lang').classList.contains('open')) toggleLangContainer(0);
    }
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
      className: "header-container"
    }, /*#__PURE__*/react.createElement("div", {
      className: "header-wrap container gutter-xl"
    }, /*#__PURE__*/react.createElement("div", {
      className: "logo"
    }, /*#__PURE__*/react.createElement("a", {
      href: "#",
      onClick: function onClick() {
        setTagging("hanwhahub_ci".concat(isKo ? '_kor' : '_eng'));
        window.location.reload();
      }
    }, /*#__PURE__*/react.createElement("svg", {
      width: "133",
      height: "36",
      viewBox: "0 0 133 36",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M122.042 20.7016C122.042 21.5036 122.191 22.1005 122.489 22.5109C122.862 22.9958 123.441 23.2383 124.224 23.2383H126.854C127.637 23.2383 128.216 22.9958 128.607 22.5109C128.906 22.1005 129.055 21.5036 129.055 20.7016V18.9482C129.055 18.1462 128.906 17.5307 128.607 17.1203C128.216 16.6353 127.637 16.3742 126.854 16.3742H122.042V20.7016ZM119.803 20.8135V10.8531H122.042V14.4344H127.022C128.328 14.4717 129.372 14.8634 130.137 15.6095C130.902 16.3556 131.293 17.4374 131.293 18.8363V20.8135C131.293 22.2124 130.902 23.2756 130.137 24.0217C129.372 24.7865 128.328 25.1782 127.003 25.1782H124.075C122.732 25.1782 121.687 24.7865 120.941 24.0217C120.177 23.2756 119.803 22.2124 119.803 20.8135Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M111.352 25.1782C109.972 25.1782 108.871 24.7865 108.088 23.9658C107.286 23.1824 106.894 22.0632 106.894 20.627V14.4344H109.132V20.4964C109.132 21.3917 109.282 22.0446 109.617 22.4549C110.065 22.9772 110.681 23.2383 111.483 23.2383H113.385C114.206 23.2383 114.821 22.9772 115.269 22.4549C115.605 22.0446 115.791 21.3917 115.791 20.4964V14.4344H118.03V20.627C118.03 22.0632 117.619 23.1824 116.836 23.9658C116.034 24.7865 114.933 25.1782 113.553 25.1782H111.352Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M104.981 10.8904V25.1782H102.743V17.6426H94.2744V25.1782H92.0361V10.8904H94.2744V15.6841H102.743V10.8904H104.981Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M80.8677 20.0114H77.3237C76.1673 20.0114 75.6077 20.4964 75.6077 21.4663V21.8207C75.6077 22.7906 76.1673 23.257 77.3237 23.257H80.8677C82.0241 23.257 82.621 22.7906 82.621 21.8207V21.4663C82.621 20.4964 82.0241 20.0114 80.8677 20.0114ZM76.7828 25.1782C75.7382 25.1782 74.8989 24.8984 74.302 24.3015C73.6678 23.7233 73.3694 22.9772 73.3694 22.0446V21.2798C73.3694 20.3472 73.6678 19.6011 74.302 19.0042C74.8989 18.4073 75.7382 18.1089 76.7828 18.1089H82.621V18.0529C82.621 16.9151 81.9868 16.3369 80.7371 16.3369H74.2461V14.4344H80.6998C82.0428 14.4344 83.0687 14.7888 83.7774 15.4602C84.4862 16.1317 84.8593 17.083 84.8593 18.3327V22.1192C84.8593 23.0891 84.5235 23.8538 83.8707 24.4134C83.2738 24.9357 82.4345 25.1782 81.3526 25.1782H76.7828Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M65.1604 16.3742C64.3583 16.3742 63.7428 16.654 63.2952 17.1763C62.9594 17.5866 62.8102 18.2395 62.8102 19.1348V25.1782H60.5719V10.8531H62.8102V15.0872C63.4444 14.6582 64.1905 14.4344 65.0298 14.4344H67.2308C68.6111 14.4344 69.7116 14.8447 70.5137 15.6468C71.2971 16.4675 71.7074 17.5866 71.7074 19.0229V25.1782H69.4691V19.1348C69.4691 18.2395 69.2826 17.5866 68.9468 17.1763C68.4992 16.654 67.8837 16.3742 67.063 16.3742H65.1604Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M50.425 23.7419C49.623 24.7119 48.6344 25.1782 47.4593 25.1782H46.079C44.8293 25.1782 43.8407 24.7865 43.1133 24.0031C42.4045 23.2756 42.0687 22.2311 42.0687 20.8881V14.4344H44.2884V20.9068C44.2884 21.6902 44.4562 22.2684 44.792 22.6228C45.165 23.0331 45.6686 23.2383 46.3028 23.2383H47.2728C47.9069 23.2383 48.4106 23.0331 48.8023 22.6228C49.138 22.2684 49.3245 21.6902 49.3245 20.9068V14.4344H51.5255V20.9068C51.5255 21.6902 51.6934 22.2684 52.0291 22.6228C52.4022 23.0331 52.9058 23.2383 53.54 23.2383H54.5099C55.1441 23.2383 55.6477 23.0331 56.0394 22.6228C56.3751 22.2684 56.5617 21.6902 56.5617 20.9068V14.4344H58.7813V20.8881C58.7813 22.2311 58.4083 23.2756 57.6995 24.0031C56.9534 24.7865 55.9648 25.1782 54.7151 25.1782H53.3535C52.197 25.1782 51.2084 24.7119 50.425 23.7419Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M33.6172 14.4344H35.8182C37.1985 14.4344 38.299 14.8447 39.1011 15.6468C39.8845 16.4675 40.2948 17.5866 40.2948 19.0229V25.1782H38.0565V19.1348C38.0565 18.2395 37.87 17.5866 37.5342 17.1763C37.0866 16.654 36.4711 16.3742 35.6503 16.3742H33.7478C32.9457 16.3742 32.3302 16.654 31.8826 17.1763C31.5468 17.5866 31.3976 18.2395 31.3976 19.1348V25.1782H29.1593V19.0229C29.1593 17.5866 29.551 16.4675 30.3531 15.6468C31.1365 14.8447 32.237 14.4344 33.6172 14.4344Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M23.2703 20.0114H19.7263C18.5698 20.0114 18.0103 20.4964 18.0103 21.4663V21.8207C18.0103 22.7906 18.5698 23.257 19.7263 23.257H23.2703C24.4267 23.257 25.0236 22.7906 25.0236 21.8207V21.4663C25.0236 20.4964 24.4267 20.0114 23.2703 20.0114ZM19.1854 25.1782C18.1408 25.1782 17.3015 24.8984 16.7046 24.3015C16.0704 23.7233 15.772 22.9772 15.772 22.0446V21.2798C15.772 20.3472 16.0704 19.6011 16.7046 19.0042C17.3015 18.4073 18.1408 18.1089 19.1854 18.1089H25.0236V18.0529C25.0236 16.9151 24.3894 16.3369 23.1397 16.3369H16.6486V14.4344H23.1024C24.4454 14.4344 25.4712 14.7888 26.18 15.4602C26.8888 16.1317 27.2619 17.083 27.2619 18.3327V22.1192C27.2619 23.0891 26.9261 23.8538 26.2733 24.4134C25.6764 24.9357 24.8371 25.1782 23.7552 25.1782H19.1854Z",
      fill: "white"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M14.008 10.8904V25.1782H11.7697V17.6426H3.30153V25.1782H1.06323V10.8904H3.30153V15.6841H11.7697V10.8904H14.008Z",
      fill: "white"
    })))), /*#__PURE__*/react.createElement(HubGnb, {
      isMobile: false
    }), /*#__PURE__*/react.createElement("div", {
      className: "util"
    }, /*#__PURE__*/react.createElement("ul", {
      className: "util-list"
    }, isWeb && /*#__PURE__*/react.createElement("li", {
      className: "util-item showroom",
      onClick: function onClick() {
        return setTagging('hanwhahub_goto_hanwha');
      }
    }, headerTheme == 'light' && /*#__PURE__*/react.createElement(Button, {
      tagging: isKo ? 'hanwhahub_goto_Hanwha_kor' : 'hanwhahub_goto_Hanwha_eng',
      tag: "a",
      target: "_blank",
      href: "".concat(isLiverServerHub()),
      cate: "btn-1",
      size: "sm",
      type: "outline-hug",
      theme: 'dark',
      font: "off"
    }, isKo ? '<i class="font-hanwha">한화그룹</i> 홈페이지' : '<i class="font-hanwha">Hanwha Group</i>'), /*#__PURE__*/react.createElement(Button, {
      tagging: isKo ? 'hanwhahub_goto_Hanwha_kor' : 'hanwhahub_goto_Hanwha_eng',
      tag: "a",
      target: "_blank",
      href: "".concat(isLiverServerHub()),
      cate: "btn-1",
      size: "sm",
      type: "outline-hug",
      theme: 'light',
      font: "off"
    }, isKo ? '<i class="font-hanwha">한화그룹</i> 홈페이지' : '<i class="font-hanwha">Hanwha Group</i>')), /*#__PURE__*/react.createElement("li", {
      className: "util-item lang"
    }, /*#__PURE__*/react.createElement("span", {
      className: "current",
      onClick: function onClick() {
        toggleLangContainer();
      }
    }, isKo ? 'KR' : 'EN'), /*#__PURE__*/react.createElement("div", {
      className: "lang-container"
    }, /*#__PURE__*/react.createElement("div", {
      className: "lang"
    }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging("hanwhahub_langkor".concat(isKo ? '_kor' : '_eng'));
      },
      href: "/business/hanwha_hub.do"
    }, "KR")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging("hanwhahub_langeng".concat(isKo ? '_kor' : '_eng'));
      },
      href: "/business/hanwha_hub.do?lang=en",
      target: "_blank"
    }, "EN"))))))), /*#__PURE__*/react.createElement("button", {
      type: "button",
      className: "btn-menu"
    }, /*#__PURE__*/react.createElement("span", null), /*#__PURE__*/react.createElement("span", null), /*#__PURE__*/react.createElement("span", null), /*#__PURE__*/react.createElement("span", null))))), /*#__PURE__*/react.createElement("div", {
      className: "lang-container"
    }, /*#__PURE__*/react.createElement("div", {
      className: "lang"
    }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      href: "/",
      onClick: function onClick() {
        return setTagging("hanwhahub_langkor".concat(isKo ? '_kor' : '_eng'));
      }
    }, "KR")), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("a", {
      onClick: function onClick() {
        return setTagging("hanwhahub_langeng".concat(isKo ? '_kor' : '_eng'));
      },
      href: "https://m.hanwha.com/en.html",
      target: "_blank"
    }, "EN"))))), /*#__PURE__*/react.createElement("div", {
      className: "header-dimed"
    }));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/HubMobileGnb.jsx
  
  
  function HubMobileGnb() {
    var isKo = document.documentElement.lang == 'ko';
    (0,react.useEffect)(function () {
      var headerMenu = document.querySelector('#header .btn-menu');
      var mobileGnb = document.querySelector('.mobile-gnb');
      var mobileGnbMenu = mobileGnb.querySelector('.btn-menu');
      function setToggleMobileGnb() {
        headerMenu === null || headerMenu === void 0 || headerMenu.addEventListener('click', function () {
          toggleMobileGnb(true);
          mobileGnb.dataset.state = 'gnb';
          window.lenis.stop();
        });
        mobileGnbMenu === null || mobileGnbMenu === void 0 || mobileGnbMenu.addEventListener('click', function () {
          toggleMobileGnb(false);
          window.lenis.start();
        });
      }
      setToggleMobileGnb();
    }, []);
    function hideMobileGnb() {
      toggleMobileGnb(false);
      window.lenis.start();
    }
    function toggleMobileGnb(isOpen) {
      var mobileGnb = document.querySelector('.mobile-gnb');
      mobileGnb === null || mobileGnb === void 0 || mobileGnb.classList.toggle('open', isOpen);
    }
    return /*#__PURE__*/react.createElement("div", {
      className: "mobile-gnb-wrapper"
    }, /*#__PURE__*/react.createElement("div", {
      className: "mobile-gnb-inner"
    }, /*#__PURE__*/react.createElement("div", {
      className: "util"
    }, /*#__PURE__*/react.createElement("ul", {
      className: "util-list"
    }, /*#__PURE__*/react.createElement("li", {
      className: "util-item lang"
    }, /*#__PURE__*/react.createElement("div", {
      className: "icon"
    }, /*#__PURE__*/react.createElement("svg", {
      width: "18",
      height: "18",
      viewBox: "0 0 18 18",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/react.createElement("path", {
      d: "M9.00004 16.0715C12.9055 16.0715 16.0715 12.9055 16.0715 9.00004C16.0715 5.09459 12.9055 1.92859 9.00004 1.92859C5.09459 1.92859 1.92859 5.09459 1.92859 9.00004C1.92859 12.9055 5.09459 16.0715 9.00004 16.0715Z",
      stroke: "black",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M1.92859 9H16.0715",
      stroke: "black",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/react.createElement("path", {
      d: "M8.99997 1.92859C10.7687 3.865 11.7739 6.37797 11.8286 9.00004C11.7739 11.6221 10.7687 14.1351 8.99997 16.0715C7.2312 14.1351 6.22601 11.6221 6.17139 9.00004C6.22601 6.37797 7.2312 3.865 8.99997 1.92859Z",
      stroke: "black",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }))), /*#__PURE__*/react.createElement("a", {
      className: isKo ? 'current' : '',
      href: "/business/hanwha_hub.do",
      onClick: function onClick() {
        return setTagging('hanwhahub_kor');
      }
    }, /*#__PURE__*/react.createElement("span", null, "KR")), /*#__PURE__*/react.createElement("a", {
      className: isKo ? '' : 'current',
      href: "/business/hanwha_hub.do?lang=en",
      target: "_blank",
      onClick: function onClick() {
        return setTagging('hanwhahub_eng');
      }
    }, /*#__PURE__*/react.createElement("span", null, "EN")))), /*#__PURE__*/react.createElement("button", {
      type: "button",
      className: "btn-menu",
      onClick: function onClick() {
        return setTagging('hanwhahub_menu_mobile');
      }
    }, /*#__PURE__*/react.createElement("span", null), /*#__PURE__*/react.createElement("span", null))), /*#__PURE__*/react.createElement(HubGnb, {
      hideMobileGnb: hideMobileGnb
    })));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/common/init.js
  
  
  
  
  
  
  
  
  
  
  
  
  
  // import HubRenewalHeaderComp from "../react/components/HubRenewalHeader";
  
  
  
  
  // production 환경 console log 막기
  if (true) {
    console = window.console || {};
    console.log = function no_console() {};
    console.warn = function no_console() {};
    console.error = function () {};
  }
  var HEADER_LIGHT = ['main', 'hanwha_hub'];
  var isHub = document.querySelector('[data-current-page="hanwha_hub"]');
  function getHeaderTheme() {
    var _document$querySelect;
    var currentPage = (_document$querySelect = document.querySelector('[data-current-page]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.dataset.currentPage;
    var getThemeType = HEADER_LIGHT.includes(currentPage) ? 'light' : 'dark';
    return getThemeType;
  }
  function setHeaderTheme() {
    var getThemeType = getHeaderTheme();
    document.querySelector('#header').classList.add(getThemeType);
  }
  function initCommon() {
    return _initCommon.apply(this, arguments);
  }
  function _initCommon() {
    _initCommon = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      var pageName, groupDataRes, groupData;
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            pageName = document.querySelector('main').getAttribute('data-current-page');
            _context.next = 3;
            return lib_axios.get("/api/v1/business/group-ajax.do");
          case 3:
            groupDataRes = _context.sent;
            if (groupDataRes.status !== 200) {
              console.error("Failed to load main-kv.json");
            } else {
              console.log('groupDataRes', groupDataRes);
            }
            groupData = groupDataRes.status === 200 ? groupDataRes.data : null;
            resizeHandler();
            window.common = {
              popup: popup,
              groupData: groupData
            };
            !isHub && setMobileNav(groupData);
            setHeader(getHeaderTheme(), groupData);
            setHeaderTheme();
            setSideGroupNav(groupData);
            isHub && setHubMobileNav();
            setFooter();
            new Scroll();
            window.addEventListener('resize', function () {
              ScrollTrigger_ScrollTrigger.refresh();
              resizeHandler();
              switch (pageName) {
                case 'main':
                case 'history':
                case 'group':
                case 'hanwha_hub':
                case 'discover_detail':
                case 'article':
                  refreshPageOnChangingBreakPoint();
                  break;
                default:
                  break;
              }
            });
          case 16:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return _initCommon.apply(this, arguments);
  }
  function refreshPageOnChangingBreakPoint() {
    var breakPoints = [680, 1024];
    var currentPoint = breakPoints.filter(function (size) {
      return window.innerWidth > size;
    }).length;
    var max = breakPoints[currentPoint] ? breakPoints[currentPoint] : Infinity;
    var min = breakPoints[currentPoint - 1] ? breakPoints[currentPoint - 1] : 0;
    window.addEventListener('resize', function () {
      if (window.innerWidth < min || window.innerWidth > max) {
        window.location.reload();
      }
    });
  }
  function setHeader(theme, data) {
    var rootEl = document.querySelector("#header");
    var isHub = document.querySelector('[data-current-page="hanwha_hub"]');
    // const isRenewalHub = document.querySelector('[data-current-page="renewal_hub"]')
    var root = (0,client/* createRoot */.s)(rootEl);
    console.log('theme', theme);
    root.render(isHub ? /*#__PURE__*/react.createElement(HubHeaderComp, {
      theme: theme
    }) : /*#__PURE__*/react.createElement(HeaderComp, {
      data: data,
      theme: theme
    }));
  }
  function setFooter() {
    var rootEl = document.querySelector("#footer");
    var root = (0,client/* createRoot */.s)(rootEl);
    root.render( /*#__PURE__*/react.createElement(Footer, null));
  }
  function setSideGroupNav(data) {
    var rootEl = document.querySelector("#side-group-nav");
  
    // Do not render side group nav if the current page is hanwha_hub
    var isHub = document.querySelector('[data-current-page="hanwha_hub"]');
    if (isHub) return;
    var root = (0,client/* createRoot */.s)(rootEl);
    root.render( /*#__PURE__*/react.createElement(HeaderSideGroupNav, {
      data: data
    }));
  }
  function setMobileNav(data) {
    var rootEl = document.querySelector("#mobileNav");
    var root = (0,client/* createRoot */.s)(rootEl);
    root.render( /*#__PURE__*/react.createElement(MobileGnb, {
      data: data
    }));
  }
  function setHubMobileNav() {
    var rootEl = document.querySelector("#mobileNav");
    rootEl.classList.add('hub');
    var root = (0,client/* createRoot */.s)(rootEl);
    root.render( /*#__PURE__*/react.createElement(HubMobileGnb, null));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/common/load.js
  
  
  
  function loadPage(callback) {
    initCommon();
    var loadingEl = setLoadingPlate();
    loadAssets(function () {
      // gsap.to(loadingEl,{autoAlpha:0, duration:.1,onComplete: () => {
      loadingEl.remove();
      callback && callback();
      gsapWithCSS.delayedCall(1, function () {
        var currentPage = document.querySelector('[data-current-page]');
        currentPage && currentPage.dataset.currentPage != 'main' && currentPage.classList.add('loaded');
      });
      // }})
    });
  }
  function setLoadingPlate() {
    var div = document.createElement('div');
    div.id = 'loading';
    document.body.appendChild(div);
    return div;
  }
  function loadAssets(callback) {
    var imgs = document.querySelectorAll('img[lazy-load]');
    var videos = document.querySelectorAll('video[lazy-load]');
    var _promiseArray = [];
    console.log('imgs', imgs.length);
    console.log('videos', videos.length);
    imgs.forEach(function (img) {
      var data = img.dataset.src;
      var pr = new Promise(function (resolve, reject) {
        var _img = new Image();
        _img.src = data;
        _img.onload = function () {
          img.src = data;
          resolve();
          console.log('loaded img');
        };
      });
      _promiseArray.push(pr);
    });
    videos.forEach(function (video) {
      var _data = video.dataset.src;
      var _poster = video.dataset.poster;
      var _isAuto = video.dataset.auto;
      var pr = new Promise(function (resolve, reject) {
        video.src = _data;
        if (_poster) video.poster = _poster;
        if (_isAuto) video.autoplay = true;
        video.addEventListener('loadedmetadata', function () {
          resolve();
          console.log('loaded video');
        });
      });
      _promiseArray.push(pr);
    });
    Promise.all(_promiseArray).then(function (values) {
      callback && callback();
    });
  }
  ;// CONCATENATED MODULE: ./node_modules/gsap/utils/strings.js
  /*!
   * strings: 3.12.2
   * https://greensock.com
   *
   * Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  
  /* eslint-disable */
  var _trimExp = /(?:^\s+|\s+$)/g;
  var emojiExp = /([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;
  function getText(e) {
    var type = e.nodeType,
        result = "";
  
    if (type === 1 || type === 9 || type === 11) {
      if (typeof e.textContent === "string") {
        return e.textContent;
      } else {
        for (e = e.firstChild; e; e = e.nextSibling) {
          result += getText(e);
        }
      }
    } else if (type === 3 || type === 4) {
      return e.nodeValue;
    }
  
    return result;
  }
  function splitInnerHTML(element, delimiter, trim, preserveSpaces) {
    var node = element.firstChild,
        result = [],
        s;
  
    while (node) {
      if (node.nodeType === 3) {
        s = (node.nodeValue + "").replace(/^\n+/g, "");
  
        if (!preserveSpaces) {
          s = s.replace(/\s+/g, " ");
        }
  
        result.push.apply(result, emojiSafeSplit(s, delimiter, trim, preserveSpaces));
      } else if ((node.nodeName + "").toLowerCase() === "br") {
        result[result.length - 1] += "<br>";
      } else {
        result.push(node.outerHTML);
      }
  
      node = node.nextSibling;
    }
  
    s = result.length;
  
    while (s--) {
      result[s] === "&" && result.splice(s, 1, "&amp;");
    }
  
    return result;
  }
  /*
  //smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.
  
  let _emoji = "[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2694-\u2697]|\uD83E[\uDD10-\uDD5D]|[\uD800-\uDBFF][\uDC00-\uDFFF]",
    _emojiExp = new RegExp(_emoji),
    _emojiAndCharsExp = new RegExp(_emoji + "|.", "g"),
    _emojiSafeSplit = (text, delimiter, trim) => {
      if (trim) {
        text = text.replace(_trimExp, "");
      }
      return ((delimiter === "" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || "");
    };
   */
  
  function emojiSafeSplit(text, delimiter, trim, preserveSpaces) {
    text += ""; // make sure it's cast as a string. Someone may pass in a number.
  
    trim && (text = text.trim ? text.trim() : text.replace(_trimExp, "")); // IE9 and earlier compatibility
  
    if (delimiter && delimiter !== "") {
      return text.replace(/>/g, "&gt;").replace(/</g, "&lt;").split(delimiter);
    }
  
    var result = [],
        l = text.length,
        i = 0,
        j,
        character;
  
    for (; i < l; i++) {
      character = text.charAt(i);
  
      if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {
        //special emoji characters use 2 or 4 unicode characters that we must keep together.
        j = ((text.substr(i, 12).split(emojiExp) || [])[1] || "").length || 2;
        character = text.substr(i, j);
        result.emoji = 1;
        i += j - 1;
      }
  
      result.push(character === ">" ? "&gt;" : character === "<" ? "&lt;" : preserveSpaces && character === " " && (text.charAt(i - 1) === " " || text.charAt(i + 1) === " ") ? "&nbsp;" : character);
    }
  
    return result;
  }
  ;// CONCATENATED MODULE: ./node_modules/gsap/SplitText.js
  /*!
   * SplitText: 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  
  /* eslint-disable */
  
  
  var SplitText_doc,
      SplitText_win,
      SplitText_coreInitted,
      SplitText_gsap,
      SplitText_context,
      SplitText_toArray,
      _stripExp = /(?:\r|\n|\t\t)/g,
      //find carriage returns, new line feeds and double-tabs.
  _multipleSpacesExp = /(?:\s\s+)/g,
      SplitText_initCore = function _initCore(core) {
    SplitText_doc = document;
    SplitText_win = window;
    SplitText_gsap = SplitText_gsap || core || SplitText_win.gsap || console.warn("Please gsap.registerPlugin(SplitText)");
  
    if (SplitText_gsap) {
      SplitText_toArray = SplitText_gsap.utils.toArray;
  
      SplitText_context = SplitText_gsap.core.context || function () {};
  
      SplitText_coreInitted = 1;
    }
  },
      _bonusValidated = 1,
      //<name>SplitText</name>
  SplitText_getComputedStyle = function _getComputedStyle(element) {
    return SplitText_win.getComputedStyle(element);
  },
      _isAbsolute = function _isAbsolute(vars) {
    return vars.position === "absolute" || vars.absolute === true;
  },
      //some characters are combining marks (think diacritics/accents in European languages) which involve 2 or 4 characters that combine in the browser to form a single character. Pass in the remaining text and an array of the special characters to search for and if the text starts with one of those special characters, it'll spit back the number of characters to retain (often 2 or 4). Used in the specialChars features that was introduced in 0.6.0.
  _findSpecialChars = function _findSpecialChars(text, chars) {
    var i = chars.length,
        s;
  
    while (--i > -1) {
      s = chars[i];
  
      if (text.substr(0, s.length) === s) {
        return s.length;
      }
    }
  },
      _divStart = " style='position:relative;display:inline-block;'",
      _cssClassFunc = function _cssClassFunc(cssClass, tag) {
    if (cssClass === void 0) {
      cssClass = "";
    }
  
    var iterate = ~cssClass.indexOf("++"),
        num = 1;
  
    if (iterate) {
      cssClass = cssClass.split("++").join("");
    }
  
    return function () {
      return "<" + tag + _divStart + (cssClass ? " class='" + cssClass + (iterate ? num++ : "") + "'>" : ">");
    };
  },
      _swapText = function _swapText(element, oldText, newText) {
    var type = element.nodeType;
  
    if (type === 1 || type === 9 || type === 11) {
      for (element = element.firstChild; element; element = element.nextSibling) {
        _swapText(element, oldText, newText);
      }
    } else if (type === 3 || type === 4) {
      element.nodeValue = element.nodeValue.split(oldText).join(newText);
    }
  },
      _pushReversed = function _pushReversed(a, merge) {
    var i = merge.length;
  
    while (--i > -1) {
      a.push(merge[i]);
    }
  },
      _isBeforeWordDelimiter = function _isBeforeWordDelimiter(e, root, wordDelimiter) {
    var next;
  
    while (e && e !== root) {
      next = e._next || e.nextSibling;
  
      if (next) {
        return next.textContent.charAt(0) === wordDelimiter;
      }
  
      e = e.parentNode || e._parent;
    }
  },
      _deWordify = function _deWordify(e) {
    var children = SplitText_toArray(e.childNodes),
        l = children.length,
        i,
        child;
  
    for (i = 0; i < l; i++) {
      child = children[i];
  
      if (child._isSplit) {
        _deWordify(child);
      } else {
        if (i && child.previousSibling && child.previousSibling.nodeType === 3) {
          child.previousSibling.nodeValue += child.nodeType === 3 ? child.nodeValue : child.firstChild.nodeValue;
          e.removeChild(child);
        } else if (child.nodeType !== 3) {
          e.insertBefore(child.firstChild, child);
          e.removeChild(child);
        }
      }
    }
  },
      _getStyleAsNumber = function _getStyleAsNumber(name, computedStyle) {
    return parseFloat(computedStyle[name]) || 0;
  },
      _setPositionsAfterSplit = function _setPositionsAfterSplit(element, vars, allChars, allWords, allLines, origWidth, origHeight) {
    var cs = SplitText_getComputedStyle(element),
        paddingLeft = _getStyleAsNumber("paddingLeft", cs),
        lineOffsetY = -999,
        borderTopAndBottom = _getStyleAsNumber("borderBottomWidth", cs) + _getStyleAsNumber("borderTopWidth", cs),
        borderLeftAndRight = _getStyleAsNumber("borderLeftWidth", cs) + _getStyleAsNumber("borderRightWidth", cs),
        padTopAndBottom = _getStyleAsNumber("paddingTop", cs) + _getStyleAsNumber("paddingBottom", cs),
        padLeftAndRight = _getStyleAsNumber("paddingLeft", cs) + _getStyleAsNumber("paddingRight", cs),
        lineThreshold = _getStyleAsNumber("fontSize", cs) * (vars.lineThreshold || 0.2),
        textAlign = cs.textAlign,
        charArray = [],
        wordArray = [],
        lineArray = [],
        wordDelimiter = vars.wordDelimiter || " ",
        tag = vars.tag ? vars.tag : vars.span ? "span" : "div",
        types = vars.type || vars.split || "chars,words,lines",
        lines = allLines && ~types.indexOf("lines") ? [] : null,
        words = ~types.indexOf("words"),
        chars = ~types.indexOf("chars"),
        absolute = _isAbsolute(vars),
        linesClass = vars.linesClass,
        iterateLine = ~(linesClass || "").indexOf("++"),
        spaceNodesToRemove = [],
        isFlex = cs.display === "flex",
        prevInlineDisplay = element.style.display,
        i,
        j,
        l,
        node,
        nodes,
        isChild,
        curLine,
        addWordSpaces,
        style,
        lineNode,
        lineWidth,
        offset;
  
    iterateLine && (linesClass = linesClass.split("++").join(""));
    isFlex && (element.style.display = "block"); //copy all the descendant nodes into an array (we can't use a regular nodeList because it's live and we may need to renest things)
  
    j = element.getElementsByTagName("*");
    l = j.length;
    nodes = [];
  
    for (i = 0; i < l; i++) {
      nodes[i] = j[i];
    } //for absolute positioning, we need to record the x/y offsets and width/height for every <div>. And even if we're not positioning things absolutely, in order to accommodate lines, we must figure out where the y offset changes so that we can sense where the lines break, and we populate the lines array.
  
  
    if (lines || absolute) {
      for (i = 0; i < l; i++) {
        node = nodes[i];
        isChild = node.parentNode === element;
  
        if (isChild || absolute || chars && !words) {
          offset = node.offsetTop;
  
          if (lines && isChild && Math.abs(offset - lineOffsetY) > lineThreshold && (node.nodeName !== "BR" || i === 0)) {
            //we found some rare occasions where a certain character like &#8209; could cause the offsetTop to be off by 1 pixel, so we build in a threshold.
            curLine = [];
            lines.push(curLine);
            lineOffsetY = offset;
          }
  
          if (absolute) {
            //record offset x and y, as well as width and height so that we can access them later for positioning. Grabbing them at once ensures we don't trigger a browser paint & we maximize performance.
            node._x = node.offsetLeft;
            node._y = offset;
            node._w = node.offsetWidth;
            node._h = node.offsetHeight;
          }
  
          if (lines) {
            if (node._isSplit && isChild || !chars && isChild || words && isChild || !words && node.parentNode.parentNode === element && !node.parentNode._isSplit) {
              curLine.push(node);
              node._x -= paddingLeft;
  
              if (_isBeforeWordDelimiter(node, element, wordDelimiter)) {
                node._wordEnd = true;
              }
            }
  
            if (node.nodeName === "BR" && (node.nextSibling && node.nextSibling.nodeName === "BR" || i === 0)) {
              //two consecutive <br> tags signify a new [empty] line. Also, if the entire block of content STARTS with a <br>, add a line.
              lines.push([]);
            }
          }
        }
      }
    }
  
    for (i = 0; i < l; i++) {
      node = nodes[i];
      isChild = node.parentNode === element;
  
      if (node.nodeName === "BR") {
        if (lines || absolute) {
          node.parentNode && node.parentNode.removeChild(node);
          nodes.splice(i--, 1);
          l--;
        } else if (!words) {
          element.appendChild(node);
        }
  
        continue;
      }
  
      if (absolute) {
        style = node.style;
  
        if (!words && !isChild) {
          node._x += node.parentNode._x;
          node._y += node.parentNode._y;
        }
  
        style.left = node._x + "px";
        style.top = node._y + "px";
        style.position = "absolute";
        style.display = "block"; //if we don't set the width/height, things collapse in older versions of IE and the origin for transforms is thrown off in all browsers.
  
        style.width = node._w + 1 + "px"; //IE is 1px short sometimes. Avoid wrapping
  
        style.height = node._h + "px";
      }
  
      if (!words && chars) {
        //we always start out wrapping words in their own <div> so that line breaks happen correctly, but here we'll remove those <div> tags if necessary and re-nest the characters directly into the element rather than inside the word <div>
        if (node._isSplit) {
          node._next = j = node.nextSibling;
          node.parentNode.appendChild(node); //put it at the end to keep the order correct.
  
          while (j && j.nodeType === 3 && j.textContent === " ") {
            // if there are nodes that are just a space right afterward, go ahead and append them to the end so they're not out of order.
            node._next = j.nextSibling;
            node.parentNode.appendChild(j);
            j = j.nextSibling;
          }
        } else if (node.parentNode._isSplit) {
          node._parent = node.parentNode;
  
          if (!node.previousSibling && node.firstChild) {
            node.firstChild._isFirst = true;
          }
  
          if (node.nextSibling && node.nextSibling.textContent === " " && !node.nextSibling.nextSibling) {
            //if the last node inside a nested element is just a space (like T<span>nested </span>), remove it otherwise it'll get placed in the wrong order. Don't remove it right away, though, because we need to sense when words/characters are before a space like _isBeforeWordDelimiter(). Removing it now would make that a false negative.
            spaceNodesToRemove.push(node.nextSibling);
          }
  
          node._next = node.nextSibling && node.nextSibling._isFirst ? null : node.nextSibling;
          node.parentNode.removeChild(node);
          nodes.splice(i--, 1);
          l--;
        } else if (!isChild) {
          offset = !node.nextSibling && _isBeforeWordDelimiter(node.parentNode, element, wordDelimiter); //if this is the last letter in the word (and we're not breaking by lines and not positioning things absolutely), we need to add a space afterwards so that the characters don't just mash together
  
          node.parentNode._parent && node.parentNode._parent.appendChild(node);
          offset && node.parentNode.appendChild(SplitText_doc.createTextNode(" "));
  
          if (tag === "span") {
            node.style.display = "inline"; //so that word breaks are honored properly.
          }
  
          charArray.push(node);
        }
      } else if (node.parentNode._isSplit && !node._isSplit && node.innerHTML !== "") {
        wordArray.push(node);
      } else if (chars && !node._isSplit) {
        if (tag === "span") {
          node.style.display = "inline";
        }
  
        charArray.push(node);
      }
    }
  
    i = spaceNodesToRemove.length;
  
    while (--i > -1) {
      spaceNodesToRemove[i].parentNode.removeChild(spaceNodesToRemove[i]);
    }
  
    if (lines) {
      //the next 7 lines just give us the line width in the most reliable way and figure out the left offset (if position isn't relative or absolute). We must set the width along with text-align to ensure everything works properly for various alignments.
      if (absolute) {
        lineNode = SplitText_doc.createElement(tag);
        element.appendChild(lineNode);
        lineWidth = lineNode.offsetWidth + "px";
        offset = lineNode.offsetParent === element ? 0 : element.offsetLeft;
        element.removeChild(lineNode);
      }
  
      style = element.style.cssText;
      element.style.cssText = "display:none;"; //to improve performance, set display:none on the element so that the browser doesn't have to worry about reflowing or rendering while we're renesting things. We'll revert the cssText later.
      //we can't use element.innerHTML = "" because that causes IE to literally delete all the nodes and their content even though we've stored them in an array! So we must loop through the children and remove them.
  
      while (element.firstChild) {
        element.removeChild(element.firstChild);
      }
  
      addWordSpaces = wordDelimiter === " " && (!absolute || !words && !chars);
  
      for (i = 0; i < lines.length; i++) {
        curLine = lines[i];
        lineNode = SplitText_doc.createElement(tag);
        lineNode.style.cssText = "display:block;text-align:" + textAlign + ";position:" + (absolute ? "absolute;" : "relative;");
  
        if (linesClass) {
          lineNode.className = linesClass + (iterateLine ? i + 1 : "");
        }
  
        lineArray.push(lineNode);
        l = curLine.length;
  
        for (j = 0; j < l; j++) {
          if (curLine[j].nodeName !== "BR") {
            node = curLine[j];
            lineNode.appendChild(node);
            addWordSpaces && node._wordEnd && lineNode.appendChild(SplitText_doc.createTextNode(" "));
  
            if (absolute) {
              if (j === 0) {
                lineNode.style.top = node._y + "px";
                lineNode.style.left = paddingLeft + offset + "px";
              }
  
              node.style.top = "0px";
  
              if (offset) {
                node.style.left = node._x - offset + "px";
              }
            }
          }
        }
  
        if (l === 0) {
          //if there are no nodes in the line (typically meaning there were two consecutive <br> tags, just add a non-breaking space so that things display properly.
          lineNode.innerHTML = "&nbsp;";
        } else if (!words && !chars) {
          _deWordify(lineNode);
  
          _swapText(lineNode, String.fromCharCode(160), " ");
        }
  
        if (absolute) {
          lineNode.style.width = lineWidth;
          lineNode.style.height = node._h + "px";
        }
  
        element.appendChild(lineNode);
      }
  
      element.style.cssText = style;
    } //if everything shifts to being position:absolute, the container can collapse in terms of height or width, so fix that here.
  
  
    if (absolute) {
      if (origHeight > element.clientHeight) {
        element.style.height = origHeight - padTopAndBottom + "px";
  
        if (element.clientHeight < origHeight) {
          //IE8 and earlier use a different box model - we must include padding and borders
          element.style.height = origHeight + borderTopAndBottom + "px";
        }
      }
  
      if (origWidth > element.clientWidth) {
        element.style.width = origWidth - padLeftAndRight + "px";
  
        if (element.clientWidth < origWidth) {
          //IE8 and earlier use a different box model - we must include padding and borders
          element.style.width = origWidth + borderLeftAndRight + "px";
        }
      }
    }
  
    isFlex && (prevInlineDisplay ? element.style.display = prevInlineDisplay : element.style.removeProperty("display"));
  
    _pushReversed(allChars, charArray);
  
    words && _pushReversed(allWords, wordArray);
  
    _pushReversed(allLines, lineArray);
  },
      _splitRawText = function _splitRawText(element, vars, wordStart, charStart) {
    var tag = vars.tag ? vars.tag : vars.span ? "span" : "div",
        types = vars.type || vars.split || "chars,words,lines",
        //words = (types.indexOf("words") !== -1),
    chars = ~types.indexOf("chars"),
        absolute = _isAbsolute(vars),
        wordDelimiter = vars.wordDelimiter || " ",
        space = wordDelimiter !== " " ? "" : absolute ? "&#173; " : " ",
        wordEnd = "</" + tag + ">",
        wordIsOpen = 1,
        specialChars = vars.specialChars ? typeof vars.specialChars === "function" ? vars.specialChars : _findSpecialChars : null,
        //specialChars can be an array or a function. For performance reasons, we always set this local "specialChars" to a function to which we pass the remaining text and whatever the original vars.specialChars was so that if it's an array, it works with the _findSpecialChars() function.
    text,
        splitText,
        i,
        j,
        l,
        character,
        hasTagStart,
        testResult,
        container = SplitText_doc.createElement("div"),
        parent = element.parentNode;
  
    parent.insertBefore(container, element);
    container.textContent = element.nodeValue;
    parent.removeChild(element);
    element = container;
    text = getText(element);
    hasTagStart = text.indexOf("<") !== -1;
  
    if (vars.reduceWhiteSpace !== false) {
      text = text.replace(_multipleSpacesExp, " ").replace(_stripExp, "");
    }
  
    if (hasTagStart) {
      text = text.split("<").join("{{LT}}"); //we can't leave "<" in the string, or when we set the innerHTML, it can be interpreted as a node
    }
  
    l = text.length;
    splitText = (text.charAt(0) === " " ? space : "") + wordStart();
  
    for (i = 0; i < l; i++) {
      character = text.charAt(i);
  
      if (specialChars && (testResult = specialChars(text.substr(i), vars.specialChars))) {
        // look for any specialChars that were declared. Remember, they can be passed in like {specialChars:["मी", "पा", "है"]} or a function could be defined instead. Either way, the function should return the number of characters that should be grouped together for this "character".
        character = text.substr(i, testResult || 1);
        splitText += chars && character !== " " ? charStart() + character + "</" + tag + ">" : character;
        i += testResult - 1;
      } else if (character === wordDelimiter && text.charAt(i - 1) !== wordDelimiter && i) {
        splitText += wordIsOpen ? wordEnd : "";
        wordIsOpen = 0;
  
        while (text.charAt(i + 1) === wordDelimiter) {
          //skip over empty spaces (to avoid making them words)
          splitText += space;
          i++;
        }
  
        if (i === l - 1) {
          splitText += space;
        } else if (text.charAt(i + 1) !== ")") {
          splitText += space + wordStart();
          wordIsOpen = 1;
        }
      } else if (character === "{" && text.substr(i, 6) === "{{LT}}") {
        splitText += chars ? charStart() + "{{LT}}" + "</" + tag + ">" : "{{LT}}";
        i += 5;
      } else if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {
        //special emoji characters use 2 or 4 unicode characters that we must keep together.
        j = ((text.substr(i, 12).split(emojiExp) || [])[1] || "").length || 2;
        splitText += chars && character !== " " ? charStart() + text.substr(i, j) + "</" + tag + ">" : text.substr(i, j);
        i += j - 1;
      } else {
        splitText += chars && character !== " " ? charStart() + character + "</" + tag + ">" : character;
      }
    }
  
    element.outerHTML = splitText + (wordIsOpen ? wordEnd : "");
    hasTagStart && _swapText(parent, "{{LT}}", "<"); //note: don't perform this on "element" because that gets replaced with all new elements when we set element.outerHTML.
  },
      _split = function _split(element, vars, wordStart, charStart) {
    var children = SplitText_toArray(element.childNodes),
        l = children.length,
        absolute = _isAbsolute(vars),
        i,
        child;
  
    if (element.nodeType !== 3 || l > 1) {
      vars.absolute = false;
  
      for (i = 0; i < l; i++) {
        child = children[i];
        child._next = child._isFirst = child._parent = child._wordEnd = null;
  
        if (child.nodeType !== 3 || /\S+/.test(child.nodeValue)) {
          if (absolute && child.nodeType !== 3 && SplitText_getComputedStyle(child).display === "inline") {
            //if there's a child node that's display:inline, switch it to inline-block so that absolute positioning works properly (most browsers don't report offsetTop/offsetLeft properly inside a <span> for example)
            child.style.display = "inline-block";
            child.style.position = "relative";
          }
  
          child._isSplit = true;
  
          _split(child, vars, wordStart, charStart); //don't split lines on child elements
  
        }
      }
  
      vars.absolute = absolute;
      element._isSplit = true;
      return;
    }
  
    _splitRawText(element, vars, wordStart, charStart);
  };
  
  var SplitText = /*#__PURE__*/function () {
    function SplitText(element, vars) {
      SplitText_coreInitted || SplitText_initCore();
      this.elements = SplitText_toArray(element);
      this.chars = [];
      this.words = [];
      this.lines = [];
      this._originals = [];
      this.vars = vars || {};
  
      SplitText_context(this);
  
      _bonusValidated && this.split(vars);
    }
  
    var _proto = SplitText.prototype;
  
    _proto.split = function split(vars) {
      this.isSplit && this.revert();
      this.vars = vars = vars || this.vars;
      this._originals.length = this.chars.length = this.words.length = this.lines.length = 0;
  
      var i = this.elements.length,
          tag = vars.tag ? vars.tag : vars.span ? "span" : "div",
          wordStart = _cssClassFunc(vars.wordsClass, tag),
          charStart = _cssClassFunc(vars.charsClass, tag),
          origHeight,
          origWidth,
          e; //we split in reversed order so that if/when we position:absolute elements, they don't affect the position of the ones after them in the document flow (shifting them up as they're taken out of the document flow).
  
  
      while (--i > -1) {
        e = this.elements[i];
        this._originals[i] = e.innerHTML;
        origHeight = e.clientHeight;
        origWidth = e.clientWidth;
  
        _split(e, vars, wordStart, charStart);
  
        _setPositionsAfterSplit(e, vars, this.chars, this.words, this.lines, origWidth, origHeight);
      }
  
      this.chars.reverse();
      this.words.reverse();
      this.lines.reverse();
      this.isSplit = true;
      return this;
    };
  
    _proto.revert = function revert() {
      var originals = this._originals;
  
      if (!originals) {
        throw "revert() call wasn't scoped properly.";
      }
  
      this.elements.forEach(function (e, i) {
        return e.innerHTML = originals[i];
      });
      this.chars = [];
      this.words = [];
      this.lines = [];
      this.isSplit = false;
      return this;
    };
  
    SplitText.create = function create(element, vars) {
      return new SplitText(element, vars);
    };
  
    return SplitText;
  }();
  SplitText.version = "3.12.2";
  SplitText.register = SplitText_initCore;
  
  ;// CONCATENATED MODULE: ./node_modules/gsap/ScrollToPlugin.js
  /*!
   * ScrollToPlugin 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  
  /* eslint-disable */
  var ScrollToPlugin_gsap,
      ScrollToPlugin_coreInitted,
      _window,
      ScrollToPlugin_docEl,
      ScrollToPlugin_body,
      ScrollToPlugin_toArray,
      ScrollToPlugin_config,
      ScrollToPlugin_ScrollTrigger,
      ScrollToPlugin_windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      ScrollToPlugin_getGSAP = function _getGSAP() {
    return ScrollToPlugin_gsap || ScrollToPlugin_windowExists() && (ScrollToPlugin_gsap = window.gsap) && ScrollToPlugin_gsap.registerPlugin && ScrollToPlugin_gsap;
  },
      ScrollToPlugin_isString = function _isString(value) {
    return typeof value === "string";
  },
      ScrollToPlugin_isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      _max = function _max(element, axis) {
    var dim = axis === "x" ? "Width" : "Height",
        scroll = "scroll" + dim,
        client = "client" + dim;
    return element === _window || element === ScrollToPlugin_docEl || element === ScrollToPlugin_body ? Math.max(ScrollToPlugin_docEl[scroll], ScrollToPlugin_body[scroll]) - (_window["inner" + dim] || ScrollToPlugin_docEl[client] || ScrollToPlugin_body[client]) : element[scroll] - element["offset" + dim];
  },
      _buildGetter = function _buildGetter(e, axis) {
    //pass in an element and an axis ("x" or "y") and it'll return a getter function for the scroll position of that element (like scrollTop or scrollLeft, although if the element is the window, it'll use the pageXOffset/pageYOffset or the documentElement's scrollTop/scrollLeft or document.body's. Basically this streamlines things and makes a very fast getter across browsers.
    var p = "scroll" + (axis === "x" ? "Left" : "Top");
  
    if (e === _window) {
      if (e.pageXOffset != null) {
        p = "page" + axis.toUpperCase() + "Offset";
      } else {
        e = ScrollToPlugin_docEl[p] != null ? ScrollToPlugin_docEl : ScrollToPlugin_body;
      }
    }
  
    return function () {
      return e[p];
    };
  },
      _clean = function _clean(value, index, target, targets) {
    ScrollToPlugin_isFunction(value) && (value = value(index, target, targets));
  
    if (typeof value !== "object") {
      return ScrollToPlugin_isString(value) && value !== "max" && value.charAt(1) !== "=" ? {
        x: value,
        y: value
      } : {
        y: value
      }; //if we don't receive an object as the parameter, assume the user intends "y".
    } else if (value.nodeType) {
      return {
        y: value,
        x: value
      };
    } else {
      var result = {},
          p;
  
      for (p in value) {
        result[p] = p !== "onAutoKill" && ScrollToPlugin_isFunction(value[p]) ? value[p](index, target, targets) : value[p];
      }
  
      return result;
    }
  },
      _getOffset = function _getOffset(element, container) {
    element = ScrollToPlugin_toArray(element)[0];
  
    if (!element || !element.getBoundingClientRect) {
      return console.warn("scrollTo target doesn't exist. Using 0") || {
        x: 0,
        y: 0
      };
    }
  
    var rect = element.getBoundingClientRect(),
        isRoot = !container || container === _window || container === ScrollToPlugin_body,
        cRect = isRoot ? {
      top: ScrollToPlugin_docEl.clientTop - (_window.pageYOffset || ScrollToPlugin_docEl.scrollTop || ScrollToPlugin_body.scrollTop || 0),
      left: ScrollToPlugin_docEl.clientLeft - (_window.pageXOffset || ScrollToPlugin_docEl.scrollLeft || ScrollToPlugin_body.scrollLeft || 0)
    } : container.getBoundingClientRect(),
        offsets = {
      x: rect.left - cRect.left,
      y: rect.top - cRect.top
    };
  
    if (!isRoot && container) {
      //only add the current scroll position if it's not the window/body.
      offsets.x += _buildGetter(container, "x")();
      offsets.y += _buildGetter(container, "y")();
    }
  
    return offsets;
  },
      _parseVal = function _parseVal(value, target, axis, currentVal, offset) {
    return !isNaN(value) && typeof value !== "object" ? parseFloat(value) - offset : ScrollToPlugin_isString(value) && value.charAt(1) === "=" ? parseFloat(value.substr(2)) * (value.charAt(0) === "-" ? -1 : 1) + currentVal - offset : value === "max" ? _max(target, axis) - offset : Math.min(_max(target, axis), _getOffset(value, target)[axis] - offset);
  },
      ScrollToPlugin_initCore = function _initCore() {
    ScrollToPlugin_gsap = ScrollToPlugin_getGSAP();
  
    if (ScrollToPlugin_windowExists() && ScrollToPlugin_gsap && typeof document !== "undefined" && document.body) {
      _window = window;
      ScrollToPlugin_body = document.body;
      ScrollToPlugin_docEl = document.documentElement;
      ScrollToPlugin_toArray = ScrollToPlugin_gsap.utils.toArray;
      ScrollToPlugin_gsap.config({
        autoKillThreshold: 7
      });
      ScrollToPlugin_config = ScrollToPlugin_gsap.config();
      ScrollToPlugin_coreInitted = 1;
    }
  };
  
  var ScrollToPlugin = {
    version: "3.12.2",
    name: "scrollTo",
    rawVars: 1,
    register: function register(core) {
      ScrollToPlugin_gsap = core;
  
      ScrollToPlugin_initCore();
    },
    init: function init(target, value, tween, index, targets) {
      ScrollToPlugin_coreInitted || ScrollToPlugin_initCore();
      var data = this,
          snapType = ScrollToPlugin_gsap.getProperty(target, "scrollSnapType");
      data.isWin = target === _window;
      data.target = target;
      data.tween = tween;
      value = _clean(value, index, target, targets);
      data.vars = value;
      data.autoKill = !!value.autoKill;
      data.getX = _buildGetter(target, "x");
      data.getY = _buildGetter(target, "y");
      data.x = data.xPrev = data.getX();
      data.y = data.yPrev = data.getY();
      ScrollToPlugin_ScrollTrigger || (ScrollToPlugin_ScrollTrigger = ScrollToPlugin_gsap.core.globals().ScrollTrigger);
      ScrollToPlugin_gsap.getProperty(target, "scrollBehavior") === "smooth" && ScrollToPlugin_gsap.set(target, {
        scrollBehavior: "auto"
      });
  
      if (snapType && snapType !== "none") {
        // disable scroll snapping to avoid strange behavior
        data.snap = 1;
        data.snapInline = target.style.scrollSnapType;
        target.style.scrollSnapType = "none";
      }
  
      if (value.x != null) {
        data.add(data, "x", data.x, _parseVal(value.x, target, "x", data.x, value.offsetX || 0), index, targets);
  
        data._props.push("scrollTo_x");
      } else {
        data.skipX = 1;
      }
  
      if (value.y != null) {
        data.add(data, "y", data.y, _parseVal(value.y, target, "y", data.y, value.offsetY || 0), index, targets);
  
        data._props.push("scrollTo_y");
      } else {
        data.skipY = 1;
      }
    },
    render: function render(ratio, data) {
      var pt = data._pt,
          target = data.target,
          tween = data.tween,
          autoKill = data.autoKill,
          xPrev = data.xPrev,
          yPrev = data.yPrev,
          isWin = data.isWin,
          snap = data.snap,
          snapInline = data.snapInline,
          x,
          y,
          yDif,
          xDif,
          threshold;
  
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
  
      x = isWin || !data.skipX ? data.getX() : xPrev;
      y = isWin || !data.skipY ? data.getY() : yPrev;
      yDif = y - yPrev;
      xDif = x - xPrev;
      threshold = ScrollToPlugin_config.autoKillThreshold;
  
      if (data.x < 0) {
        //can't scroll to a position less than 0! Might happen if someone uses a Back.easeOut or Elastic.easeOut when scrolling back to the top of the page (for example)
        data.x = 0;
      }
  
      if (data.y < 0) {
        data.y = 0;
      }
  
      if (autoKill) {
        //note: iOS has a bug that throws off the scroll by several pixels, so we need to check if it's within 7 pixels of the previous one that we set instead of just looking for an exact match.
        if (!data.skipX && (xDif > threshold || xDif < -threshold) && x < _max(target, "x")) {
          data.skipX = 1; //if the user scrolls separately, we should stop tweening!
        }
  
        if (!data.skipY && (yDif > threshold || yDif < -threshold) && y < _max(target, "y")) {
          data.skipY = 1; //if the user scrolls separately, we should stop tweening!
        }
  
        if (data.skipX && data.skipY) {
          tween.kill();
          data.vars.onAutoKill && data.vars.onAutoKill.apply(tween, data.vars.onAutoKillParams || []);
        }
      }
  
      if (isWin) {
        _window.scrollTo(!data.skipX ? data.x : x, !data.skipY ? data.y : y);
      } else {
        data.skipY || (target.scrollTop = data.y);
        data.skipX || (target.scrollLeft = data.x);
      }
  
      if (snap && (ratio === 1 || ratio === 0)) {
        y = target.scrollTop;
        x = target.scrollLeft;
        snapInline ? target.style.scrollSnapType = snapInline : target.style.removeProperty("scroll-snap-type");
        target.scrollTop = y + 1; // bug in Safari causes the element to totally reset its scroll position when scroll-snap-type changes, so we need to set it to a slightly different value and then back again to work around this bug.
  
        target.scrollLeft = x + 1;
        target.scrollTop = y;
        target.scrollLeft = x;
      }
  
      data.xPrev = data.x;
      data.yPrev = data.y;
      ScrollToPlugin_ScrollTrigger && ScrollToPlugin_ScrollTrigger.update();
    },
    kill: function kill(property) {
      var both = property === "scrollTo";
  
      if (both || property === "scrollTo_x") {
        this.skipX = 1;
      }
  
      if (both || property === "scrollTo_y") {
        this.skipY = 1;
      }
    }
  };
  ScrollToPlugin.max = _max;
  ScrollToPlugin.getOffset = _getOffset;
  ScrollToPlugin.buildGetter = _buildGetter;
  ScrollToPlugin_getGSAP() && ScrollToPlugin_gsap.registerPlugin(ScrollToPlugin);
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/ssr-window.esm.mjs
  /**
   * SSR Window 4.0.2
   * Better handling for window object in SSR environment
   * https://github.com/nolimits4web/ssr-window
   *
   * Copyright 2021, Vladimir Kharlampidi
   *
   * Licensed under MIT
   *
   * Released on: December 13, 2021
   */
  /* eslint-disable no-param-reassign */
  function ssr_window_esm_isObject(obj) {
    return obj !== null && typeof obj === 'object' && 'constructor' in obj && obj.constructor === Object;
  }
  function ssr_window_esm_extend(target, src) {
    if (target === void 0) {
      target = {};
    }
    if (src === void 0) {
      src = {};
    }
    Object.keys(src).forEach(key => {
      if (typeof target[key] === 'undefined') target[key] = src[key];else if (ssr_window_esm_isObject(src[key]) && ssr_window_esm_isObject(target[key]) && Object.keys(src[key]).length > 0) {
        ssr_window_esm_extend(target[key], src[key]);
      }
    });
  }
  const ssrDocument = {
    body: {},
    addEventListener() {},
    removeEventListener() {},
    activeElement: {
      blur() {},
      nodeName: ''
    },
    querySelector() {
      return null;
    },
    querySelectorAll() {
      return [];
    },
    getElementById() {
      return null;
    },
    createEvent() {
      return {
        initEvent() {}
      };
    },
    createElement() {
      return {
        children: [],
        childNodes: [],
        style: {},
        setAttribute() {},
        getElementsByTagName() {
          return [];
        }
      };
    },
    createElementNS() {
      return {};
    },
    importNode() {
      return null;
    },
    location: {
      hash: '',
      host: '',
      hostname: '',
      href: '',
      origin: '',
      pathname: '',
      protocol: '',
      search: ''
    }
  };
  function ssr_window_esm_getDocument() {
    const doc = typeof document !== 'undefined' ? document : {};
    ssr_window_esm_extend(doc, ssrDocument);
    return doc;
  }
  const ssrWindow = {
    document: ssrDocument,
    navigator: {
      userAgent: ''
    },
    location: {
      hash: '',
      host: '',
      hostname: '',
      href: '',
      origin: '',
      pathname: '',
      protocol: '',
      search: ''
    },
    history: {
      replaceState() {},
      pushState() {},
      go() {},
      back() {}
    },
    CustomEvent: function CustomEvent() {
      return this;
    },
    addEventListener() {},
    removeEventListener() {},
    getComputedStyle() {
      return {
        getPropertyValue() {
          return '';
        }
      };
    },
    Image() {},
    Date() {},
    screen: {},
    setTimeout() {},
    clearTimeout() {},
    matchMedia() {
      return {};
    },
    requestAnimationFrame(callback) {
      if (typeof setTimeout === 'undefined') {
        callback();
        return null;
      }
      return setTimeout(callback, 0);
    },
    cancelAnimationFrame(id) {
      if (typeof setTimeout === 'undefined') {
        return;
      }
      clearTimeout(id);
    }
  };
  function ssr_window_esm_getWindow() {
    const win = typeof window !== 'undefined' ? window : {};
    ssr_window_esm_extend(win, ssrWindow);
    return win;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/utils.mjs
  
  
  function utils_classesToTokens(classes) {
    if (classes === void 0) {
      classes = '';
    }
    return classes.trim().split(' ').filter(c => !!c.trim());
  }
  
  function deleteProps(obj) {
    const object = obj;
    Object.keys(object).forEach(key => {
      try {
        object[key] = null;
      } catch (e) {
        // no getter for object
      }
      try {
        delete object[key];
      } catch (e) {
        // something got wrong
      }
    });
  }
  function utils_nextTick(callback, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return setTimeout(callback, delay);
  }
  function utils_now() {
    return Date.now();
  }
  function utils_getComputedStyle(el) {
    const window = ssr_window_esm_getWindow();
    let style;
    if (window.getComputedStyle) {
      style = window.getComputedStyle(el, null);
    }
    if (!style && el.currentStyle) {
      style = el.currentStyle;
    }
    if (!style) {
      style = el.style;
    }
    return style;
  }
  function utils_getTranslate(el, axis) {
    if (axis === void 0) {
      axis = 'x';
    }
    const window = ssr_window_esm_getWindow();
    let matrix;
    let curTransform;
    let transformMatrix;
    const curStyle = utils_getComputedStyle(el);
    if (window.WebKitCSSMatrix) {
      curTransform = curStyle.transform || curStyle.webkitTransform;
      if (curTransform.split(',').length > 6) {
        curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');
      }
      // Some old versions of Webkit choke when 'none' is passed; pass
      // empty string instead in this case
      transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
    } else {
      transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
      matrix = transformMatrix.toString().split(',');
    }
    if (axis === 'x') {
      // Latest Chrome and webkits Fix
      if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41;
      // Crazy IE10 Matrix
      else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);
      // Normal Browsers
      else curTransform = parseFloat(matrix[4]);
    }
    if (axis === 'y') {
      // Latest Chrome and webkits Fix
      if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42;
      // Crazy IE10 Matrix
      else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);
      // Normal Browsers
      else curTransform = parseFloat(matrix[5]);
    }
    return curTransform || 0;
  }
  function shared_utils_isObject(o) {
    return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';
  }
  function isNode(node) {
    // eslint-disable-next-line
    if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {
      return node instanceof HTMLElement;
    }
    return node && (node.nodeType === 1 || node.nodeType === 11);
  }
  function utils_extend() {
    const to = Object(arguments.length <= 0 ? undefined : arguments[0]);
    const noExtend = ['__proto__', 'constructor', 'prototype'];
    for (let i = 1; i < arguments.length; i += 1) {
      const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];
      if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {
        const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);
        for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
          const nextKey = keysArray[nextIndex];
          const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== undefined && desc.enumerable) {
            if (shared_utils_isObject(to[nextKey]) && shared_utils_isObject(nextSource[nextKey])) {
              if (nextSource[nextKey].__swiper__) {
                to[nextKey] = nextSource[nextKey];
              } else {
                utils_extend(to[nextKey], nextSource[nextKey]);
              }
            } else if (!shared_utils_isObject(to[nextKey]) && shared_utils_isObject(nextSource[nextKey])) {
              to[nextKey] = {};
              if (nextSource[nextKey].__swiper__) {
                to[nextKey] = nextSource[nextKey];
              } else {
                utils_extend(to[nextKey], nextSource[nextKey]);
              }
            } else {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
    }
    return to;
  }
  function utils_setCSSProperty(el, varName, varValue) {
    el.style.setProperty(varName, varValue);
  }
  function animateCSSModeScroll(_ref) {
    let {
      swiper,
      targetPosition,
      side
    } = _ref;
    const window = ssr_window_esm_getWindow();
    const startPosition = -swiper.translate;
    let startTime = null;
    let time;
    const duration = swiper.params.speed;
    swiper.wrapperEl.style.scrollSnapType = 'none';
    window.cancelAnimationFrame(swiper.cssModeFrameID);
    const dir = targetPosition > startPosition ? 'next' : 'prev';
    const isOutOfBound = (current, target) => {
      return dir === 'next' && current >= target || dir === 'prev' && current <= target;
    };
    const animate = () => {
      time = new Date().getTime();
      if (startTime === null) {
        startTime = time;
      }
      const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
      const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
      let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);
      if (isOutOfBound(currentPosition, targetPosition)) {
        currentPosition = targetPosition;
      }
      swiper.wrapperEl.scrollTo({
        [side]: currentPosition
      });
      if (isOutOfBound(currentPosition, targetPosition)) {
        swiper.wrapperEl.style.overflow = 'hidden';
        swiper.wrapperEl.style.scrollSnapType = '';
        setTimeout(() => {
          swiper.wrapperEl.style.overflow = '';
          swiper.wrapperEl.scrollTo({
            [side]: currentPosition
          });
        });
        window.cancelAnimationFrame(swiper.cssModeFrameID);
        return;
      }
      swiper.cssModeFrameID = window.requestAnimationFrame(animate);
    };
    animate();
  }
  function utils_getSlideTransformEl(slideEl) {
    return slideEl.querySelector('.swiper-slide-transform') || slideEl.shadowRoot && slideEl.shadowRoot.querySelector('.swiper-slide-transform') || slideEl;
  }
  function utils_elementChildren(element, selector) {
    if (selector === void 0) {
      selector = '';
    }
    return [...element.children].filter(el => el.matches(selector));
  }
  function showWarning(text) {
    try {
      console.warn(text);
      return;
    } catch (err) {
      // err
    }
  }
  function utils_createElement(tag, classes) {
    if (classes === void 0) {
      classes = [];
    }
    const el = document.createElement(tag);
    el.classList.add(...(Array.isArray(classes) ? classes : utils_classesToTokens(classes)));
    return el;
  }
  function utils_elementOffset(el) {
    const window = getWindow();
    const document = getDocument();
    const box = el.getBoundingClientRect();
    const body = document.body;
    const clientTop = el.clientTop || body.clientTop || 0;
    const clientLeft = el.clientLeft || body.clientLeft || 0;
    const scrollTop = el === window ? window.scrollY : el.scrollTop;
    const scrollLeft = el === window ? window.scrollX : el.scrollLeft;
    return {
      top: box.top + scrollTop - clientTop,
      left: box.left + scrollLeft - clientLeft
    };
  }
  function elementPrevAll(el, selector) {
    const prevEls = [];
    while (el.previousElementSibling) {
      const prev = el.previousElementSibling; // eslint-disable-line
      if (selector) {
        if (prev.matches(selector)) prevEls.push(prev);
      } else prevEls.push(prev);
      el = prev;
    }
    return prevEls;
  }
  function elementNextAll(el, selector) {
    const nextEls = [];
    while (el.nextElementSibling) {
      const next = el.nextElementSibling; // eslint-disable-line
      if (selector) {
        if (next.matches(selector)) nextEls.push(next);
      } else nextEls.push(next);
      el = next;
    }
    return nextEls;
  }
  function elementStyle(el, prop) {
    const window = ssr_window_esm_getWindow();
    return window.getComputedStyle(el, null).getPropertyValue(prop);
  }
  function utils_elementIndex(el) {
    let child = el;
    let i;
    if (child) {
      i = 0;
      // eslint-disable-next-line
      while ((child = child.previousSibling) !== null) {
        if (child.nodeType === 1) i += 1;
      }
      return i;
    }
    return undefined;
  }
  function utils_elementParents(el, selector) {
    const parents = []; // eslint-disable-line
    let parent = el.parentElement; // eslint-disable-line
    while (parent) {
      if (selector) {
        if (parent.matches(selector)) parents.push(parent);
      } else {
        parents.push(parent);
      }
      parent = parent.parentElement;
    }
    return parents;
  }
  function utils_elementTransitionEnd(el, callback) {
    function fireCallBack(e) {
      if (e.target !== el) return;
      callback.call(el, e);
      el.removeEventListener('transitionend', fireCallBack);
    }
    if (callback) {
      el.addEventListener('transitionend', fireCallBack);
    }
  }
  function elementOuterSize(el, size, includeMargins) {
    const window = ssr_window_esm_getWindow();
    if (includeMargins) {
      return el[size === 'width' ? 'offsetWidth' : 'offsetHeight'] + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-right' : 'margin-top')) + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-left' : 'margin-bottom'));
    }
    return el.offsetWidth;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/swiper-core.mjs
  
  
  
  let support;
  function calcSupport() {
    const window = ssr_window_esm_getWindow();
    const document = ssr_window_esm_getDocument();
    return {
      smoothScroll: document.documentElement && document.documentElement.style && 'scrollBehavior' in document.documentElement.style,
      touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch)
    };
  }
  function getSupport() {
    if (!support) {
      support = calcSupport();
    }
    return support;
  }
  
  let deviceCached;
  function calcDevice(_temp) {
    let {
      userAgent
    } = _temp === void 0 ? {} : _temp;
    const support = getSupport();
    const window = ssr_window_esm_getWindow();
    const platform = window.navigator.platform;
    const ua = userAgent || window.navigator.userAgent;
    const device = {
      ios: false,
      android: false
    };
    const screenWidth = window.screen.width;
    const screenHeight = window.screen.height;
    const android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
    let ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
    const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
    const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
    const windows = platform === 'Win32';
    let macos = platform === 'MacIntel';
  
    // iPadOs 13 fix
    const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];
    if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {
      ipad = ua.match(/(Version)\/([\d.]+)/);
      if (!ipad) ipad = [0, 1, '13_0_0'];
      macos = false;
    }
  
    // Android
    if (android && !windows) {
      device.os = 'android';
      device.android = true;
    }
    if (ipad || iphone || ipod) {
      device.os = 'ios';
      device.ios = true;
    }
  
    // Export object
    return device;
  }
  function getDevice(overrides) {
    if (overrides === void 0) {
      overrides = {};
    }
    if (!deviceCached) {
      deviceCached = calcDevice(overrides);
    }
    return deviceCached;
  }
  
  let swiper_core_browser;
  function calcBrowser() {
    const window = ssr_window_esm_getWindow();
    let needPerspectiveFix = false;
    function isSafari() {
      const ua = window.navigator.userAgent.toLowerCase();
      return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
    }
    if (isSafari()) {
      const ua = String(window.navigator.userAgent);
      if (ua.includes('Version/')) {
        const [major, minor] = ua.split('Version/')[1].split(' ')[0].split('.').map(num => Number(num));
        needPerspectiveFix = major < 16 || major === 16 && minor < 2;
      }
    }
    return {
      isSafari: needPerspectiveFix || isSafari(),
      needPerspectiveFix,
      isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
    };
  }
  function getBrowser() {
    if (!swiper_core_browser) {
      swiper_core_browser = calcBrowser();
    }
    return swiper_core_browser;
  }
  
  function Resize(_ref) {
    let {
      swiper,
      on,
      emit
    } = _ref;
    const window = ssr_window_esm_getWindow();
    let observer = null;
    let animationFrame = null;
    const resizeHandler = () => {
      if (!swiper || swiper.destroyed || !swiper.initialized) return;
      emit('beforeResize');
      emit('resize');
    };
    const createObserver = () => {
      if (!swiper || swiper.destroyed || !swiper.initialized) return;
      observer = new ResizeObserver(entries => {
        animationFrame = window.requestAnimationFrame(() => {
          const {
            width,
            height
          } = swiper;
          let newWidth = width;
          let newHeight = height;
          entries.forEach(_ref2 => {
            let {
              contentBoxSize,
              contentRect,
              target
            } = _ref2;
            if (target && target !== swiper.el) return;
            newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
            newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
          });
          if (newWidth !== width || newHeight !== height) {
            resizeHandler();
          }
        });
      });
      observer.observe(swiper.el);
    };
    const removeObserver = () => {
      if (animationFrame) {
        window.cancelAnimationFrame(animationFrame);
      }
      if (observer && observer.unobserve && swiper.el) {
        observer.unobserve(swiper.el);
        observer = null;
      }
    };
    const orientationChangeHandler = () => {
      if (!swiper || swiper.destroyed || !swiper.initialized) return;
      emit('orientationchange');
    };
    on('init', () => {
      if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {
        createObserver();
        return;
      }
      window.addEventListener('resize', resizeHandler);
      window.addEventListener('orientationchange', orientationChangeHandler);
    });
    on('destroy', () => {
      removeObserver();
      window.removeEventListener('resize', resizeHandler);
      window.removeEventListener('orientationchange', orientationChangeHandler);
    });
  }
  
  function swiper_core_Observer(_ref) {
    let {
      swiper,
      extendParams,
      on,
      emit
    } = _ref;
    const observers = [];
    const window = ssr_window_esm_getWindow();
    const attach = function (target, options) {
      if (options === void 0) {
        options = {};
      }
      const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
      const observer = new ObserverFunc(mutations => {
        // The observerUpdate event should only be triggered
        // once despite the number of mutations.  Additional
        // triggers are redundant and are very costly
        if (swiper.__preventObserver__) return;
        if (mutations.length === 1) {
          emit('observerUpdate', mutations[0]);
          return;
        }
        const observerUpdate = function observerUpdate() {
          emit('observerUpdate', mutations[0]);
        };
        if (window.requestAnimationFrame) {
          window.requestAnimationFrame(observerUpdate);
        } else {
          window.setTimeout(observerUpdate, 0);
        }
      });
      observer.observe(target, {
        attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
        childList: typeof options.childList === 'undefined' ? true : options.childList,
        characterData: typeof options.characterData === 'undefined' ? true : options.characterData
      });
      observers.push(observer);
    };
    const init = () => {
      if (!swiper.params.observer) return;
      if (swiper.params.observeParents) {
        const containerParents = utils_elementParents(swiper.hostEl);
        for (let i = 0; i < containerParents.length; i += 1) {
          attach(containerParents[i]);
        }
      }
      // Observe container
      attach(swiper.hostEl, {
        childList: swiper.params.observeSlideChildren
      });
  
      // Observe wrapper
      attach(swiper.wrapperEl, {
        attributes: false
      });
    };
    const destroy = () => {
      observers.forEach(observer => {
        observer.disconnect();
      });
      observers.splice(0, observers.length);
    };
    extendParams({
      observer: false,
      observeParents: false,
      observeSlideChildren: false
    });
    on('init', init);
    on('destroy', destroy);
  }
  
  /* eslint-disable no-underscore-dangle */
  
  var eventsEmitter = {
    on(events, handler, priority) {
      const self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (typeof handler !== 'function') return self;
      const method = priority ? 'unshift' : 'push';
      events.split(' ').forEach(event => {
        if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
        self.eventsListeners[event][method](handler);
      });
      return self;
    },
    once(events, handler, priority) {
      const self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (typeof handler !== 'function') return self;
      function onceHandler() {
        self.off(events, onceHandler);
        if (onceHandler.__emitterProxy) {
          delete onceHandler.__emitterProxy;
        }
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        handler.apply(self, args);
      }
      onceHandler.__emitterProxy = handler;
      return self.on(events, onceHandler, priority);
    },
    onAny(handler, priority) {
      const self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (typeof handler !== 'function') return self;
      const method = priority ? 'unshift' : 'push';
      if (self.eventsAnyListeners.indexOf(handler) < 0) {
        self.eventsAnyListeners[method](handler);
      }
      return self;
    },
    offAny(handler) {
      const self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (!self.eventsAnyListeners) return self;
      const index = self.eventsAnyListeners.indexOf(handler);
      if (index >= 0) {
        self.eventsAnyListeners.splice(index, 1);
      }
      return self;
    },
    off(events, handler) {
      const self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (!self.eventsListeners) return self;
      events.split(' ').forEach(event => {
        if (typeof handler === 'undefined') {
          self.eventsListeners[event] = [];
        } else if (self.eventsListeners[event]) {
          self.eventsListeners[event].forEach((eventHandler, index) => {
            if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
              self.eventsListeners[event].splice(index, 1);
            }
          });
        }
      });
      return self;
    },
    emit() {
      const self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (!self.eventsListeners) return self;
      let events;
      let data;
      let context;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      if (typeof args[0] === 'string' || Array.isArray(args[0])) {
        events = args[0];
        data = args.slice(1, args.length);
        context = self;
      } else {
        events = args[0].events;
        data = args[0].data;
        context = args[0].context || self;
      }
      data.unshift(context);
      const eventsArray = Array.isArray(events) ? events : events.split(' ');
      eventsArray.forEach(event => {
        if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
          self.eventsAnyListeners.forEach(eventHandler => {
            eventHandler.apply(context, [event, ...data]);
          });
        }
        if (self.eventsListeners && self.eventsListeners[event]) {
          self.eventsListeners[event].forEach(eventHandler => {
            eventHandler.apply(context, data);
          });
        }
      });
      return self;
    }
  };
  
  function updateSize() {
    const swiper = this;
    let width;
    let height;
    const el = swiper.el;
    if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {
      width = swiper.params.width;
    } else {
      width = el.clientWidth;
    }
    if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {
      height = swiper.params.height;
    } else {
      height = el.clientHeight;
    }
    if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
      return;
    }
  
    // Subtract paddings
    width = width - parseInt(elementStyle(el, 'padding-left') || 0, 10) - parseInt(elementStyle(el, 'padding-right') || 0, 10);
    height = height - parseInt(elementStyle(el, 'padding-top') || 0, 10) - parseInt(elementStyle(el, 'padding-bottom') || 0, 10);
    if (Number.isNaN(width)) width = 0;
    if (Number.isNaN(height)) height = 0;
    Object.assign(swiper, {
      width,
      height,
      size: swiper.isHorizontal() ? width : height
    });
  }
  
  function updateSlides() {
    const swiper = this;
    function getDirectionPropertyValue(node, label) {
      return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label)) || 0);
    }
    const params = swiper.params;
    const {
      wrapperEl,
      slidesEl,
      size: swiperSize,
      rtlTranslate: rtl,
      wrongRTL
    } = swiper;
    const isVirtual = swiper.virtual && params.virtual.enabled;
    const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
    const slides = utils_elementChildren(slidesEl, `.${swiper.params.slideClass}, swiper-slide`);
    const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
    let snapGrid = [];
    const slidesGrid = [];
    const slidesSizesGrid = [];
    let offsetBefore = params.slidesOffsetBefore;
    if (typeof offsetBefore === 'function') {
      offsetBefore = params.slidesOffsetBefore.call(swiper);
    }
    let offsetAfter = params.slidesOffsetAfter;
    if (typeof offsetAfter === 'function') {
      offsetAfter = params.slidesOffsetAfter.call(swiper);
    }
    const previousSnapGridLength = swiper.snapGrid.length;
    const previousSlidesGridLength = swiper.slidesGrid.length;
    let spaceBetween = params.spaceBetween;
    let slidePosition = -offsetBefore;
    let prevSlideSize = 0;
    let index = 0;
    if (typeof swiperSize === 'undefined') {
      return;
    }
    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
    } else if (typeof spaceBetween === 'string') {
      spaceBetween = parseFloat(spaceBetween);
    }
    swiper.virtualSize = -spaceBetween;
  
    // reset margins
    slides.forEach(slideEl => {
      if (rtl) {
        slideEl.style.marginLeft = '';
      } else {
        slideEl.style.marginRight = '';
      }
      slideEl.style.marginBottom = '';
      slideEl.style.marginTop = '';
    });
  
    // reset cssMode offsets
    if (params.centeredSlides && params.cssMode) {
      utils_setCSSProperty(wrapperEl, '--swiper-centered-offset-before', '');
      utils_setCSSProperty(wrapperEl, '--swiper-centered-offset-after', '');
    }
    const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;
    if (gridEnabled) {
      swiper.grid.initSlides(slides);
    } else if (swiper.grid) {
      swiper.grid.unsetSlides();
    }
  
    // Calc slides
    let slideSize;
    const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {
      return typeof params.breakpoints[key].slidesPerView !== 'undefined';
    }).length > 0;
    for (let i = 0; i < slidesLength; i += 1) {
      slideSize = 0;
      let slide;
      if (slides[i]) slide = slides[i];
      if (gridEnabled) {
        swiper.grid.updateSlide(i, slide, slides);
      }
      if (slides[i] && elementStyle(slide, 'display') === 'none') continue; // eslint-disable-line
  
      if (params.slidesPerView === 'auto') {
        if (shouldResetSlideSize) {
          slides[i].style[swiper.getDirectionLabel('width')] = ``;
        }
        const slideStyles = getComputedStyle(slide);
        const currentTransform = slide.style.transform;
        const currentWebKitTransform = slide.style.webkitTransform;
        if (currentTransform) {
          slide.style.transform = 'none';
        }
        if (currentWebKitTransform) {
          slide.style.webkitTransform = 'none';
        }
        if (params.roundLengths) {
          slideSize = swiper.isHorizontal() ? elementOuterSize(slide, 'width', true) : elementOuterSize(slide, 'height', true);
        } else {
          // eslint-disable-next-line
          const width = getDirectionPropertyValue(slideStyles, 'width');
          const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');
          const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');
          const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');
          const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');
          const boxSizing = slideStyles.getPropertyValue('box-sizing');
          if (boxSizing && boxSizing === 'border-box') {
            slideSize = width + marginLeft + marginRight;
          } else {
            const {
              clientWidth,
              offsetWidth
            } = slide;
            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
          }
        }
        if (currentTransform) {
          slide.style.transform = currentTransform;
        }
        if (currentWebKitTransform) {
          slide.style.webkitTransform = currentWebKitTransform;
        }
        if (params.roundLengths) slideSize = Math.floor(slideSize);
      } else {
        slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
        if (params.roundLengths) slideSize = Math.floor(slideSize);
        if (slides[i]) {
          slides[i].style[swiper.getDirectionLabel('width')] = `${slideSize}px`;
        }
      }
      if (slides[i]) {
        slides[i].swiperSlideSize = slideSize;
      }
      slidesSizesGrid.push(slideSize);
      if (params.centeredSlides) {
        slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
        if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
        if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
        if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
        if (params.roundLengths) slidePosition = Math.floor(slidePosition);
        if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
        slidesGrid.push(slidePosition);
      } else {
        if (params.roundLengths) slidePosition = Math.floor(slidePosition);
        if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
        slidesGrid.push(slidePosition);
        slidePosition = slidePosition + slideSize + spaceBetween;
      }
      swiper.virtualSize += slideSize + spaceBetween;
      prevSlideSize = slideSize;
      index += 1;
    }
    swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
    if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
      wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;
    }
    if (params.setWrapperSize) {
      wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;
    }
    if (gridEnabled) {
      swiper.grid.updateWrapperSize(slideSize, snapGrid);
    }
  
    // Remove last grid elements depending on width
    if (!params.centeredSlides) {
      const newSlidesGrid = [];
      for (let i = 0; i < snapGrid.length; i += 1) {
        let slidesGridItem = snapGrid[i];
        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[i] <= swiper.virtualSize - swiperSize) {
          newSlidesGrid.push(slidesGridItem);
        }
      }
      snapGrid = newSlidesGrid;
      if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
        snapGrid.push(swiper.virtualSize - swiperSize);
      }
    }
    if (isVirtual && params.loop) {
      const size = slidesSizesGrid[0] + spaceBetween;
      if (params.slidesPerGroup > 1) {
        const groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);
        const groupSize = size * params.slidesPerGroup;
        for (let i = 0; i < groups; i += 1) {
          snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);
        }
      }
      for (let i = 0; i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i += 1) {
        if (params.slidesPerGroup === 1) {
          snapGrid.push(snapGrid[snapGrid.length - 1] + size);
        }
        slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);
        swiper.virtualSize += size;
      }
    }
    if (snapGrid.length === 0) snapGrid = [0];
    if (spaceBetween !== 0) {
      const key = swiper.isHorizontal() && rtl ? 'marginLeft' : swiper.getDirectionLabel('marginRight');
      slides.filter((_, slideIndex) => {
        if (!params.cssMode || params.loop) return true;
        if (slideIndex === slides.length - 1) {
          return false;
        }
        return true;
      }).forEach(slideEl => {
        slideEl.style[key] = `${spaceBetween}px`;
      });
    }
    if (params.centeredSlides && params.centeredSlidesBounds) {
      let allSlidesSize = 0;
      slidesSizesGrid.forEach(slideSizeValue => {
        allSlidesSize += slideSizeValue + (spaceBetween || 0);
      });
      allSlidesSize -= spaceBetween;
      const maxSnap = allSlidesSize - swiperSize;
      snapGrid = snapGrid.map(snap => {
        if (snap <= 0) return -offsetBefore;
        if (snap > maxSnap) return maxSnap + offsetAfter;
        return snap;
      });
    }
    if (params.centerInsufficientSlides) {
      let allSlidesSize = 0;
      slidesSizesGrid.forEach(slideSizeValue => {
        allSlidesSize += slideSizeValue + (spaceBetween || 0);
      });
      allSlidesSize -= spaceBetween;
      if (allSlidesSize < swiperSize) {
        const allSlidesOffset = (swiperSize - allSlidesSize) / 2;
        snapGrid.forEach((snap, snapIndex) => {
          snapGrid[snapIndex] = snap - allSlidesOffset;
        });
        slidesGrid.forEach((snap, snapIndex) => {
          slidesGrid[snapIndex] = snap + allSlidesOffset;
        });
      }
    }
    Object.assign(swiper, {
      slides,
      snapGrid,
      slidesGrid,
      slidesSizesGrid
    });
    if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {
      utils_setCSSProperty(wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);
      utils_setCSSProperty(wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);
      const addToSnapGrid = -swiper.snapGrid[0];
      const addToSlidesGrid = -swiper.slidesGrid[0];
      swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);
      swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);
    }
    if (slidesLength !== previousSlidesLength) {
      swiper.emit('slidesLengthChange');
    }
    if (snapGrid.length !== previousSnapGridLength) {
      if (swiper.params.watchOverflow) swiper.checkOverflow();
      swiper.emit('snapGridLengthChange');
    }
    if (slidesGrid.length !== previousSlidesGridLength) {
      swiper.emit('slidesGridLengthChange');
    }
    if (params.watchSlidesProgress) {
      swiper.updateSlidesOffset();
    }
    if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {
      const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;
      const hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);
      if (slidesLength <= params.maxBackfaceHiddenSlides) {
        if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);
      } else if (hasClassBackfaceClassAdded) {
        swiper.el.classList.remove(backFaceHiddenClass);
      }
    }
  }
  
  function updateAutoHeight(speed) {
    const swiper = this;
    const activeSlides = [];
    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    let newHeight = 0;
    let i;
    if (typeof speed === 'number') {
      swiper.setTransition(speed);
    } else if (speed === true) {
      swiper.setTransition(swiper.params.speed);
    }
    const getSlideByIndex = index => {
      if (isVirtual) {
        return swiper.slides[swiper.getSlideIndexByData(index)];
      }
      return swiper.slides[index];
    };
    // Find slides currently in view
    if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
      if (swiper.params.centeredSlides) {
        (swiper.visibleSlides || []).forEach(slide => {
          activeSlides.push(slide);
        });
      } else {
        for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
          const index = swiper.activeIndex + i;
          if (index > swiper.slides.length && !isVirtual) break;
          activeSlides.push(getSlideByIndex(index));
        }
      }
    } else {
      activeSlides.push(getSlideByIndex(swiper.activeIndex));
    }
  
    // Find new height from highest slide in view
    for (i = 0; i < activeSlides.length; i += 1) {
      if (typeof activeSlides[i] !== 'undefined') {
        const height = activeSlides[i].offsetHeight;
        newHeight = height > newHeight ? height : newHeight;
      }
    }
  
    // Update Height
    if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;
  }
  
  function updateSlidesOffset() {
    const swiper = this;
    const slides = swiper.slides;
    // eslint-disable-next-line
    const minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;
    for (let i = 0; i < slides.length; i += 1) {
      slides[i].swiperSlideOffset = (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();
    }
  }
  
  function updateSlidesProgress(translate) {
    if (translate === void 0) {
      translate = this && this.translate || 0;
    }
    const swiper = this;
    const params = swiper.params;
    const {
      slides,
      rtlTranslate: rtl,
      snapGrid
    } = swiper;
    if (slides.length === 0) return;
    if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();
    let offsetCenter = -translate;
    if (rtl) offsetCenter = translate;
  
    // Visible Slides
    slides.forEach(slideEl => {
      slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass);
    });
    swiper.visibleSlidesIndexes = [];
    swiper.visibleSlides = [];
    let spaceBetween = params.spaceBetween;
    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;
    } else if (typeof spaceBetween === 'string') {
      spaceBetween = parseFloat(spaceBetween);
    }
    for (let i = 0; i < slides.length; i += 1) {
      const slide = slides[i];
      let slideOffset = slide.swiperSlideOffset;
      if (params.cssMode && params.centeredSlides) {
        slideOffset -= slides[0].swiperSlideOffset;
      }
      const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);
      const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);
      const slideBefore = -(offsetCenter - slideOffset);
      const slideAfter = slideBefore + swiper.slidesSizesGrid[i];
      const isFullyVisible = slideBefore >= 0 && slideBefore <= swiper.size - swiper.slidesSizesGrid[i];
      const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;
      if (isVisible) {
        swiper.visibleSlides.push(slide);
        swiper.visibleSlidesIndexes.push(i);
        slides[i].classList.add(params.slideVisibleClass);
      }
      if (isFullyVisible) {
        slides[i].classList.add(params.slideFullyVisibleClass);
      }
      slide.progress = rtl ? -slideProgress : slideProgress;
      slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;
    }
  }
  
  function updateProgress(translate) {
    const swiper = this;
    if (typeof translate === 'undefined') {
      const multiplier = swiper.rtlTranslate ? -1 : 1;
      // eslint-disable-next-line
      translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
    }
    const params = swiper.params;
    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    let {
      progress,
      isBeginning,
      isEnd,
      progressLoop
    } = swiper;
    const wasBeginning = isBeginning;
    const wasEnd = isEnd;
    if (translatesDiff === 0) {
      progress = 0;
      isBeginning = true;
      isEnd = true;
    } else {
      progress = (translate - swiper.minTranslate()) / translatesDiff;
      const isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;
      const isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;
      isBeginning = isBeginningRounded || progress <= 0;
      isEnd = isEndRounded || progress >= 1;
      if (isBeginningRounded) progress = 0;
      if (isEndRounded) progress = 1;
    }
    if (params.loop) {
      const firstSlideIndex = swiper.getSlideIndexByData(0);
      const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);
      const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];
      const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];
      const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];
      const translateAbs = Math.abs(translate);
      if (translateAbs >= firstSlideTranslate) {
        progressLoop = (translateAbs - firstSlideTranslate) / translateMax;
      } else {
        progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;
      }
      if (progressLoop > 1) progressLoop -= 1;
    }
    Object.assign(swiper, {
      progress,
      progressLoop,
      isBeginning,
      isEnd
    });
    if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);
    if (isBeginning && !wasBeginning) {
      swiper.emit('reachBeginning toEdge');
    }
    if (isEnd && !wasEnd) {
      swiper.emit('reachEnd toEdge');
    }
    if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
      swiper.emit('fromEdge');
    }
    swiper.emit('progress', progress);
  }
  
  function updateSlidesClasses() {
    const swiper = this;
    const {
      slides,
      params,
      slidesEl,
      activeIndex
    } = swiper;
    const isVirtual = swiper.virtual && params.virtual.enabled;
    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
    const getFilteredSlide = selector => {
      return utils_elementChildren(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];
    };
    slides.forEach(slideEl => {
      slideEl.classList.remove(params.slideActiveClass, params.slideNextClass, params.slidePrevClass);
    });
    let activeSlide;
    let prevSlide;
    let nextSlide;
    if (isVirtual) {
      if (params.loop) {
        let slideIndex = activeIndex - swiper.virtual.slidesBefore;
        if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;
        if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;
        activeSlide = getFilteredSlide(`[data-swiper-slide-index="${slideIndex}"]`);
      } else {
        activeSlide = getFilteredSlide(`[data-swiper-slide-index="${activeIndex}"]`);
      }
    } else {
      if (gridEnabled) {
        activeSlide = slides.filter(slideEl => slideEl.column === activeIndex)[0];
        nextSlide = slides.filter(slideEl => slideEl.column === activeIndex + 1)[0];
        prevSlide = slides.filter(slideEl => slideEl.column === activeIndex - 1)[0];
      } else {
        activeSlide = slides[activeIndex];
      }
    }
    if (activeSlide) {
      // Active classes
      activeSlide.classList.add(params.slideActiveClass);
      if (gridEnabled) {
        if (nextSlide) {
          nextSlide.classList.add(params.slideNextClass);
        }
        if (prevSlide) {
          prevSlide.classList.add(params.slidePrevClass);
        }
      } else {
        // Next Slide
        nextSlide = elementNextAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
        if (params.loop && !nextSlide) {
          nextSlide = slides[0];
        }
        if (nextSlide) {
          nextSlide.classList.add(params.slideNextClass);
        }
  
        // Prev Slide
        prevSlide = elementPrevAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
        if (params.loop && !prevSlide === 0) {
          prevSlide = slides[slides.length - 1];
        }
        if (prevSlide) {
          prevSlide.classList.add(params.slidePrevClass);
        }
      }
    }
    swiper.emitSlidesClasses();
  }
  
  const processLazyPreloader = (swiper, imageEl) => {
    if (!swiper || swiper.destroyed || !swiper.params) return;
    const slideSelector = () => swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;
    const slideEl = imageEl.closest(slideSelector());
    if (slideEl) {
      let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);
      if (!lazyEl && swiper.isElement) {
        if (slideEl.shadowRoot) {
          lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);
        } else {
          // init later
          requestAnimationFrame(() => {
            if (slideEl.shadowRoot) {
              lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);
              if (lazyEl) lazyEl.remove();
            }
          });
        }
      }
      if (lazyEl) lazyEl.remove();
    }
  };
  const unlazy = (swiper, index) => {
    if (!swiper.slides[index]) return;
    const imageEl = swiper.slides[index].querySelector('[loading="lazy"]');
    if (imageEl) imageEl.removeAttribute('loading');
  };
  const preload = swiper => {
    if (!swiper || swiper.destroyed || !swiper.params) return;
    let amount = swiper.params.lazyPreloadPrevNext;
    const len = swiper.slides.length;
    if (!len || !amount || amount < 0) return;
    amount = Math.min(amount, len);
    const slidesPerView = swiper.params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);
    const activeIndex = swiper.activeIndex;
    if (swiper.params.grid && swiper.params.grid.rows > 1) {
      const activeColumn = activeIndex;
      const preloadColumns = [activeColumn - amount];
      preloadColumns.push(...Array.from({
        length: amount
      }).map((_, i) => {
        return activeColumn + slidesPerView + i;
      }));
      swiper.slides.forEach((slideEl, i) => {
        if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);
      });
      return;
    }
    const slideIndexLastInView = activeIndex + slidesPerView - 1;
    if (swiper.params.rewind || swiper.params.loop) {
      for (let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1) {
        const realIndex = (i % len + len) % len;
        if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);
      }
    } else {
      for (let i = Math.max(activeIndex - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1) {
        if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {
          unlazy(swiper, i);
        }
      }
    }
  };
  
  function getActiveIndexByTranslate(swiper) {
    const {
      slidesGrid,
      params
    } = swiper;
    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
    let activeIndex;
    for (let i = 0; i < slidesGrid.length; i += 1) {
      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
          activeIndex = i;
        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
          activeIndex = i + 1;
        }
      } else if (translate >= slidesGrid[i]) {
        activeIndex = i;
      }
    }
    // Normalize slideIndex
    if (params.normalizeSlideIndex) {
      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
    }
    return activeIndex;
  }
  function updateActiveIndex(newActiveIndex) {
    const swiper = this;
    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
    const {
      snapGrid,
      params,
      activeIndex: previousIndex,
      realIndex: previousRealIndex,
      snapIndex: previousSnapIndex
    } = swiper;
    let activeIndex = newActiveIndex;
    let snapIndex;
    const getVirtualRealIndex = aIndex => {
      let realIndex = aIndex - swiper.virtual.slidesBefore;
      if (realIndex < 0) {
        realIndex = swiper.virtual.slides.length + realIndex;
      }
      if (realIndex >= swiper.virtual.slides.length) {
        realIndex -= swiper.virtual.slides.length;
      }
      return realIndex;
    };
    if (typeof activeIndex === 'undefined') {
      activeIndex = getActiveIndexByTranslate(swiper);
    }
    if (snapGrid.indexOf(translate) >= 0) {
      snapIndex = snapGrid.indexOf(translate);
    } else {
      const skip = Math.min(params.slidesPerGroupSkip, activeIndex);
      snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
    }
    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
    if (activeIndex === previousIndex && !swiper.params.loop) {
      if (snapIndex !== previousSnapIndex) {
        swiper.snapIndex = snapIndex;
        swiper.emit('snapIndexChange');
      }
      return;
    }
    if (activeIndex === previousIndex && swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {
      swiper.realIndex = getVirtualRealIndex(activeIndex);
      return;
    }
    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
  
    // Get real index
    let realIndex;
    if (swiper.virtual && params.virtual.enabled && params.loop) {
      realIndex = getVirtualRealIndex(activeIndex);
    } else if (gridEnabled) {
      const firstSlideInColumn = swiper.slides.filter(slideEl => slideEl.column === activeIndex)[0];
      let activeSlideIndex = parseInt(firstSlideInColumn.getAttribute('data-swiper-slide-index'), 10);
      if (Number.isNaN(activeSlideIndex)) {
        activeSlideIndex = Math.max(swiper.slides.indexOf(firstSlideInColumn), 0);
      }
      realIndex = Math.floor(activeSlideIndex / params.grid.rows);
    } else if (swiper.slides[activeIndex]) {
      const slideIndex = swiper.slides[activeIndex].getAttribute('data-swiper-slide-index');
      if (slideIndex) {
        realIndex = parseInt(slideIndex, 10);
      } else {
        realIndex = activeIndex;
      }
    } else {
      realIndex = activeIndex;
    }
    Object.assign(swiper, {
      previousSnapIndex,
      snapIndex,
      previousRealIndex,
      realIndex,
      previousIndex,
      activeIndex
    });
    if (swiper.initialized) {
      preload(swiper);
    }
    swiper.emit('activeIndexChange');
    swiper.emit('snapIndexChange');
    if (swiper.initialized || swiper.params.runCallbacksOnInit) {
      if (previousRealIndex !== realIndex) {
        swiper.emit('realIndexChange');
      }
      swiper.emit('slideChange');
    }
  }
  
  function updateClickedSlide(el, path) {
    const swiper = this;
    const params = swiper.params;
    let slide = el.closest(`.${params.slideClass}, swiper-slide`);
    if (!slide && swiper.isElement && path && path.length > 1 && path.includes(el)) {
      [...path.slice(path.indexOf(el) + 1, path.length)].forEach(pathEl => {
        if (!slide && pathEl.matches && pathEl.matches(`.${params.slideClass}, swiper-slide`)) {
          slide = pathEl;
        }
      });
    }
    let slideFound = false;
    let slideIndex;
    if (slide) {
      for (let i = 0; i < swiper.slides.length; i += 1) {
        if (swiper.slides[i] === slide) {
          slideFound = true;
          slideIndex = i;
          break;
        }
      }
    }
    if (slide && slideFound) {
      swiper.clickedSlide = slide;
      if (swiper.virtual && swiper.params.virtual.enabled) {
        swiper.clickedIndex = parseInt(slide.getAttribute('data-swiper-slide-index'), 10);
      } else {
        swiper.clickedIndex = slideIndex;
      }
    } else {
      swiper.clickedSlide = undefined;
      swiper.clickedIndex = undefined;
      return;
    }
    if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
      swiper.slideToClickedSlide();
    }
  }
  
  var update = {
    updateSize,
    updateSlides,
    updateAutoHeight,
    updateSlidesOffset,
    updateSlidesProgress,
    updateProgress,
    updateSlidesClasses,
    updateActiveIndex,
    updateClickedSlide
  };
  
  function getSwiperTranslate(axis) {
    if (axis === void 0) {
      axis = this.isHorizontal() ? 'x' : 'y';
    }
    const swiper = this;
    const {
      params,
      rtlTranslate: rtl,
      translate,
      wrapperEl
    } = swiper;
    if (params.virtualTranslate) {
      return rtl ? -translate : translate;
    }
    if (params.cssMode) {
      return translate;
    }
    let currentTranslate = utils_getTranslate(wrapperEl, axis);
    currentTranslate += swiper.cssOverflowAdjustment();
    if (rtl) currentTranslate = -currentTranslate;
    return currentTranslate || 0;
  }
  
  function setTranslate(translate, byController) {
    const swiper = this;
    const {
      rtlTranslate: rtl,
      params,
      wrapperEl,
      progress
    } = swiper;
    let x = 0;
    let y = 0;
    const z = 0;
    if (swiper.isHorizontal()) {
      x = rtl ? -translate : translate;
    } else {
      y = translate;
    }
    if (params.roundLengths) {
      x = Math.floor(x);
      y = Math.floor(y);
    }
    swiper.previousTranslate = swiper.translate;
    swiper.translate = swiper.isHorizontal() ? x : y;
    if (params.cssMode) {
      wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
    } else if (!params.virtualTranslate) {
      if (swiper.isHorizontal()) {
        x -= swiper.cssOverflowAdjustment();
      } else {
        y -= swiper.cssOverflowAdjustment();
      }
      wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;
    }
  
    // Check if we need to update progress
    let newProgress;
    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    if (translatesDiff === 0) {
      newProgress = 0;
    } else {
      newProgress = (translate - swiper.minTranslate()) / translatesDiff;
    }
    if (newProgress !== progress) {
      swiper.updateProgress(translate);
    }
    swiper.emit('setTranslate', swiper.translate, byController);
  }
  
  function minTranslate() {
    return -this.snapGrid[0];
  }
  
  function maxTranslate() {
    return -this.snapGrid[this.snapGrid.length - 1];
  }
  
  function translateTo(translate, speed, runCallbacks, translateBounds, internal) {
    if (translate === void 0) {
      translate = 0;
    }
    if (speed === void 0) {
      speed = this.params.speed;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    if (translateBounds === void 0) {
      translateBounds = true;
    }
    const swiper = this;
    const {
      params,
      wrapperEl
    } = swiper;
    if (swiper.animating && params.preventInteractionOnTransition) {
      return false;
    }
    const minTranslate = swiper.minTranslate();
    const maxTranslate = swiper.maxTranslate();
    let newTranslate;
    if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate;
  
    // Update progress
    swiper.updateProgress(newTranslate);
    if (params.cssMode) {
      const isH = swiper.isHorizontal();
      if (speed === 0) {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
      } else {
        if (!swiper.support.smoothScroll) {
          animateCSSModeScroll({
            swiper,
            targetPosition: -newTranslate,
            side: isH ? 'left' : 'top'
          });
          return true;
        }
        wrapperEl.scrollTo({
          [isH ? 'left' : 'top']: -newTranslate,
          behavior: 'smooth'
        });
      }
      return true;
    }
    if (speed === 0) {
      swiper.setTransition(0);
      swiper.setTranslate(newTranslate);
      if (runCallbacks) {
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.emit('transitionEnd');
      }
    } else {
      swiper.setTransition(speed);
      swiper.setTranslate(newTranslate);
      if (runCallbacks) {
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.emit('transitionStart');
      }
      if (!swiper.animating) {
        swiper.animating = true;
        if (!swiper.onTranslateToWrapperTransitionEnd) {
          swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
            if (!swiper || swiper.destroyed) return;
            if (e.target !== this) return;
            swiper.wrapperEl.removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
            swiper.onTranslateToWrapperTransitionEnd = null;
            delete swiper.onTranslateToWrapperTransitionEnd;
            if (runCallbacks) {
              swiper.emit('transitionEnd');
            }
          };
        }
        swiper.wrapperEl.addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
      }
    }
    return true;
  }
  
  var translate = {
    getTranslate: getSwiperTranslate,
    setTranslate,
    minTranslate,
    maxTranslate,
    translateTo
  };
  
  function setTransition(duration, byController) {
    const swiper = this;
    if (!swiper.params.cssMode) {
      swiper.wrapperEl.style.transitionDuration = `${duration}ms`;
      swiper.wrapperEl.style.transitionDelay = duration === 0 ? `0ms` : '';
    }
    swiper.emit('setTransition', duration, byController);
  }
  
  function transitionEmit(_ref) {
    let {
      swiper,
      runCallbacks,
      direction,
      step
    } = _ref;
    const {
      activeIndex,
      previousIndex
    } = swiper;
    let dir = direction;
    if (!dir) {
      if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
    }
    swiper.emit(`transition${step}`);
    if (runCallbacks && activeIndex !== previousIndex) {
      if (dir === 'reset') {
        swiper.emit(`slideResetTransition${step}`);
        return;
      }
      swiper.emit(`slideChangeTransition${step}`);
      if (dir === 'next') {
        swiper.emit(`slideNextTransition${step}`);
      } else {
        swiper.emit(`slidePrevTransition${step}`);
      }
    }
  }
  
  function transitionStart(runCallbacks, direction) {
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    const swiper = this;
    const {
      params
    } = swiper;
    if (params.cssMode) return;
    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }
    transitionEmit({
      swiper,
      runCallbacks,
      direction,
      step: 'Start'
    });
  }
  
  function transitionEnd(runCallbacks, direction) {
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    const swiper = this;
    const {
      params
    } = swiper;
    swiper.animating = false;
    if (params.cssMode) return;
    swiper.setTransition(0);
    transitionEmit({
      swiper,
      runCallbacks,
      direction,
      step: 'End'
    });
  }
  
  var transition = {
    setTransition,
    transitionStart,
    transitionEnd
  };
  
  function slideTo(index, speed, runCallbacks, internal, initial) {
    if (index === void 0) {
      index = 0;
    }
    if (speed === void 0) {
      speed = this.params.speed;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    if (typeof index === 'string') {
      index = parseInt(index, 10);
    }
    const swiper = this;
    let slideIndex = index;
    if (slideIndex < 0) slideIndex = 0;
    const {
      params,
      snapGrid,
      slidesGrid,
      previousIndex,
      activeIndex,
      rtlTranslate: rtl,
      wrapperEl,
      enabled
    } = swiper;
    if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {
      return false;
    }
    const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
    let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
    const translate = -snapGrid[snapIndex];
    // Normalize slideIndex
    if (params.normalizeSlideIndex) {
      for (let i = 0; i < slidesGrid.length; i += 1) {
        const normalizedTranslate = -Math.floor(translate * 100);
        const normalizedGrid = Math.floor(slidesGrid[i] * 100);
        const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);
        if (typeof slidesGrid[i + 1] !== 'undefined') {
          if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {
            slideIndex = i;
          } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {
            slideIndex = i + 1;
          }
        } else if (normalizedTranslate >= normalizedGrid) {
          slideIndex = i;
        }
      }
    }
    // Directions locks
    if (swiper.initialized && slideIndex !== activeIndex) {
      if (!swiper.allowSlideNext && (rtl ? translate > swiper.translate && translate > swiper.minTranslate() : translate < swiper.translate && translate < swiper.minTranslate())) {
        return false;
      }
      if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
        if ((activeIndex || 0) !== slideIndex) {
          return false;
        }
      }
    }
    if (slideIndex !== (previousIndex || 0) && runCallbacks) {
      swiper.emit('beforeSlideChangeStart');
    }
  
    // Update progress
    swiper.updateProgress(translate);
    let direction;
    if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset';
  
    // Update Index
    if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
      swiper.updateActiveIndex(slideIndex);
      // Update Height
      if (params.autoHeight) {
        swiper.updateAutoHeight();
      }
      swiper.updateSlidesClasses();
      if (params.effect !== 'slide') {
        swiper.setTranslate(translate);
      }
      if (direction !== 'reset') {
        swiper.transitionStart(runCallbacks, direction);
        swiper.transitionEnd(runCallbacks, direction);
      }
      return false;
    }
    if (params.cssMode) {
      const isH = swiper.isHorizontal();
      const t = rtl ? translate : -translate;
      if (speed === 0) {
        const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
        if (isVirtual) {
          swiper.wrapperEl.style.scrollSnapType = 'none';
          swiper._immediateVirtual = true;
        }
        if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {
          swiper._cssModeVirtualInitialSet = true;
          requestAnimationFrame(() => {
            wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
          });
        } else {
          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
        }
        if (isVirtual) {
          requestAnimationFrame(() => {
            swiper.wrapperEl.style.scrollSnapType = '';
            swiper._immediateVirtual = false;
          });
        }
      } else {
        if (!swiper.support.smoothScroll) {
          animateCSSModeScroll({
            swiper,
            targetPosition: t,
            side: isH ? 'left' : 'top'
          });
          return true;
        }
        wrapperEl.scrollTo({
          [isH ? 'left' : 'top']: t,
          behavior: 'smooth'
        });
      }
      return true;
    }
    swiper.setTransition(speed);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);
    if (speed === 0) {
      swiper.transitionEnd(runCallbacks, direction);
    } else if (!swiper.animating) {
      swiper.animating = true;
      if (!swiper.onSlideToWrapperTransitionEnd) {
        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.wrapperEl.removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.onSlideToWrapperTransitionEnd = null;
          delete swiper.onSlideToWrapperTransitionEnd;
          swiper.transitionEnd(runCallbacks, direction);
        };
      }
      swiper.wrapperEl.addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
    }
    return true;
  }
  
  function slideToLoop(index, speed, runCallbacks, internal) {
    if (index === void 0) {
      index = 0;
    }
    if (speed === void 0) {
      speed = this.params.speed;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    if (typeof index === 'string') {
      const indexAsNumber = parseInt(index, 10);
      index = indexAsNumber;
    }
    const swiper = this;
    const gridEnabled = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;
    let newIndex = index;
    if (swiper.params.loop) {
      if (swiper.virtual && swiper.params.virtual.enabled) {
        // eslint-disable-next-line
        newIndex = newIndex + swiper.virtual.slidesBefore;
      } else {
        let targetSlideIndex;
        if (gridEnabled) {
          const slideIndex = newIndex * swiper.params.grid.rows;
          targetSlideIndex = swiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === slideIndex)[0].column;
        } else {
          targetSlideIndex = swiper.getSlideIndexByData(newIndex);
        }
        const cols = gridEnabled ? Math.ceil(swiper.slides.length / swiper.params.grid.rows) : swiper.slides.length;
        const {
          centeredSlides
        } = swiper.params;
        let slidesPerView = swiper.params.slidesPerView;
        if (slidesPerView === 'auto') {
          slidesPerView = swiper.slidesPerViewDynamic();
        } else {
          slidesPerView = Math.ceil(parseFloat(swiper.params.slidesPerView, 10));
          if (centeredSlides && slidesPerView % 2 === 0) {
            slidesPerView = slidesPerView + 1;
          }
        }
        let needLoopFix = cols - targetSlideIndex < slidesPerView;
        if (centeredSlides) {
          needLoopFix = needLoopFix || targetSlideIndex < Math.ceil(slidesPerView / 2);
        }
        if (needLoopFix) {
          const direction = centeredSlides ? targetSlideIndex < swiper.activeIndex ? 'prev' : 'next' : targetSlideIndex - swiper.activeIndex - 1 < swiper.params.slidesPerView ? 'next' : 'prev';
          swiper.loopFix({
            direction,
            slideTo: true,
            activeSlideIndex: direction === 'next' ? targetSlideIndex + 1 : targetSlideIndex - cols + 1,
            slideRealIndex: direction === 'next' ? swiper.realIndex : undefined
          });
        }
        if (gridEnabled) {
          const slideIndex = newIndex * swiper.params.grid.rows;
          newIndex = swiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === slideIndex)[0].column;
        } else {
          newIndex = swiper.getSlideIndexByData(newIndex);
        }
      }
    }
    requestAnimationFrame(() => {
      swiper.slideTo(newIndex, speed, runCallbacks, internal);
    });
    return swiper;
  }
  
  /* eslint no-unused-vars: "off" */
  function slideNext(speed, runCallbacks, internal) {
    if (speed === void 0) {
      speed = this.params.speed;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    const swiper = this;
    const {
      enabled,
      params,
      animating
    } = swiper;
    if (!enabled) return swiper;
    let perGroup = params.slidesPerGroup;
    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {
      perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);
    }
    const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;
    const isVirtual = swiper.virtual && params.virtual.enabled;
    if (params.loop) {
      if (animating && !isVirtual && params.loopPreventsSliding) return false;
      swiper.loopFix({
        direction: 'next'
      });
      // eslint-disable-next-line
      swiper._clientLeft = swiper.wrapperEl.clientLeft;
      if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {
        requestAnimationFrame(() => {
          swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
        });
        return true;
      }
    }
    if (params.rewind && swiper.isEnd) {
      return swiper.slideTo(0, speed, runCallbacks, internal);
    }
    return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
  }
  
  /* eslint no-unused-vars: "off" */
  function slidePrev(speed, runCallbacks, internal) {
    if (speed === void 0) {
      speed = this.params.speed;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    const swiper = this;
    const {
      params,
      snapGrid,
      slidesGrid,
      rtlTranslate,
      enabled,
      animating
    } = swiper;
    if (!enabled) return swiper;
    const isVirtual = swiper.virtual && params.virtual.enabled;
    if (params.loop) {
      if (animating && !isVirtual && params.loopPreventsSliding) return false;
      swiper.loopFix({
        direction: 'prev'
      });
      // eslint-disable-next-line
      swiper._clientLeft = swiper.wrapperEl.clientLeft;
    }
    const translate = rtlTranslate ? swiper.translate : -swiper.translate;
    function normalize(val) {
      if (val < 0) return -Math.floor(Math.abs(val));
      return Math.floor(val);
    }
    const normalizedTranslate = normalize(translate);
    const normalizedSnapGrid = snapGrid.map(val => normalize(val));
    let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
    if (typeof prevSnap === 'undefined' && params.cssMode) {
      let prevSnapIndex;
      snapGrid.forEach((snap, snapIndex) => {
        if (normalizedTranslate >= snap) {
          // prevSnap = snap;
          prevSnapIndex = snapIndex;
        }
      });
      if (typeof prevSnapIndex !== 'undefined') {
        prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];
      }
    }
    let prevIndex = 0;
    if (typeof prevSnap !== 'undefined') {
      prevIndex = slidesGrid.indexOf(prevSnap);
      if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
      if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {
        prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;
        prevIndex = Math.max(prevIndex, 0);
      }
    }
    if (params.rewind && swiper.isBeginning) {
      const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
      return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
    } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {
      requestAnimationFrame(() => {
        swiper.slideTo(prevIndex, speed, runCallbacks, internal);
      });
      return true;
    }
    return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
  }
  
  /* eslint no-unused-vars: "off" */
  function slideReset(speed, runCallbacks, internal) {
    if (speed === void 0) {
      speed = this.params.speed;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    const swiper = this;
    return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
  }
  
  /* eslint no-unused-vars: "off" */
  function slideToClosest(speed, runCallbacks, internal, threshold) {
    if (speed === void 0) {
      speed = this.params.speed;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    if (threshold === void 0) {
      threshold = 0.5;
    }
    const swiper = this;
    let index = swiper.activeIndex;
    const skip = Math.min(swiper.params.slidesPerGroupSkip, index);
    const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
    if (translate >= swiper.snapGrid[snapIndex]) {
      // The current translate is on or after the current snap index, so the choice
      // is between the current index and the one after it.
      const currentSnap = swiper.snapGrid[snapIndex];
      const nextSnap = swiper.snapGrid[snapIndex + 1];
      if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
        index += swiper.params.slidesPerGroup;
      }
    } else {
      // The current translate is before the current snap index, so the choice
      // is between the current index and the one before it.
      const prevSnap = swiper.snapGrid[snapIndex - 1];
      const currentSnap = swiper.snapGrid[snapIndex];
      if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {
        index -= swiper.params.slidesPerGroup;
      }
    }
    index = Math.max(index, 0);
    index = Math.min(index, swiper.slidesGrid.length - 1);
    return swiper.slideTo(index, speed, runCallbacks, internal);
  }
  
  function slideToClickedSlide() {
    const swiper = this;
    const {
      params,
      slidesEl
    } = swiper;
    const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
    let slideToIndex = swiper.clickedIndex;
    let realIndex;
    const slideSelector = swiper.isElement ? `swiper-slide` : `.${params.slideClass}`;
    if (params.loop) {
      if (swiper.animating) return;
      realIndex = parseInt(swiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);
      if (params.centeredSlides) {
        if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
          swiper.loopFix();
          slideToIndex = swiper.getSlideIndex(utils_elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]);
          utils_nextTick(() => {
            swiper.slideTo(slideToIndex);
          });
        } else {
          swiper.slideTo(slideToIndex);
        }
      } else if (slideToIndex > swiper.slides.length - slidesPerView) {
        swiper.loopFix();
        slideToIndex = swiper.getSlideIndex(utils_elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index="${realIndex}"]`)[0]);
        utils_nextTick(() => {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else {
      swiper.slideTo(slideToIndex);
    }
  }
  
  var slide = {
    slideTo,
    slideToLoop,
    slideNext,
    slidePrev,
    slideReset,
    slideToClosest,
    slideToClickedSlide
  };
  
  function loopCreate(slideRealIndex) {
    const swiper = this;
    const {
      params,
      slidesEl
    } = swiper;
    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;
    const initSlides = () => {
      const slides = utils_elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);
      slides.forEach((el, index) => {
        el.setAttribute('data-swiper-slide-index', index);
      });
    };
    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
    const slidesPerGroup = params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);
    const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;
    const shouldFillGrid = gridEnabled && swiper.slides.length % params.grid.rows !== 0;
    const addBlankSlides = amountOfSlides => {
      for (let i = 0; i < amountOfSlides; i += 1) {
        const slideEl = swiper.isElement ? utils_createElement('swiper-slide', [params.slideBlankClass]) : utils_createElement('div', [params.slideClass, params.slideBlankClass]);
        swiper.slidesEl.append(slideEl);
      }
    };
    if (shouldFillGroup) {
      if (params.loopAddBlankSlides) {
        const slidesToAdd = slidesPerGroup - swiper.slides.length % slidesPerGroup;
        addBlankSlides(slidesToAdd);
        swiper.recalcSlides();
        swiper.updateSlides();
      } else {
        showWarning('Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');
      }
      initSlides();
    } else if (shouldFillGrid) {
      if (params.loopAddBlankSlides) {
        const slidesToAdd = params.grid.rows - swiper.slides.length % params.grid.rows;
        addBlankSlides(slidesToAdd);
        swiper.recalcSlides();
        swiper.updateSlides();
      } else {
        showWarning('Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');
      }
      initSlides();
    } else {
      initSlides();
    }
    swiper.loopFix({
      slideRealIndex,
      direction: params.centeredSlides ? undefined : 'next'
    });
  }
  
  function loopFix(_temp) {
    let {
      slideRealIndex,
      slideTo = true,
      direction,
      setTranslate,
      activeSlideIndex,
      byController,
      byMousewheel
    } = _temp === void 0 ? {} : _temp;
    const swiper = this;
    if (!swiper.params.loop) return;
    swiper.emit('beforeLoopFix');
    const {
      slides,
      allowSlidePrev,
      allowSlideNext,
      slidesEl,
      params
    } = swiper;
    const {
      centeredSlides
    } = params;
    swiper.allowSlidePrev = true;
    swiper.allowSlideNext = true;
    if (swiper.virtual && params.virtual.enabled) {
      if (slideTo) {
        if (!params.centeredSlides && swiper.snapIndex === 0) {
          swiper.slideTo(swiper.virtual.slides.length, 0, false, true);
        } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {
          swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);
        } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {
          swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);
        }
      }
      swiper.allowSlidePrev = allowSlidePrev;
      swiper.allowSlideNext = allowSlideNext;
      swiper.emit('loopFix');
      return;
    }
    let slidesPerView = params.slidesPerView;
    if (slidesPerView === 'auto') {
      slidesPerView = swiper.slidesPerViewDynamic();
    } else {
      slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));
      if (centeredSlides && slidesPerView % 2 === 0) {
        slidesPerView = slidesPerView + 1;
      }
    }
    const slidesPerGroup = params.slidesPerGroupAuto ? slidesPerView : params.slidesPerGroup;
    let loopedSlides = slidesPerGroup;
    if (loopedSlides % slidesPerGroup !== 0) {
      loopedSlides += slidesPerGroup - loopedSlides % slidesPerGroup;
    }
    loopedSlides += params.loopAdditionalSlides;
    swiper.loopedSlides = loopedSlides;
    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
    if (slides.length < slidesPerView + loopedSlides) {
      showWarning('Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters');
    } else if (gridEnabled && params.grid.fill === 'row') {
      showWarning('Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`');
    }
    const prependSlidesIndexes = [];
    const appendSlidesIndexes = [];
    let activeIndex = swiper.activeIndex;
    if (typeof activeSlideIndex === 'undefined') {
      activeSlideIndex = swiper.getSlideIndex(slides.filter(el => el.classList.contains(params.slideActiveClass))[0]);
    } else {
      activeIndex = activeSlideIndex;
    }
    const isNext = direction === 'next' || !direction;
    const isPrev = direction === 'prev' || !direction;
    let slidesPrepended = 0;
    let slidesAppended = 0;
    const cols = gridEnabled ? Math.ceil(slides.length / params.grid.rows) : slides.length;
    const activeColIndex = gridEnabled ? slides[activeSlideIndex].column : activeSlideIndex;
    const activeColIndexWithShift = activeColIndex + (centeredSlides && typeof setTranslate === 'undefined' ? -slidesPerView / 2 + 0.5 : 0);
    // prepend last slides before start
    if (activeColIndexWithShift < loopedSlides) {
      slidesPrepended = Math.max(loopedSlides - activeColIndexWithShift, slidesPerGroup);
      for (let i = 0; i < loopedSlides - activeColIndexWithShift; i += 1) {
        const index = i - Math.floor(i / cols) * cols;
        if (gridEnabled) {
          const colIndexToPrepend = cols - index - 1;
          for (let i = slides.length - 1; i >= 0; i -= 1) {
            if (slides[i].column === colIndexToPrepend) prependSlidesIndexes.push(i);
          }
          // slides.forEach((slide, slideIndex) => {
          //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);
          // });
        } else {
          prependSlidesIndexes.push(cols - index - 1);
        }
      }
    } else if (activeColIndexWithShift + slidesPerView > cols - loopedSlides) {
      slidesAppended = Math.max(activeColIndexWithShift - (cols - loopedSlides * 2), slidesPerGroup);
      for (let i = 0; i < slidesAppended; i += 1) {
        const index = i - Math.floor(i / cols) * cols;
        if (gridEnabled) {
          slides.forEach((slide, slideIndex) => {
            if (slide.column === index) appendSlidesIndexes.push(slideIndex);
          });
        } else {
          appendSlidesIndexes.push(index);
        }
      }
    }
    swiper.__preventObserver__ = true;
    requestAnimationFrame(() => {
      swiper.__preventObserver__ = false;
    });
    if (isPrev) {
      prependSlidesIndexes.forEach(index => {
        slides[index].swiperLoopMoveDOM = true;
        slidesEl.prepend(slides[index]);
        slides[index].swiperLoopMoveDOM = false;
      });
    }
    if (isNext) {
      appendSlidesIndexes.forEach(index => {
        slides[index].swiperLoopMoveDOM = true;
        slidesEl.append(slides[index]);
        slides[index].swiperLoopMoveDOM = false;
      });
    }
    swiper.recalcSlides();
    if (params.slidesPerView === 'auto') {
      swiper.updateSlides();
    } else if (gridEnabled && (prependSlidesIndexes.length > 0 && isPrev || appendSlidesIndexes.length > 0 && isNext)) {
      swiper.slides.forEach((slide, slideIndex) => {
        swiper.grid.updateSlide(slideIndex, slide, swiper.slides);
      });
    }
    if (params.watchSlidesProgress) {
      swiper.updateSlidesOffset();
    }
    if (slideTo) {
      if (prependSlidesIndexes.length > 0 && isPrev) {
        if (typeof slideRealIndex === 'undefined') {
          const currentSlideTranslate = swiper.slidesGrid[activeIndex];
          const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];
          const diff = newSlideTranslate - currentSlideTranslate;
          if (byMousewheel) {
            swiper.setTranslate(swiper.translate - diff);
          } else {
            swiper.slideTo(activeIndex + slidesPrepended, 0, false, true);
            if (setTranslate) {
              swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;
              swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;
            }
          }
        } else {
          if (setTranslate) {
            const shift = gridEnabled ? prependSlidesIndexes.length / params.grid.rows : prependSlidesIndexes.length;
            swiper.slideTo(swiper.activeIndex + shift, 0, false, true);
            swiper.touchEventsData.currentTranslate = swiper.translate;
          }
        }
      } else if (appendSlidesIndexes.length > 0 && isNext) {
        if (typeof slideRealIndex === 'undefined') {
          const currentSlideTranslate = swiper.slidesGrid[activeIndex];
          const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];
          const diff = newSlideTranslate - currentSlideTranslate;
          if (byMousewheel) {
            swiper.setTranslate(swiper.translate - diff);
          } else {
            swiper.slideTo(activeIndex - slidesAppended, 0, false, true);
            if (setTranslate) {
              swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;
              swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;
            }
          }
        } else {
          const shift = gridEnabled ? appendSlidesIndexes.length / params.grid.rows : appendSlidesIndexes.length;
          swiper.slideTo(swiper.activeIndex - shift, 0, false, true);
        }
      }
    }
    swiper.allowSlidePrev = allowSlidePrev;
    swiper.allowSlideNext = allowSlideNext;
    if (swiper.controller && swiper.controller.control && !byController) {
      const loopParams = {
        slideRealIndex,
        direction,
        setTranslate,
        activeSlideIndex,
        byController: true
      };
      if (Array.isArray(swiper.controller.control)) {
        swiper.controller.control.forEach(c => {
          if (!c.destroyed && c.params.loop) c.loopFix({
            ...loopParams,
            slideTo: c.params.slidesPerView === params.slidesPerView ? slideTo : false
          });
        });
      } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {
        swiper.controller.control.loopFix({
          ...loopParams,
          slideTo: swiper.controller.control.params.slidesPerView === params.slidesPerView ? slideTo : false
        });
      }
    }
    swiper.emit('loopFix');
  }
  
  function loopDestroy() {
    const swiper = this;
    const {
      params,
      slidesEl
    } = swiper;
    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;
    swiper.recalcSlides();
    const newSlidesOrder = [];
    swiper.slides.forEach(slideEl => {
      const index = typeof slideEl.swiperSlideIndex === 'undefined' ? slideEl.getAttribute('data-swiper-slide-index') * 1 : slideEl.swiperSlideIndex;
      newSlidesOrder[index] = slideEl;
    });
    swiper.slides.forEach(slideEl => {
      slideEl.removeAttribute('data-swiper-slide-index');
    });
    newSlidesOrder.forEach(slideEl => {
      slidesEl.append(slideEl);
    });
    swiper.recalcSlides();
    swiper.slideTo(swiper.realIndex, 0);
  }
  
  var loop = {
    loopCreate,
    loopFix,
    loopDestroy
  };
  
  function setGrabCursor(moving) {
    const swiper = this;
    if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
    const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;
    if (swiper.isElement) {
      swiper.__preventObserver__ = true;
    }
    el.style.cursor = 'move';
    el.style.cursor = moving ? 'grabbing' : 'grab';
    if (swiper.isElement) {
      requestAnimationFrame(() => {
        swiper.__preventObserver__ = false;
      });
    }
  }
  
  function unsetGrabCursor() {
    const swiper = this;
    if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
      return;
    }
    if (swiper.isElement) {
      swiper.__preventObserver__ = true;
    }
    swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';
    if (swiper.isElement) {
      requestAnimationFrame(() => {
        swiper.__preventObserver__ = false;
      });
    }
  }
  
  var grabCursor = {
    setGrabCursor,
    unsetGrabCursor
  };
  
  // Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd
  function closestElement(selector, base) {
    if (base === void 0) {
      base = this;
    }
    function __closestFrom(el) {
      if (!el || el === ssr_window_esm_getDocument() || el === ssr_window_esm_getWindow()) return null;
      if (el.assignedSlot) el = el.assignedSlot;
      const found = el.closest(selector);
      if (!found && !el.getRootNode) {
        return null;
      }
      return found || __closestFrom(el.getRootNode().host);
    }
    return __closestFrom(base);
  }
  function preventEdgeSwipe(swiper, event, startX) {
    const window = ssr_window_esm_getWindow();
    const {
      params
    } = swiper;
    const edgeSwipeDetection = params.edgeSwipeDetection;
    const edgeSwipeThreshold = params.edgeSwipeThreshold;
    if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {
      if (edgeSwipeDetection === 'prevent') {
        event.preventDefault();
        return true;
      }
      return false;
    }
    return true;
  }
  function onTouchStart(event) {
    const swiper = this;
    const document = ssr_window_esm_getDocument();
    let e = event;
    if (e.originalEvent) e = e.originalEvent;
    const data = swiper.touchEventsData;
    if (e.type === 'pointerdown') {
      if (data.pointerId !== null && data.pointerId !== e.pointerId) {
        return;
      }
      data.pointerId = e.pointerId;
    } else if (e.type === 'touchstart' && e.targetTouches.length === 1) {
      data.touchId = e.targetTouches[0].identifier;
    }
    if (e.type === 'touchstart') {
      // don't proceed touch event
      preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);
      return;
    }
    const {
      params,
      touches,
      enabled
    } = swiper;
    if (!enabled) return;
    if (!params.simulateTouch && e.pointerType === 'mouse') return;
    if (swiper.animating && params.preventInteractionOnTransition) {
      return;
    }
    if (!swiper.animating && params.cssMode && params.loop) {
      swiper.loopFix();
    }
    let targetEl = e.target;
    if (params.touchEventsTarget === 'wrapper') {
      if (!swiper.wrapperEl.contains(targetEl)) return;
    }
    if ('which' in e && e.which === 3) return;
    if ('button' in e && e.button > 0) return;
    if (data.isTouched && data.isMoved) return;
  
    // change target el for shadow root component
    const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';
    // eslint-disable-next-line
    const eventPath = e.composedPath ? e.composedPath() : e.path;
    if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {
      targetEl = eventPath[0];
    }
    const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;
    const isTargetShadow = !!(e.target && e.target.shadowRoot);
  
    // use closestElement for shadow root element to get the actual closest for nested shadow root element
    if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {
      swiper.allowClick = true;
      return;
    }
    if (params.swipeHandler) {
      if (!targetEl.closest(params.swipeHandler)) return;
    }
    touches.currentX = e.pageX;
    touches.currentY = e.pageY;
    const startX = touches.currentX;
    const startY = touches.currentY;
  
    // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore
  
    if (!preventEdgeSwipe(swiper, e, startX)) {
      return;
    }
    Object.assign(data, {
      isTouched: true,
      isMoved: false,
      allowTouchCallbacks: true,
      isScrolling: undefined,
      startMoving: undefined
    });
    touches.startX = startX;
    touches.startY = startY;
    data.touchStartTime = utils_now();
    swiper.allowClick = true;
    swiper.updateSize();
    swiper.swipeDirection = undefined;
    if (params.threshold > 0) data.allowThresholdMove = false;
    let preventDefault = true;
    if (targetEl.matches(data.focusableElements)) {
      preventDefault = false;
      if (targetEl.nodeName === 'SELECT') {
        data.isTouched = false;
      }
    }
    if (document.activeElement && document.activeElement.matches(data.focusableElements) && document.activeElement !== targetEl) {
      document.activeElement.blur();
    }
    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {
      e.preventDefault();
    }
    if (params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {
      swiper.freeMode.onTouchStart();
    }
    swiper.emit('touchStart', e);
  }
  
  function onTouchMove(event) {
    const document = ssr_window_esm_getDocument();
    const swiper = this;
    const data = swiper.touchEventsData;
    const {
      params,
      touches,
      rtlTranslate: rtl,
      enabled
    } = swiper;
    if (!enabled) return;
    if (!params.simulateTouch && event.pointerType === 'mouse') return;
    let e = event;
    if (e.originalEvent) e = e.originalEvent;
    if (e.type === 'pointermove') {
      if (data.touchId !== null) return; // return from pointer if we use touch
      const id = e.pointerId;
      if (id !== data.pointerId) return;
    }
    let targetTouch;
    if (e.type === 'touchmove') {
      targetTouch = [...e.changedTouches].filter(t => t.identifier === data.touchId)[0];
      if (!targetTouch || targetTouch.identifier !== data.touchId) return;
    } else {
      targetTouch = e;
    }
    if (!data.isTouched) {
      if (data.startMoving && data.isScrolling) {
        swiper.emit('touchMoveOpposite', e);
      }
      return;
    }
    const pageX = targetTouch.pageX;
    const pageY = targetTouch.pageY;
    if (e.preventedByNestedSwiper) {
      touches.startX = pageX;
      touches.startY = pageY;
      return;
    }
    if (!swiper.allowTouchMove) {
      if (!e.target.matches(data.focusableElements)) {
        swiper.allowClick = false;
      }
      if (data.isTouched) {
        Object.assign(touches, {
          startX: pageX,
          startY: pageY,
          currentX: pageX,
          currentY: pageY
        });
        data.touchStartTime = utils_now();
      }
      return;
    }
    if (params.touchReleaseOnEdges && !params.loop) {
      if (swiper.isVertical()) {
        // Vertical
        if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
          data.isTouched = false;
          data.isMoved = false;
          return;
        }
      } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
        return;
      }
    }
    if (document.activeElement) {
      if (e.target === document.activeElement && e.target.matches(data.focusableElements)) {
        data.isMoved = true;
        swiper.allowClick = false;
        return;
      }
    }
    if (data.allowTouchCallbacks) {
      swiper.emit('touchMove', e);
    }
    touches.previousX = touches.currentX;
    touches.previousY = touches.currentY;
    touches.currentX = pageX;
    touches.currentY = pageY;
    const diffX = touches.currentX - touches.startX;
    const diffY = touches.currentY - touches.startY;
    if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;
    if (typeof data.isScrolling === 'undefined') {
      let touchAngle;
      if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
        data.isScrolling = false;
      } else {
        // eslint-disable-next-line
        if (diffX * diffX + diffY * diffY >= 25) {
          touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
          data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
        }
      }
    }
    if (data.isScrolling) {
      swiper.emit('touchMoveOpposite', e);
    }
    if (typeof data.startMoving === 'undefined') {
      if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
        data.startMoving = true;
      }
    }
    if (data.isScrolling) {
      data.isTouched = false;
      return;
    }
    if (!data.startMoving) {
      return;
    }
    swiper.allowClick = false;
    if (!params.cssMode && e.cancelable) {
      e.preventDefault();
    }
    if (params.touchMoveStopPropagation && !params.nested) {
      e.stopPropagation();
    }
    let diff = swiper.isHorizontal() ? diffX : diffY;
    let touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;
    if (params.oneWayMovement) {
      diff = Math.abs(diff) * (rtl ? 1 : -1);
      touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);
    }
    touches.diff = diff;
    diff *= params.touchRatio;
    if (rtl) {
      diff = -diff;
      touchesDiff = -touchesDiff;
    }
    const prevTouchesDirection = swiper.touchesDirection;
    swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
    swiper.touchesDirection = touchesDiff > 0 ? 'prev' : 'next';
    const isLoop = swiper.params.loop && !params.cssMode;
    const allowLoopFix = swiper.touchesDirection === 'next' && swiper.allowSlideNext || swiper.touchesDirection === 'prev' && swiper.allowSlidePrev;
    if (!data.isMoved) {
      if (isLoop && allowLoopFix) {
        swiper.loopFix({
          direction: swiper.swipeDirection
        });
      }
      data.startTranslate = swiper.getTranslate();
      swiper.setTransition(0);
      if (swiper.animating) {
        const evt = new window.CustomEvent('transitionend', {
          bubbles: true,
          cancelable: true
        });
        swiper.wrapperEl.dispatchEvent(evt);
      }
      data.allowMomentumBounce = false;
      // Grab Cursor
      if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
        swiper.setGrabCursor(true);
      }
      swiper.emit('sliderFirstMove', e);
    }
    let loopFixed;
    new Date().getTime();
    if (data.isMoved && data.allowThresholdMove && prevTouchesDirection !== swiper.touchesDirection && isLoop && allowLoopFix && Math.abs(diff) >= 1) {
      Object.assign(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY,
        startTranslate: data.currentTranslate
      });
      data.loopSwapReset = true;
      data.startTranslate = data.currentTranslate;
      return;
    }
    swiper.emit('sliderMove', e);
    data.isMoved = true;
    data.currentTranslate = diff + data.startTranslate;
    let disableParentSwiper = true;
    let resistanceRatio = params.resistanceRatio;
    if (params.touchReleaseOnEdges) {
      resistanceRatio = 0;
    }
    if (diff > 0) {
      if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.slidesSizesGrid[swiper.activeIndex + 1] : swiper.minTranslate())) {
        swiper.loopFix({
          direction: 'prev',
          setTranslate: true,
          activeSlideIndex: 0
        });
      }
      if (data.currentTranslate > swiper.minTranslate()) {
        disableParentSwiper = false;
        if (params.resistance) {
          data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;
        }
      }
    } else if (diff < 0) {
      if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] : swiper.maxTranslate())) {
        swiper.loopFix({
          direction: 'next',
          setTranslate: true,
          activeSlideIndex: swiper.slides.length - (params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))
        });
      }
      if (data.currentTranslate < swiper.maxTranslate()) {
        disableParentSwiper = false;
        if (params.resistance) {
          data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;
        }
      }
    }
    if (disableParentSwiper) {
      e.preventedByNestedSwiper = true;
    }
  
    // Directions locks
    if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
      data.currentTranslate = data.startTranslate;
    }
    if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
      data.currentTranslate = data.startTranslate;
    }
    if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
      data.currentTranslate = data.startTranslate;
    }
  
    // Threshold
    if (params.threshold > 0) {
      if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
        if (!data.allowThresholdMove) {
          data.allowThresholdMove = true;
          touches.startX = touches.currentX;
          touches.startY = touches.currentY;
          data.currentTranslate = data.startTranslate;
          touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
          return;
        }
      } else {
        data.currentTranslate = data.startTranslate;
        return;
      }
    }
    if (!params.followFinger || params.cssMode) return;
  
    // Update active index in free mode
    if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {
      swiper.freeMode.onTouchMove();
    }
    // Update progress
    swiper.updateProgress(data.currentTranslate);
    // Update translate
    swiper.setTranslate(data.currentTranslate);
  }
  
  function onTouchEnd(event) {
    const swiper = this;
    const data = swiper.touchEventsData;
    let e = event;
    if (e.originalEvent) e = e.originalEvent;
    let targetTouch;
    const isTouchEvent = e.type === 'touchend' || e.type === 'touchcancel';
    if (!isTouchEvent) {
      if (data.touchId !== null) return; // return from pointer if we use touch
      if (e.pointerId !== data.pointerId) return;
      targetTouch = e;
    } else {
      targetTouch = [...e.changedTouches].filter(t => t.identifier === data.touchId)[0];
      if (!targetTouch || targetTouch.identifier !== data.touchId) return;
    }
    if (['pointercancel', 'pointerout', 'pointerleave', 'contextmenu'].includes(e.type)) {
      const proceed = ['pointercancel', 'contextmenu'].includes(e.type) && (swiper.browser.isSafari || swiper.browser.isWebView);
      if (!proceed) {
        return;
      }
    }
    data.pointerId = null;
    data.touchId = null;
    const {
      params,
      touches,
      rtlTranslate: rtl,
      slidesGrid,
      enabled
    } = swiper;
    if (!enabled) return;
    if (!params.simulateTouch && e.pointerType === 'mouse') return;
    if (data.allowTouchCallbacks) {
      swiper.emit('touchEnd', e);
    }
    data.allowTouchCallbacks = false;
    if (!data.isTouched) {
      if (data.isMoved && params.grabCursor) {
        swiper.setGrabCursor(false);
      }
      data.isMoved = false;
      data.startMoving = false;
      return;
    }
  
    // Return Grab Cursor
    if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(false);
    }
  
    // Time diff
    const touchEndTime = utils_now();
    const timeDiff = touchEndTime - data.touchStartTime;
  
    // Tap, doubleTap, Click
    if (swiper.allowClick) {
      const pathTree = e.path || e.composedPath && e.composedPath();
      swiper.updateClickedSlide(pathTree && pathTree[0] || e.target, pathTree);
      swiper.emit('tap click', e);
      if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
        swiper.emit('doubleTap doubleClick', e);
      }
    }
    data.lastClickTime = utils_now();
    utils_nextTick(() => {
      if (!swiper.destroyed) swiper.allowClick = true;
    });
    if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 && !data.loopSwapReset || data.currentTranslate === data.startTranslate && !data.loopSwapReset) {
      data.isTouched = false;
      data.isMoved = false;
      data.startMoving = false;
      return;
    }
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    let currentPos;
    if (params.followFinger) {
      currentPos = rtl ? swiper.translate : -swiper.translate;
    } else {
      currentPos = -data.currentTranslate;
    }
    if (params.cssMode) {
      return;
    }
    if (params.freeMode && params.freeMode.enabled) {
      swiper.freeMode.onTouchEnd({
        currentPos
      });
      return;
    }
  
    // Find current slide
    let stopIndex = 0;
    let groupSize = swiper.slidesSizesGrid[0];
    for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
      const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
      if (typeof slidesGrid[i + increment] !== 'undefined') {
        if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {
          stopIndex = i;
          groupSize = slidesGrid[i + increment] - slidesGrid[i];
        }
      } else if (currentPos >= slidesGrid[i]) {
        stopIndex = i;
        groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
      }
    }
    let rewindFirstIndex = null;
    let rewindLastIndex = null;
    if (params.rewind) {
      if (swiper.isBeginning) {
        rewindLastIndex = params.virtual && params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
      } else if (swiper.isEnd) {
        rewindFirstIndex = 0;
      }
    }
    // Find current slide size
    const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
    const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
    if (timeDiff > params.longSwipesMs) {
      // Long touches
      if (!params.longSwipes) {
        swiper.slideTo(swiper.activeIndex);
        return;
      }
      if (swiper.swipeDirection === 'next') {
        if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);
      }
      if (swiper.swipeDirection === 'prev') {
        if (ratio > 1 - params.longSwipesRatio) {
          swiper.slideTo(stopIndex + increment);
        } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {
          swiper.slideTo(rewindLastIndex);
        } else {
          swiper.slideTo(stopIndex);
        }
      }
    } else {
      // Short swipes
      if (!params.shortSwipes) {
        swiper.slideTo(swiper.activeIndex);
        return;
      }
      const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);
      if (!isNavButtonTarget) {
        if (swiper.swipeDirection === 'next') {
          swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);
        }
        if (swiper.swipeDirection === 'prev') {
          swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);
        }
      } else if (e.target === swiper.navigation.nextEl) {
        swiper.slideTo(stopIndex + increment);
      } else {
        swiper.slideTo(stopIndex);
      }
    }
  }
  
  function onResize() {
    const swiper = this;
    const {
      params,
      el
    } = swiper;
    if (el && el.offsetWidth === 0) return;
  
    // Breakpoints
    if (params.breakpoints) {
      swiper.setBreakpoint();
    }
  
    // Save locks
    const {
      allowSlideNext,
      allowSlidePrev,
      snapGrid
    } = swiper;
    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  
    // Disable locks on resize
    swiper.allowSlideNext = true;
    swiper.allowSlidePrev = true;
    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateSlidesClasses();
    const isVirtualLoop = isVirtual && params.loop;
    if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {
      swiper.slideTo(swiper.slides.length - 1, 0, false, true);
    } else {
      if (swiper.params.loop && !isVirtual) {
        swiper.slideToLoop(swiper.realIndex, 0, false, true);
      } else {
        swiper.slideTo(swiper.activeIndex, 0, false, true);
      }
    }
    if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
      clearTimeout(swiper.autoplay.resizeTimeout);
      swiper.autoplay.resizeTimeout = setTimeout(() => {
        if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
          swiper.autoplay.resume();
        }
      }, 500);
    }
    // Return locks after resize
    swiper.allowSlidePrev = allowSlidePrev;
    swiper.allowSlideNext = allowSlideNext;
    if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }
  }
  
  function onClick(e) {
    const swiper = this;
    if (!swiper.enabled) return;
    if (!swiper.allowClick) {
      if (swiper.params.preventClicks) e.preventDefault();
      if (swiper.params.preventClicksPropagation && swiper.animating) {
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }
  }
  
  function onScroll() {
    const swiper = this;
    const {
      wrapperEl,
      rtlTranslate,
      enabled
    } = swiper;
    if (!enabled) return;
    swiper.previousTranslate = swiper.translate;
    if (swiper.isHorizontal()) {
      swiper.translate = -wrapperEl.scrollLeft;
    } else {
      swiper.translate = -wrapperEl.scrollTop;
    }
    // eslint-disable-next-line
    if (swiper.translate === 0) swiper.translate = 0;
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
    let newProgress;
    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    if (translatesDiff === 0) {
      newProgress = 0;
    } else {
      newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
    }
    if (newProgress !== swiper.progress) {
      swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
    }
    swiper.emit('setTranslate', swiper.translate, false);
  }
  
  function onLoad(e) {
    const swiper = this;
    processLazyPreloader(swiper, e.target);
    if (swiper.params.cssMode || swiper.params.slidesPerView !== 'auto' && !swiper.params.autoHeight) {
      return;
    }
    swiper.update();
  }
  
  function onDocumentTouchStart() {
    const swiper = this;
    if (swiper.documentTouchHandlerProceeded) return;
    swiper.documentTouchHandlerProceeded = true;
    if (swiper.params.touchReleaseOnEdges) {
      swiper.el.style.touchAction = 'auto';
    }
  }
  
  const events = (swiper, method) => {
    const document = ssr_window_esm_getDocument();
    const {
      params,
      el,
      wrapperEl,
      device
    } = swiper;
    const capture = !!params.nested;
    const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';
    const swiperMethod = method;
  
    // Touch Events
    document[domMethod]('touchstart', swiper.onDocumentTouchStart, {
      passive: false,
      capture
    });
    el[domMethod]('touchstart', swiper.onTouchStart, {
      passive: false
    });
    el[domMethod]('pointerdown', swiper.onTouchStart, {
      passive: false
    });
    document[domMethod]('touchmove', swiper.onTouchMove, {
      passive: false,
      capture
    });
    document[domMethod]('pointermove', swiper.onTouchMove, {
      passive: false,
      capture
    });
    document[domMethod]('touchend', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('pointerup', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('pointercancel', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('touchcancel', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('pointerout', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('pointerleave', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('contextmenu', swiper.onTouchEnd, {
      passive: true
    });
  
    // Prevent Links Clicks
    if (params.preventClicks || params.preventClicksPropagation) {
      el[domMethod]('click', swiper.onClick, true);
    }
    if (params.cssMode) {
      wrapperEl[domMethod]('scroll', swiper.onScroll);
    }
  
    // Resize handler
    if (params.updateOnWindowResize) {
      swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);
    } else {
      swiper[swiperMethod]('observerUpdate', onResize, true);
    }
  
    // Images loader
    el[domMethod]('load', swiper.onLoad, {
      capture: true
    });
  };
  function attachEvents() {
    const swiper = this;
    const {
      params
    } = swiper;
    swiper.onTouchStart = onTouchStart.bind(swiper);
    swiper.onTouchMove = onTouchMove.bind(swiper);
    swiper.onTouchEnd = onTouchEnd.bind(swiper);
    swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);
    if (params.cssMode) {
      swiper.onScroll = onScroll.bind(swiper);
    }
    swiper.onClick = onClick.bind(swiper);
    swiper.onLoad = onLoad.bind(swiper);
    events(swiper, 'on');
  }
  function detachEvents() {
    const swiper = this;
    events(swiper, 'off');
  }
  var events$1 = {
    attachEvents,
    detachEvents
  };
  
  const isGridEnabled = (swiper, params) => {
    return swiper.grid && params.grid && params.grid.rows > 1;
  };
  function setBreakpoint() {
    const swiper = this;
    const {
      realIndex,
      initialized,
      params,
      el
    } = swiper;
    const breakpoints = params.breakpoints;
    if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return;
  
    // Get breakpoint for window width and update parameters
    const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
    if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;
    const breakpointParams = breakpointOnlyParams || swiper.originalParams;
    const wasMultiRow = isGridEnabled(swiper, params);
    const isMultiRow = isGridEnabled(swiper, breakpointParams);
    const wasEnabled = params.enabled;
    if (wasMultiRow && !isMultiRow) {
      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);
      swiper.emitContainerClasses();
    } else if (!wasMultiRow && isMultiRow) {
      el.classList.add(`${params.containerModifierClass}grid`);
      if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {
        el.classList.add(`${params.containerModifierClass}grid-column`);
      }
      swiper.emitContainerClasses();
    }
  
    // Toggle navigation, pagination, scrollbar
    ['navigation', 'pagination', 'scrollbar'].forEach(prop => {
      if (typeof breakpointParams[prop] === 'undefined') return;
      const wasModuleEnabled = params[prop] && params[prop].enabled;
      const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;
      if (wasModuleEnabled && !isModuleEnabled) {
        swiper[prop].disable();
      }
      if (!wasModuleEnabled && isModuleEnabled) {
        swiper[prop].enable();
      }
    });
    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);
    const wasLoop = params.loop;
    if (directionChanged && initialized) {
      swiper.changeDirection();
    }
    utils_extend(swiper.params, breakpointParams);
    const isEnabled = swiper.params.enabled;
    const hasLoop = swiper.params.loop;
    Object.assign(swiper, {
      allowTouchMove: swiper.params.allowTouchMove,
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev
    });
    if (wasEnabled && !isEnabled) {
      swiper.disable();
    } else if (!wasEnabled && isEnabled) {
      swiper.enable();
    }
    swiper.currentBreakpoint = breakpoint;
    swiper.emit('_beforeBreakpoint', breakpointParams);
    if (initialized) {
      if (needsReLoop) {
        swiper.loopDestroy();
        swiper.loopCreate(realIndex);
        swiper.updateSlides();
      } else if (!wasLoop && hasLoop) {
        swiper.loopCreate(realIndex);
        swiper.updateSlides();
      } else if (wasLoop && !hasLoop) {
        swiper.loopDestroy();
      }
    }
    swiper.emit('breakpoint', breakpointParams);
  }
  
  function getBreakpoint(breakpoints, base, containerEl) {
    if (base === void 0) {
      base = 'window';
    }
    if (!breakpoints || base === 'container' && !containerEl) return undefined;
    let breakpoint = false;
    const window = ssr_window_esm_getWindow();
    const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;
    const points = Object.keys(breakpoints).map(point => {
      if (typeof point === 'string' && point.indexOf('@') === 0) {
        const minRatio = parseFloat(point.substr(1));
        const value = currentHeight * minRatio;
        return {
          value,
          point
        };
      }
      return {
        value: point,
        point
      };
    });
    points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));
    for (let i = 0; i < points.length; i += 1) {
      const {
        point,
        value
      } = points[i];
      if (base === 'window') {
        if (window.matchMedia(`(min-width: ${value}px)`).matches) {
          breakpoint = point;
        }
      } else if (value <= containerEl.clientWidth) {
        breakpoint = point;
      }
    }
    return breakpoint || 'max';
  }
  
  var breakpoints = {
    setBreakpoint,
    getBreakpoint
  };
  
  function prepareClasses(entries, prefix) {
    const resultClasses = [];
    entries.forEach(item => {
      if (typeof item === 'object') {
        Object.keys(item).forEach(classNames => {
          if (item[classNames]) {
            resultClasses.push(prefix + classNames);
          }
        });
      } else if (typeof item === 'string') {
        resultClasses.push(prefix + item);
      }
    });
    return resultClasses;
  }
  function addClasses() {
    const swiper = this;
    const {
      classNames,
      params,
      rtl,
      el,
      device
    } = swiper;
    // prettier-ignore
    const suffixes = prepareClasses(['initialized', params.direction, {
      'free-mode': swiper.params.freeMode && params.freeMode.enabled
    }, {
      'autoheight': params.autoHeight
    }, {
      'rtl': rtl
    }, {
      'grid': params.grid && params.grid.rows > 1
    }, {
      'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'
    }, {
      'android': device.android
    }, {
      'ios': device.ios
    }, {
      'css-mode': params.cssMode
    }, {
      'centered': params.cssMode && params.centeredSlides
    }, {
      'watch-progress': params.watchSlidesProgress
    }], params.containerModifierClass);
    classNames.push(...suffixes);
    el.classList.add(...classNames);
    swiper.emitContainerClasses();
  }
  
  function removeClasses() {
    const swiper = this;
    const {
      el,
      classNames
    } = swiper;
    el.classList.remove(...classNames);
    swiper.emitContainerClasses();
  }
  
  var classes = {
    addClasses,
    removeClasses
  };
  
  function checkOverflow() {
    const swiper = this;
    const {
      isLocked: wasLocked,
      params
    } = swiper;
    const {
      slidesOffsetBefore
    } = params;
    if (slidesOffsetBefore) {
      const lastSlideIndex = swiper.slides.length - 1;
      const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;
      swiper.isLocked = swiper.size > lastSlideRightEdge;
    } else {
      swiper.isLocked = swiper.snapGrid.length === 1;
    }
    if (params.allowSlideNext === true) {
      swiper.allowSlideNext = !swiper.isLocked;
    }
    if (params.allowSlidePrev === true) {
      swiper.allowSlidePrev = !swiper.isLocked;
    }
    if (wasLocked && wasLocked !== swiper.isLocked) {
      swiper.isEnd = false;
    }
    if (wasLocked !== swiper.isLocked) {
      swiper.emit(swiper.isLocked ? 'lock' : 'unlock');
    }
  }
  var checkOverflow$1 = {
    checkOverflow
  };
  
  var swiper_core_defaults = {
    init: true,
    direction: 'horizontal',
    oneWayMovement: false,
    touchEventsTarget: 'wrapper',
    initialSlide: 0,
    speed: 300,
    cssMode: false,
    updateOnWindowResize: true,
    resizeObserver: true,
    nested: false,
    createElements: false,
    eventsPrefix: 'swiper',
    enabled: true,
    focusableElements: 'input, select, option, textarea, button, video, label',
    // Overrides
    width: null,
    height: null,
    //
    preventInteractionOnTransition: false,
    // ssr
    userAgent: null,
    url: null,
    // To support iOS's swipe-to-go-back gesture (when being used in-app).
    edgeSwipeDetection: false,
    edgeSwipeThreshold: 20,
    // Autoheight
    autoHeight: false,
    // Set wrapper width
    setWrapperSize: false,
    // Virtual Translate
    virtualTranslate: false,
    // Effects
    effect: 'slide',
    // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
  
    // Breakpoints
    breakpoints: undefined,
    breakpointsBase: 'window',
    // Slides grid
    spaceBetween: 0,
    slidesPerView: 1,
    slidesPerGroup: 1,
    slidesPerGroupSkip: 0,
    slidesPerGroupAuto: false,
    centeredSlides: false,
    centeredSlidesBounds: false,
    slidesOffsetBefore: 0,
    // in px
    slidesOffsetAfter: 0,
    // in px
    normalizeSlideIndex: true,
    centerInsufficientSlides: false,
    // Disable swiper and hide navigation when container not overflow
    watchOverflow: true,
    // Round length
    roundLengths: false,
    // Touches
    touchRatio: 1,
    touchAngle: 45,
    simulateTouch: true,
    shortSwipes: true,
    longSwipes: true,
    longSwipesRatio: 0.5,
    longSwipesMs: 300,
    followFinger: true,
    allowTouchMove: true,
    threshold: 5,
    touchMoveStopPropagation: false,
    touchStartPreventDefault: true,
    touchStartForcePreventDefault: false,
    touchReleaseOnEdges: false,
    // Unique Navigation Elements
    uniqueNavElements: true,
    // Resistance
    resistance: true,
    resistanceRatio: 0.85,
    // Progress
    watchSlidesProgress: false,
    // Cursor
    grabCursor: false,
    // Clicks
    preventClicks: true,
    preventClicksPropagation: true,
    slideToClickedSlide: false,
    // loop
    loop: false,
    loopAddBlankSlides: true,
    loopAdditionalSlides: 0,
    loopPreventsSliding: true,
    // rewind
    rewind: false,
    // Swiping/no swiping
    allowSlidePrev: true,
    allowSlideNext: true,
    swipeHandler: null,
    // '.swipe-handler',
    noSwiping: true,
    noSwipingClass: 'swiper-no-swiping',
    noSwipingSelector: null,
    // Passive Listeners
    passiveListeners: true,
    maxBackfaceHiddenSlides: 10,
    // NS
    containerModifierClass: 'swiper-',
    // NEW
    slideClass: 'swiper-slide',
    slideBlankClass: 'swiper-slide-blank',
    slideActiveClass: 'swiper-slide-active',
    slideVisibleClass: 'swiper-slide-visible',
    slideFullyVisibleClass: 'swiper-slide-fully-visible',
    slideNextClass: 'swiper-slide-next',
    slidePrevClass: 'swiper-slide-prev',
    wrapperClass: 'swiper-wrapper',
    lazyPreloaderClass: 'swiper-lazy-preloader',
    lazyPreloadPrevNext: 0,
    // Callbacks
    runCallbacksOnInit: true,
    // Internals
    _emitClasses: false
  };
  
  function moduleExtendParams(params, allModulesParams) {
    return function extendParams(obj) {
      if (obj === void 0) {
        obj = {};
      }
      const moduleParamName = Object.keys(obj)[0];
      const moduleParams = obj[moduleParamName];
      if (typeof moduleParams !== 'object' || moduleParams === null) {
        utils_extend(allModulesParams, obj);
        return;
      }
      if (params[moduleParamName] === true) {
        params[moduleParamName] = {
          enabled: true
        };
      }
      if (moduleParamName === 'navigation' && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].prevEl && !params[moduleParamName].nextEl) {
        params[moduleParamName].auto = true;
      }
      if (['pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].el) {
        params[moduleParamName].auto = true;
      }
      if (!(moduleParamName in params && 'enabled' in moduleParams)) {
        utils_extend(allModulesParams, obj);
        return;
      }
      if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {
        params[moduleParamName].enabled = true;
      }
      if (!params[moduleParamName]) params[moduleParamName] = {
        enabled: false
      };
      utils_extend(allModulesParams, obj);
    };
  }
  
  /* eslint no-param-reassign: "off" */
  const prototypes = {
    eventsEmitter,
    update,
    translate,
    transition,
    slide,
    loop,
    grabCursor,
    events: events$1,
    breakpoints,
    checkOverflow: checkOverflow$1,
    classes
  };
  const extendedDefaults = {};
  class Swiper {
    constructor() {
      let el;
      let params;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {
        params = args[0];
      } else {
        [el, params] = args;
      }
      if (!params) params = {};
      params = utils_extend({}, params);
      if (el && !params.el) params.el = el;
      const document = ssr_window_esm_getDocument();
      if (params.el && typeof params.el === 'string' && document.querySelectorAll(params.el).length > 1) {
        const swipers = [];
        document.querySelectorAll(params.el).forEach(containerEl => {
          const newParams = utils_extend({}, params, {
            el: containerEl
          });
          swipers.push(new Swiper(newParams));
        });
        // eslint-disable-next-line no-constructor-return
        return swipers;
      }
  
      // Swiper Instance
      const swiper = this;
      swiper.__swiper__ = true;
      swiper.support = getSupport();
      swiper.device = getDevice({
        userAgent: params.userAgent
      });
      swiper.browser = getBrowser();
      swiper.eventsListeners = {};
      swiper.eventsAnyListeners = [];
      swiper.modules = [...swiper.__modules__];
      if (params.modules && Array.isArray(params.modules)) {
        swiper.modules.push(...params.modules);
      }
      const allModulesParams = {};
      swiper.modules.forEach(mod => {
        mod({
          params,
          swiper,
          extendParams: moduleExtendParams(params, allModulesParams),
          on: swiper.on.bind(swiper),
          once: swiper.once.bind(swiper),
          off: swiper.off.bind(swiper),
          emit: swiper.emit.bind(swiper)
        });
      });
  
      // Extend defaults with modules params
      const swiperParams = utils_extend({}, swiper_core_defaults, allModulesParams);
  
      // Extend defaults with passed params
      swiper.params = utils_extend({}, swiperParams, extendedDefaults, params);
      swiper.originalParams = utils_extend({}, swiper.params);
      swiper.passedParams = utils_extend({}, params);
  
      // add event listeners
      if (swiper.params && swiper.params.on) {
        Object.keys(swiper.params.on).forEach(eventName => {
          swiper.on(eventName, swiper.params.on[eventName]);
        });
      }
      if (swiper.params && swiper.params.onAny) {
        swiper.onAny(swiper.params.onAny);
      }
  
      // Extend Swiper
      Object.assign(swiper, {
        enabled: swiper.params.enabled,
        el,
        // Classes
        classNames: [],
        // Slides
        slides: [],
        slidesGrid: [],
        snapGrid: [],
        slidesSizesGrid: [],
        // isDirection
        isHorizontal() {
          return swiper.params.direction === 'horizontal';
        },
        isVertical() {
          return swiper.params.direction === 'vertical';
        },
        // Indexes
        activeIndex: 0,
        realIndex: 0,
        //
        isBeginning: true,
        isEnd: false,
        // Props
        translate: 0,
        previousTranslate: 0,
        progress: 0,
        velocity: 0,
        animating: false,
        cssOverflowAdjustment() {
          // Returns 0 unless `translate` is > 2**23
          // Should be subtracted from css values to prevent overflow
          return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;
        },
        // Locks
        allowSlideNext: swiper.params.allowSlideNext,
        allowSlidePrev: swiper.params.allowSlidePrev,
        // Touch Events
        touchEventsData: {
          isTouched: undefined,
          isMoved: undefined,
          allowTouchCallbacks: undefined,
          touchStartTime: undefined,
          isScrolling: undefined,
          currentTranslate: undefined,
          startTranslate: undefined,
          allowThresholdMove: undefined,
          // Form elements to match
          focusableElements: swiper.params.focusableElements,
          // Last click time
          lastClickTime: 0,
          clickTimeout: undefined,
          // Velocities
          velocities: [],
          allowMomentumBounce: undefined,
          startMoving: undefined,
          pointerId: null,
          touchId: null
        },
        // Clicks
        allowClick: true,
        // Touches
        allowTouchMove: swiper.params.allowTouchMove,
        touches: {
          startX: 0,
          startY: 0,
          currentX: 0,
          currentY: 0,
          diff: 0
        },
        // Images
        imagesToLoad: [],
        imagesLoaded: 0
      });
      swiper.emit('_swiper');
  
      // Init
      if (swiper.params.init) {
        swiper.init();
      }
  
      // Return app instance
      // eslint-disable-next-line no-constructor-return
      return swiper;
    }
    getDirectionLabel(property) {
      if (this.isHorizontal()) {
        return property;
      }
      // prettier-ignore
      return {
        'width': 'height',
        'margin-top': 'margin-left',
        'margin-bottom ': 'margin-right',
        'margin-left': 'margin-top',
        'margin-right': 'margin-bottom',
        'padding-left': 'padding-top',
        'padding-right': 'padding-bottom',
        'marginRight': 'marginBottom'
      }[property];
    }
    getSlideIndex(slideEl) {
      const {
        slidesEl,
        params
      } = this;
      const slides = utils_elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);
      const firstSlideIndex = utils_elementIndex(slides[0]);
      return utils_elementIndex(slideEl) - firstSlideIndex;
    }
    getSlideIndexByData(index) {
      return this.getSlideIndex(this.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === index)[0]);
    }
    recalcSlides() {
      const swiper = this;
      const {
        slidesEl,
        params
      } = swiper;
      swiper.slides = utils_elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);
    }
    enable() {
      const swiper = this;
      if (swiper.enabled) return;
      swiper.enabled = true;
      if (swiper.params.grabCursor) {
        swiper.setGrabCursor();
      }
      swiper.emit('enable');
    }
    disable() {
      const swiper = this;
      if (!swiper.enabled) return;
      swiper.enabled = false;
      if (swiper.params.grabCursor) {
        swiper.unsetGrabCursor();
      }
      swiper.emit('disable');
    }
    setProgress(progress, speed) {
      const swiper = this;
      progress = Math.min(Math.max(progress, 0), 1);
      const min = swiper.minTranslate();
      const max = swiper.maxTranslate();
      const current = (max - min) * progress + min;
      swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    emitContainerClasses() {
      const swiper = this;
      if (!swiper.params._emitClasses || !swiper.el) return;
      const cls = swiper.el.className.split(' ').filter(className => {
        return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
      });
      swiper.emit('_containerClasses', cls.join(' '));
    }
    getSlideClasses(slideEl) {
      const swiper = this;
      if (swiper.destroyed) return '';
      return slideEl.className.split(' ').filter(className => {
        return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;
      }).join(' ');
    }
    emitSlidesClasses() {
      const swiper = this;
      if (!swiper.params._emitClasses || !swiper.el) return;
      const updates = [];
      swiper.slides.forEach(slideEl => {
        const classNames = swiper.getSlideClasses(slideEl);
        updates.push({
          slideEl,
          classNames
        });
        swiper.emit('_slideClass', slideEl, classNames);
      });
      swiper.emit('_slideClasses', updates);
    }
    slidesPerViewDynamic(view, exact) {
      if (view === void 0) {
        view = 'current';
      }
      if (exact === void 0) {
        exact = false;
      }
      const swiper = this;
      const {
        params,
        slides,
        slidesGrid,
        slidesSizesGrid,
        size: swiperSize,
        activeIndex
      } = swiper;
      let spv = 1;
      if (typeof params.slidesPerView === 'number') return params.slidesPerView;
      if (params.centeredSlides) {
        let slideSize = slides[activeIndex] ? slides[activeIndex].swiperSlideSize : 0;
        let breakLoop;
        for (let i = activeIndex + 1; i < slides.length; i += 1) {
          if (slides[i] && !breakLoop) {
            slideSize += slides[i].swiperSlideSize;
            spv += 1;
            if (slideSize > swiperSize) breakLoop = true;
          }
        }
        for (let i = activeIndex - 1; i >= 0; i -= 1) {
          if (slides[i] && !breakLoop) {
            slideSize += slides[i].swiperSlideSize;
            spv += 1;
            if (slideSize > swiperSize) breakLoop = true;
          }
        }
      } else {
        // eslint-disable-next-line
        if (view === 'current') {
          for (let i = activeIndex + 1; i < slides.length; i += 1) {
            const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;
            if (slideInView) {
              spv += 1;
            }
          }
        } else {
          // previous
          for (let i = activeIndex - 1; i >= 0; i -= 1) {
            const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;
            if (slideInView) {
              spv += 1;
            }
          }
        }
      }
      return spv;
    }
    update() {
      const swiper = this;
      if (!swiper || swiper.destroyed) return;
      const {
        snapGrid,
        params
      } = swiper;
      // Breakpoints
      if (params.breakpoints) {
        swiper.setBreakpoint();
      }
      [...swiper.el.querySelectorAll('[loading="lazy"]')].forEach(imageEl => {
        if (imageEl.complete) {
          processLazyPreloader(swiper, imageEl);
        }
      });
      swiper.updateSize();
      swiper.updateSlides();
      swiper.updateProgress();
      swiper.updateSlidesClasses();
      function setTranslate() {
        const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
        const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
        swiper.setTranslate(newTranslate);
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      }
      let translated;
      if (params.freeMode && params.freeMode.enabled && !params.cssMode) {
        setTranslate();
        if (params.autoHeight) {
          swiper.updateAutoHeight();
        }
      } else {
        if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !params.centeredSlides) {
          const slides = swiper.virtual && params.virtual.enabled ? swiper.virtual.slides : swiper.slides;
          translated = swiper.slideTo(slides.length - 1, 0, false, true);
        } else {
          translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
        }
        if (!translated) {
          setTranslate();
        }
      }
      if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
        swiper.checkOverflow();
      }
      swiper.emit('update');
    }
    changeDirection(newDirection, needUpdate) {
      if (needUpdate === void 0) {
        needUpdate = true;
      }
      const swiper = this;
      const currentDirection = swiper.params.direction;
      if (!newDirection) {
        // eslint-disable-next-line
        newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
      }
      if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
        return swiper;
      }
      swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`);
      swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`);
      swiper.emitContainerClasses();
      swiper.params.direction = newDirection;
      swiper.slides.forEach(slideEl => {
        if (newDirection === 'vertical') {
          slideEl.style.width = '';
        } else {
          slideEl.style.height = '';
        }
      });
      swiper.emit('changeDirection');
      if (needUpdate) swiper.update();
      return swiper;
    }
    changeLanguageDirection(direction) {
      const swiper = this;
      if (swiper.rtl && direction === 'rtl' || !swiper.rtl && direction === 'ltr') return;
      swiper.rtl = direction === 'rtl';
      swiper.rtlTranslate = swiper.params.direction === 'horizontal' && swiper.rtl;
      if (swiper.rtl) {
        swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`);
        swiper.el.dir = 'rtl';
      } else {
        swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`);
        swiper.el.dir = 'ltr';
      }
      swiper.update();
    }
    mount(element) {
      const swiper = this;
      if (swiper.mounted) return true;
  
      // Find el
      let el = element || swiper.params.el;
      if (typeof el === 'string') {
        el = document.querySelector(el);
      }
      if (!el) {
        return false;
      }
      el.swiper = swiper;
      if (el.parentNode && el.parentNode.host && el.parentNode.host.nodeName === 'SWIPER-CONTAINER') {
        swiper.isElement = true;
      }
      const getWrapperSelector = () => {
        return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;
      };
      const getWrapper = () => {
        if (el && el.shadowRoot && el.shadowRoot.querySelector) {
          const res = el.shadowRoot.querySelector(getWrapperSelector());
          // Children needs to return slot items
          return res;
        }
        return utils_elementChildren(el, getWrapperSelector())[0];
      };
      // Find Wrapper
      let wrapperEl = getWrapper();
      if (!wrapperEl && swiper.params.createElements) {
        wrapperEl = utils_createElement('div', swiper.params.wrapperClass);
        el.append(wrapperEl);
        utils_elementChildren(el, `.${swiper.params.slideClass}`).forEach(slideEl => {
          wrapperEl.append(slideEl);
        });
      }
      Object.assign(swiper, {
        el,
        wrapperEl,
        slidesEl: swiper.isElement && !el.parentNode.host.slideSlots ? el.parentNode.host : wrapperEl,
        hostEl: swiper.isElement ? el.parentNode.host : el,
        mounted: true,
        // RTL
        rtl: el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl',
        rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl'),
        wrongRTL: elementStyle(wrapperEl, 'display') === '-webkit-box'
      });
      return true;
    }
    init(el) {
      const swiper = this;
      if (swiper.initialized) return swiper;
      const mounted = swiper.mount(el);
      if (mounted === false) return swiper;
      swiper.emit('beforeInit');
  
      // Set breakpoint
      if (swiper.params.breakpoints) {
        swiper.setBreakpoint();
      }
  
      // Add Classes
      swiper.addClasses();
  
      // Update size
      swiper.updateSize();
  
      // Update slides
      swiper.updateSlides();
      if (swiper.params.watchOverflow) {
        swiper.checkOverflow();
      }
  
      // Set Grab Cursor
      if (swiper.params.grabCursor && swiper.enabled) {
        swiper.setGrabCursor();
      }
  
      // Slide To Initial Slide
      if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {
        swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);
      } else {
        swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
      }
  
      // Create loop
      if (swiper.params.loop) {
        swiper.loopCreate();
      }
  
      // Attach events
      swiper.attachEvents();
      const lazyElements = [...swiper.el.querySelectorAll('[loading="lazy"]')];
      if (swiper.isElement) {
        lazyElements.push(...swiper.hostEl.querySelectorAll('[loading="lazy"]'));
      }
      lazyElements.forEach(imageEl => {
        if (imageEl.complete) {
          processLazyPreloader(swiper, imageEl);
        } else {
          imageEl.addEventListener('load', e => {
            processLazyPreloader(swiper, e.target);
          });
        }
      });
      preload(swiper);
  
      // Init Flag
      swiper.initialized = true;
      preload(swiper);
  
      // Emit
      swiper.emit('init');
      swiper.emit('afterInit');
      return swiper;
    }
    destroy(deleteInstance, cleanStyles) {
      if (deleteInstance === void 0) {
        deleteInstance = true;
      }
      if (cleanStyles === void 0) {
        cleanStyles = true;
      }
      const swiper = this;
      const {
        params,
        el,
        wrapperEl,
        slides
      } = swiper;
      if (typeof swiper.params === 'undefined' || swiper.destroyed) {
        return null;
      }
      swiper.emit('beforeDestroy');
  
      // Init Flag
      swiper.initialized = false;
  
      // Detach events
      swiper.detachEvents();
  
      // Destroy loop
      if (params.loop) {
        swiper.loopDestroy();
      }
  
      // Cleanup styles
      if (cleanStyles) {
        swiper.removeClasses();
        el.removeAttribute('style');
        wrapperEl.removeAttribute('style');
        if (slides && slides.length) {
          slides.forEach(slideEl => {
            slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);
            slideEl.removeAttribute('style');
            slideEl.removeAttribute('data-swiper-slide-index');
          });
        }
      }
      swiper.emit('destroy');
  
      // Detach emitter events
      Object.keys(swiper.eventsListeners).forEach(eventName => {
        swiper.off(eventName);
      });
      if (deleteInstance !== false) {
        swiper.el.swiper = null;
        deleteProps(swiper);
      }
      swiper.destroyed = true;
      return null;
    }
    static extendDefaults(newDefaults) {
      utils_extend(extendedDefaults, newDefaults);
    }
    static get extendedDefaults() {
      return extendedDefaults;
    }
    static get defaults() {
      return swiper_core_defaults;
    }
    static installModule(mod) {
      if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];
      const modules = Swiper.prototype.__modules__;
      if (typeof mod === 'function' && modules.indexOf(mod) < 0) {
        modules.push(mod);
      }
    }
    static use(module) {
      if (Array.isArray(module)) {
        module.forEach(m => Swiper.installModule(m));
        return Swiper;
      }
      Swiper.installModule(module);
      return Swiper;
    }
  }
  Object.keys(prototypes).forEach(prototypeGroup => {
    Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {
      Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
    });
  });
  Swiper.use([Resize, swiper_core_Observer]);
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/swiper.mjs
  /**
   * Swiper 11.0.3
   * Most modern mobile touch slider and framework with hardware accelerated transitions
   * https://swiperjs.com
   *
   * Copyright 2014-2023 Vladimir Kharlampidi
   *
   * Released under the MIT License
   *
   * Released on: October 26, 2023
   */
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/virtual.mjs
  
  
  
  function Virtual(_ref) {
    let {
      swiper,
      extendParams,
      on,
      emit
    } = _ref;
    extendParams({
      virtual: {
        enabled: false,
        slides: [],
        cache: true,
        renderSlide: null,
        renderExternal: null,
        renderExternalUpdate: true,
        addSlidesBefore: 0,
        addSlidesAfter: 0
      }
    });
    let cssModeTimeout;
    const document = getDocument();
    swiper.virtual = {
      cache: {},
      from: undefined,
      to: undefined,
      slides: [],
      offset: 0,
      slidesGrid: []
    };
    const tempDOM = document.createElement('div');
    function renderSlide(slide, index) {
      const params = swiper.params.virtual;
      if (params.cache && swiper.virtual.cache[index]) {
        return swiper.virtual.cache[index];
      }
      // eslint-disable-next-line
      let slideEl;
      if (params.renderSlide) {
        slideEl = params.renderSlide.call(swiper, slide, index);
        if (typeof slideEl === 'string') {
          tempDOM.innerHTML = slideEl;
          slideEl = tempDOM.children[0];
        }
      } else if (swiper.isElement) {
        slideEl = createElement('swiper-slide');
      } else {
        slideEl = createElement('div', swiper.params.slideClass);
      }
      slideEl.setAttribute('data-swiper-slide-index', index);
      if (!params.renderSlide) {
        slideEl.innerHTML = slide;
      }
      if (params.cache) {
        swiper.virtual.cache[index] = slideEl;
      }
      return slideEl;
    }
    function update(force) {
      const {
        slidesPerView,
        slidesPerGroup,
        centeredSlides,
        loop: isLoop
      } = swiper.params;
      const {
        addSlidesBefore,
        addSlidesAfter
      } = swiper.params.virtual;
      const {
        from: previousFrom,
        to: previousTo,
        slides,
        slidesGrid: previousSlidesGrid,
        offset: previousOffset
      } = swiper.virtual;
      if (!swiper.params.cssMode) {
        swiper.updateActiveIndex();
      }
      const activeIndex = swiper.activeIndex || 0;
      let offsetProp;
      if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';
      let slidesAfter;
      let slidesBefore;
      if (centeredSlides) {
        slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
        slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
      } else {
        slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;
        slidesBefore = (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;
      }
      let from = activeIndex - slidesBefore;
      let to = activeIndex + slidesAfter;
      if (!isLoop) {
        from = Math.max(from, 0);
        to = Math.min(to, slides.length - 1);
      }
      let offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
      if (isLoop && activeIndex >= slidesBefore) {
        from -= slidesBefore;
        if (!centeredSlides) offset += swiper.slidesGrid[0];
      } else if (isLoop && activeIndex < slidesBefore) {
        from = -slidesBefore;
        if (centeredSlides) offset += swiper.slidesGrid[0];
      }
      Object.assign(swiper.virtual, {
        from,
        to,
        offset,
        slidesGrid: swiper.slidesGrid,
        slidesBefore,
        slidesAfter
      });
      function onRendered() {
        swiper.updateSlides();
        swiper.updateProgress();
        swiper.updateSlidesClasses();
        emit('virtualUpdate');
      }
      if (previousFrom === from && previousTo === to && !force) {
        if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
          swiper.slides.forEach(slideEl => {
            slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;
          });
        }
        swiper.updateProgress();
        emit('virtualUpdate');
        return;
      }
      if (swiper.params.virtual.renderExternal) {
        swiper.params.virtual.renderExternal.call(swiper, {
          offset,
          from,
          to,
          slides: function getSlides() {
            const slidesToRender = [];
            for (let i = from; i <= to; i += 1) {
              slidesToRender.push(slides[i]);
            }
            return slidesToRender;
          }()
        });
        if (swiper.params.virtual.renderExternalUpdate) {
          onRendered();
        } else {
          emit('virtualUpdate');
        }
        return;
      }
      const prependIndexes = [];
      const appendIndexes = [];
      const getSlideIndex = index => {
        let slideIndex = index;
        if (index < 0) {
          slideIndex = slides.length + index;
        } else if (slideIndex >= slides.length) {
          // eslint-disable-next-line
          slideIndex = slideIndex - slides.length;
        }
        return slideIndex;
      };
      if (force) {
        swiper.slides.filter(el => el.matches(`.${swiper.params.slideClass}, swiper-slide`)).forEach(slideEl => {
          slideEl.remove();
        });
      } else {
        for (let i = previousFrom; i <= previousTo; i += 1) {
          if (i < from || i > to) {
            const slideIndex = getSlideIndex(i);
            swiper.slides.filter(el => el.matches(`.${swiper.params.slideClass}[data-swiper-slide-index="${slideIndex}"], swiper-slide[data-swiper-slide-index="${slideIndex}"]`)).forEach(slideEl => {
              slideEl.remove();
            });
          }
        }
      }
      const loopFrom = isLoop ? -slides.length : 0;
      const loopTo = isLoop ? slides.length * 2 : slides.length;
      for (let i = loopFrom; i < loopTo; i += 1) {
        if (i >= from && i <= to) {
          const slideIndex = getSlideIndex(i);
          if (typeof previousTo === 'undefined' || force) {
            appendIndexes.push(slideIndex);
          } else {
            if (i > previousTo) appendIndexes.push(slideIndex);
            if (i < previousFrom) prependIndexes.push(slideIndex);
          }
        }
      }
      appendIndexes.forEach(index => {
        swiper.slidesEl.append(renderSlide(slides[index], index));
      });
      if (isLoop) {
        for (let i = prependIndexes.length - 1; i >= 0; i -= 1) {
          const index = prependIndexes[i];
          swiper.slidesEl.prepend(renderSlide(slides[index], index));
        }
      } else {
        prependIndexes.sort((a, b) => b - a);
        prependIndexes.forEach(index => {
          swiper.slidesEl.prepend(renderSlide(slides[index], index));
        });
      }
      elementChildren(swiper.slidesEl, '.swiper-slide, swiper-slide').forEach(slideEl => {
        slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;
      });
      onRendered();
    }
    function appendSlide(slides) {
      if (typeof slides === 'object' && 'length' in slides) {
        for (let i = 0; i < slides.length; i += 1) {
          if (slides[i]) swiper.virtual.slides.push(slides[i]);
        }
      } else {
        swiper.virtual.slides.push(slides);
      }
      update(true);
    }
    function prependSlide(slides) {
      const activeIndex = swiper.activeIndex;
      let newActiveIndex = activeIndex + 1;
      let numberOfNewSlides = 1;
      if (Array.isArray(slides)) {
        for (let i = 0; i < slides.length; i += 1) {
          if (slides[i]) swiper.virtual.slides.unshift(slides[i]);
        }
        newActiveIndex = activeIndex + slides.length;
        numberOfNewSlides = slides.length;
      } else {
        swiper.virtual.slides.unshift(slides);
      }
      if (swiper.params.virtual.cache) {
        const cache = swiper.virtual.cache;
        const newCache = {};
        Object.keys(cache).forEach(cachedIndex => {
          const cachedEl = cache[cachedIndex];
          const cachedElIndex = cachedEl.getAttribute('data-swiper-slide-index');
          if (cachedElIndex) {
            cachedEl.setAttribute('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);
          }
          newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cachedEl;
        });
        swiper.virtual.cache = newCache;
      }
      update(true);
      swiper.slideTo(newActiveIndex, 0);
    }
    function removeSlide(slidesIndexes) {
      if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;
      let activeIndex = swiper.activeIndex;
      if (Array.isArray(slidesIndexes)) {
        for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {
          if (swiper.params.virtual.cache) {
            delete swiper.virtual.cache[slidesIndexes[i]];
            // shift cache indexes
            Object.keys(swiper.virtual.cache).forEach(key => {
              if (key > slidesIndexes) {
                swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];
                swiper.virtual.cache[key - 1].setAttribute('data-swiper-slide-index', key - 1);
                delete swiper.virtual.cache[key];
              }
            });
          }
          swiper.virtual.slides.splice(slidesIndexes[i], 1);
          if (slidesIndexes[i] < activeIndex) activeIndex -= 1;
          activeIndex = Math.max(activeIndex, 0);
        }
      } else {
        if (swiper.params.virtual.cache) {
          delete swiper.virtual.cache[slidesIndexes];
          // shift cache indexes
          Object.keys(swiper.virtual.cache).forEach(key => {
            if (key > slidesIndexes) {
              swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];
              swiper.virtual.cache[key - 1].setAttribute('data-swiper-slide-index', key - 1);
              delete swiper.virtual.cache[key];
            }
          });
        }
        swiper.virtual.slides.splice(slidesIndexes, 1);
        if (slidesIndexes < activeIndex) activeIndex -= 1;
        activeIndex = Math.max(activeIndex, 0);
      }
      update(true);
      swiper.slideTo(activeIndex, 0);
    }
    function removeAllSlides() {
      swiper.virtual.slides = [];
      if (swiper.params.virtual.cache) {
        swiper.virtual.cache = {};
      }
      update(true);
      swiper.slideTo(0, 0);
    }
    on('beforeInit', () => {
      if (!swiper.params.virtual.enabled) return;
      let domSlidesAssigned;
      if (typeof swiper.passedParams.virtual.slides === 'undefined') {
        const slides = [...swiper.slidesEl.children].filter(el => el.matches(`.${swiper.params.slideClass}, swiper-slide`));
        if (slides && slides.length) {
          swiper.virtual.slides = [...slides];
          domSlidesAssigned = true;
          slides.forEach((slideEl, slideIndex) => {
            slideEl.setAttribute('data-swiper-slide-index', slideIndex);
            swiper.virtual.cache[slideIndex] = slideEl;
            slideEl.remove();
          });
        }
      }
      if (!domSlidesAssigned) {
        swiper.virtual.slides = swiper.params.virtual.slides;
      }
      swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);
      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
      update();
    });
    on('setTranslate', () => {
      if (!swiper.params.virtual.enabled) return;
      if (swiper.params.cssMode && !swiper._immediateVirtual) {
        clearTimeout(cssModeTimeout);
        cssModeTimeout = setTimeout(() => {
          update();
        }, 100);
      } else {
        update();
      }
    });
    on('init update resize', () => {
      if (!swiper.params.virtual.enabled) return;
      if (swiper.params.cssMode) {
        setCSSProperty(swiper.wrapperEl, '--swiper-virtual-size', `${swiper.virtualSize}px`);
      }
    });
    Object.assign(swiper.virtual, {
      appendSlide,
      prependSlide,
      removeSlide,
      removeAllSlides,
      update
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/keyboard.mjs
  
  
  
  /* eslint-disable consistent-return */
  function Keyboard(_ref) {
    let {
      swiper,
      extendParams,
      on,
      emit
    } = _ref;
    const document = getDocument();
    const window = getWindow();
    swiper.keyboard = {
      enabled: false
    };
    extendParams({
      keyboard: {
        enabled: false,
        onlyInViewport: true,
        pageUpDown: true
      }
    });
    function handle(event) {
      if (!swiper.enabled) return;
      const {
        rtlTranslate: rtl
      } = swiper;
      let e = event;
      if (e.originalEvent) e = e.originalEvent; // jquery fix
      const kc = e.keyCode || e.charCode;
      const pageUpDown = swiper.params.keyboard.pageUpDown;
      const isPageUp = pageUpDown && kc === 33;
      const isPageDown = pageUpDown && kc === 34;
      const isArrowLeft = kc === 37;
      const isArrowRight = kc === 39;
      const isArrowUp = kc === 38;
      const isArrowDown = kc === 40;
      // Directions locks
      if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {
        return false;
      }
      if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {
        return false;
      }
      if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
        return undefined;
      }
      if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {
        return undefined;
      }
      if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {
        let inView = false;
        // Check that swiper should be inside of visible area of window
        if (elementParents(swiper.el, `.${swiper.params.slideClass}, swiper-slide`).length > 0 && elementParents(swiper.el, `.${swiper.params.slideActiveClass}`).length === 0) {
          return undefined;
        }
        const el = swiper.el;
        const swiperWidth = el.clientWidth;
        const swiperHeight = el.clientHeight;
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        const swiperOffset = elementOffset(el);
        if (rtl) swiperOffset.left -= el.scrollLeft;
        const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];
        for (let i = 0; i < swiperCoord.length; i += 1) {
          const point = swiperCoord[i];
          if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {
            if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line
            inView = true;
          }
        }
        if (!inView) return undefined;
      }
      if (swiper.isHorizontal()) {
        if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {
          if (e.preventDefault) e.preventDefault();else e.returnValue = false;
        }
        if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();
        if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();
      } else {
        if (isPageUp || isPageDown || isArrowUp || isArrowDown) {
          if (e.preventDefault) e.preventDefault();else e.returnValue = false;
        }
        if (isPageDown || isArrowDown) swiper.slideNext();
        if (isPageUp || isArrowUp) swiper.slidePrev();
      }
      emit('keyPress', kc);
      return undefined;
    }
    function enable() {
      if (swiper.keyboard.enabled) return;
      document.addEventListener('keydown', handle);
      swiper.keyboard.enabled = true;
    }
    function disable() {
      if (!swiper.keyboard.enabled) return;
      document.removeEventListener('keydown', handle);
      swiper.keyboard.enabled = false;
    }
    on('init', () => {
      if (swiper.params.keyboard.enabled) {
        enable();
      }
    });
    on('destroy', () => {
      if (swiper.keyboard.enabled) {
        disable();
      }
    });
    Object.assign(swiper.keyboard, {
      enable,
      disable
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/mousewheel.mjs
  
  
  
  /* eslint-disable consistent-return */
  function Mousewheel(_ref) {
    let {
      swiper,
      extendParams,
      on,
      emit
    } = _ref;
    const window = getWindow();
    extendParams({
      mousewheel: {
        enabled: false,
        releaseOnEdges: false,
        invert: false,
        forceToAxis: false,
        sensitivity: 1,
        eventsTarget: 'container',
        thresholdDelta: null,
        thresholdTime: null,
        noMousewheelClass: 'swiper-no-mousewheel'
      }
    });
    swiper.mousewheel = {
      enabled: false
    };
    let timeout;
    let lastScrollTime = now();
    let lastEventBeforeSnap;
    const recentWheelEvents = [];
    function normalize(e) {
      // Reasonable defaults
      const PIXEL_STEP = 10;
      const LINE_HEIGHT = 40;
      const PAGE_HEIGHT = 800;
      let sX = 0;
      let sY = 0; // spinX, spinY
      let pX = 0;
      let pY = 0; // pixelX, pixelY
  
      // Legacy
      if ('detail' in e) {
        sY = e.detail;
      }
      if ('wheelDelta' in e) {
        sY = -e.wheelDelta / 120;
      }
      if ('wheelDeltaY' in e) {
        sY = -e.wheelDeltaY / 120;
      }
      if ('wheelDeltaX' in e) {
        sX = -e.wheelDeltaX / 120;
      }
  
      // side scrolling on FF with DOMMouseScroll
      if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
        sX = sY;
        sY = 0;
      }
      pX = sX * PIXEL_STEP;
      pY = sY * PIXEL_STEP;
      if ('deltaY' in e) {
        pY = e.deltaY;
      }
      if ('deltaX' in e) {
        pX = e.deltaX;
      }
      if (e.shiftKey && !pX) {
        // if user scrolls with shift he wants horizontal scroll
        pX = pY;
        pY = 0;
      }
      if ((pX || pY) && e.deltaMode) {
        if (e.deltaMode === 1) {
          // delta in LINE units
          pX *= LINE_HEIGHT;
          pY *= LINE_HEIGHT;
        } else {
          // delta in PAGE units
          pX *= PAGE_HEIGHT;
          pY *= PAGE_HEIGHT;
        }
      }
  
      // Fall-back if spin cannot be determined
      if (pX && !sX) {
        sX = pX < 1 ? -1 : 1;
      }
      if (pY && !sY) {
        sY = pY < 1 ? -1 : 1;
      }
      return {
        spinX: sX,
        spinY: sY,
        pixelX: pX,
        pixelY: pY
      };
    }
    function handleMouseEnter() {
      if (!swiper.enabled) return;
      swiper.mouseEntered = true;
    }
    function handleMouseLeave() {
      if (!swiper.enabled) return;
      swiper.mouseEntered = false;
    }
    function animateSlider(newEvent) {
      if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {
        // Prevent if delta of wheel scroll delta is below configured threshold
        return false;
      }
      if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {
        // Prevent if time between scrolls is below configured threshold
        return false;
      }
  
      // If the movement is NOT big enough and
      // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):
      //   Don't go any further (avoid insignificant scroll movement).
      if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {
        // Return false as a default
        return true;
      }
      // If user is scrolling towards the end:
      //   If the slider hasn't hit the latest slide or
      //   if the slider is a loop and
      //   if the slider isn't moving right now:
      //     Go to next slide and
      //     emit a scroll event.
      // Else (the user is scrolling towards the beginning) and
      // if the slider hasn't hit the first slide or
      // if the slider is a loop and
      // if the slider isn't moving right now:
      //   Go to prev slide and
      //   emit a scroll event.
      if (newEvent.direction < 0) {
        if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
          swiper.slideNext();
          emit('scroll', newEvent.raw);
        }
      } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
        swiper.slidePrev();
        emit('scroll', newEvent.raw);
      }
      // If you got here is because an animation has been triggered so store the current time
      lastScrollTime = new window.Date().getTime();
      // Return false as a default
      return false;
    }
    function releaseScroll(newEvent) {
      const params = swiper.params.mousewheel;
      if (newEvent.direction < 0) {
        if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {
          // Return true to animate scroll on edges
          return true;
        }
      } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {
        // Return true to animate scroll on edges
        return true;
      }
      return false;
    }
    function handle(event) {
      let e = event;
      let disableParentSwiper = true;
      if (!swiper.enabled) return;
  
      // Ignore event if the target or its parents have the swiper-no-mousewheel class
      if (event.target.closest(`.${swiper.params.mousewheel.noMousewheelClass}`)) return;
      const params = swiper.params.mousewheel;
      if (swiper.params.cssMode) {
        e.preventDefault();
      }
      let targetEl = swiper.el;
      if (swiper.params.mousewheel.eventsTarget !== 'container') {
        targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);
      }
      const targetElContainsTarget = targetEl && targetEl.contains(e.target);
      if (!swiper.mouseEntered && !targetElContainsTarget && !params.releaseOnEdges) return true;
      if (e.originalEvent) e = e.originalEvent; // jquery fix
      let delta = 0;
      const rtlFactor = swiper.rtlTranslate ? -1 : 1;
      const data = normalize(e);
      if (params.forceToAxis) {
        if (swiper.isHorizontal()) {
          if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;
        } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;
      } else {
        delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
      }
      if (delta === 0) return true;
      if (params.invert) delta = -delta;
  
      // Get the scroll positions
      let positions = swiper.getTranslate() + delta * params.sensitivity;
      if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();
      if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate();
  
      // When loop is true:
      //     the disableParentSwiper will be true.
      // When loop is false:
      //     if the scroll positions is not on edge,
      //     then the disableParentSwiper will be true.
      //     if the scroll on edge positions,
      //     then the disableParentSwiper will be false.
      disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());
      if (disableParentSwiper && swiper.params.nested) e.stopPropagation();
      if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {
        // Register the new event in a variable which stores the relevant data
        const newEvent = {
          time: now(),
          delta: Math.abs(delta),
          direction: Math.sign(delta),
          raw: event
        };
  
        // Keep the most recent events
        if (recentWheelEvents.length >= 2) {
          recentWheelEvents.shift(); // only store the last N events
        }
  
        const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;
        recentWheelEvents.push(newEvent);
  
        // If there is at least one previous recorded event:
        //   If direction has changed or
        //   if the scroll is quicker than the previous one:
        //     Animate the slider.
        // Else (this is the first time the wheel is moved):
        //     Animate the slider.
        if (prevEvent) {
          if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {
            animateSlider(newEvent);
          }
        } else {
          animateSlider(newEvent);
        }
  
        // If it's time to release the scroll:
        //   Return now so you don't hit the preventDefault.
        if (releaseScroll(newEvent)) {
          return true;
        }
      } else {
        // Freemode or scrollContainer:
  
        // If we recently snapped after a momentum scroll, then ignore wheel events
        // to give time for the deceleration to finish. Stop ignoring after 500 msecs
        // or if it's a new scroll (larger delta or inverse sign as last event before
        // an end-of-momentum snap).
        const newEvent = {
          time: now(),
          delta: Math.abs(delta),
          direction: Math.sign(delta)
        };
        const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;
        if (!ignoreWheelEvents) {
          lastEventBeforeSnap = undefined;
          let position = swiper.getTranslate() + delta * params.sensitivity;
          const wasBeginning = swiper.isBeginning;
          const wasEnd = swiper.isEnd;
          if (position >= swiper.minTranslate()) position = swiper.minTranslate();
          if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();
          swiper.setTransition(0);
          swiper.setTranslate(position);
          swiper.updateProgress();
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
          if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {
            swiper.updateSlidesClasses();
          }
          if (swiper.params.loop) {
            swiper.loopFix({
              direction: newEvent.direction < 0 ? 'next' : 'prev',
              byMousewheel: true
            });
          }
          if (swiper.params.freeMode.sticky) {
            // When wheel scrolling starts with sticky (aka snap) enabled, then detect
            // the end of a momentum scroll by storing recent (N=15?) wheel events.
            // 1. do all N events have decreasing or same (absolute value) delta?
            // 2. did all N events arrive in the last M (M=500?) msecs?
            // 3. does the earliest event have an (absolute value) delta that's
            //    at least P (P=1?) larger than the most recent event's delta?
            // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?
            // If 1-4 are "yes" then we're near the end of a momentum scroll deceleration.
            // Snap immediately and ignore remaining wheel events in this scroll.
            // See comment above for "remaining wheel events in this scroll" determination.
            // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.
            clearTimeout(timeout);
            timeout = undefined;
            if (recentWheelEvents.length >= 15) {
              recentWheelEvents.shift(); // only store the last N events
            }
  
            const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;
            const firstEvent = recentWheelEvents[0];
            recentWheelEvents.push(newEvent);
            if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {
              // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.
              recentWheelEvents.splice(0);
            } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {
              // We're at the end of the deceleration of a momentum scroll, so there's no need
              // to wait for more events. Snap ASAP on the next tick.
              // Also, because there's some remaining momentum we'll bias the snap in the
              // direction of the ongoing scroll because it's better UX for the scroll to snap
              // in the same direction as the scroll instead of reversing to snap.  Therefore,
              // if it's already scrolled more than 20% in the current direction, keep going.
              const snapToThreshold = delta > 0 ? 0.8 : 0.2;
              lastEventBeforeSnap = newEvent;
              recentWheelEvents.splice(0);
              timeout = nextTick(() => {
                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
              }, 0); // no delay; move on next tick
            }
  
            if (!timeout) {
              // if we get here, then we haven't detected the end of a momentum scroll, so
              // we'll consider a scroll "complete" when there haven't been any wheel events
              // for 500ms.
              timeout = nextTick(() => {
                const snapToThreshold = 0.5;
                lastEventBeforeSnap = newEvent;
                recentWheelEvents.splice(0);
                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
              }, 500);
            }
          }
  
          // Emit event
          if (!ignoreWheelEvents) emit('scroll', e);
  
          // Stop autoplay
          if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop();
          // Return page scroll on edge positions
          if (params.releaseOnEdges && (position === swiper.minTranslate() || position === swiper.maxTranslate())) {
            return true;
          }
        }
      }
      if (e.preventDefault) e.preventDefault();else e.returnValue = false;
      return false;
    }
    function events(method) {
      let targetEl = swiper.el;
      if (swiper.params.mousewheel.eventsTarget !== 'container') {
        targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);
      }
      targetEl[method]('mouseenter', handleMouseEnter);
      targetEl[method]('mouseleave', handleMouseLeave);
      targetEl[method]('wheel', handle);
    }
    function enable() {
      if (swiper.params.cssMode) {
        swiper.wrapperEl.removeEventListener('wheel', handle);
        return true;
      }
      if (swiper.mousewheel.enabled) return false;
      events('addEventListener');
      swiper.mousewheel.enabled = true;
      return true;
    }
    function disable() {
      if (swiper.params.cssMode) {
        swiper.wrapperEl.addEventListener(event, handle);
        return true;
      }
      if (!swiper.mousewheel.enabled) return false;
      events('removeEventListener');
      swiper.mousewheel.enabled = false;
      return true;
    }
    on('init', () => {
      if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {
        disable();
      }
      if (swiper.params.mousewheel.enabled) enable();
    });
    on('destroy', () => {
      if (swiper.params.cssMode) {
        enable();
      }
      if (swiper.mousewheel.enabled) disable();
    });
    Object.assign(swiper.mousewheel, {
      enable,
      disable
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/create-element-if-not-defined.mjs
  
  
  function create_element_if_not_defined_createElementIfNotDefined(swiper, originalParams, params, checkProps) {
    if (swiper.params.createElements) {
      Object.keys(checkProps).forEach(key => {
        if (!params[key] && params.auto === true) {
          let element = utils_elementChildren(swiper.el, `.${checkProps[key]}`)[0];
          if (!element) {
            element = utils_createElement('div', checkProps[key]);
            element.className = checkProps[key];
            swiper.el.append(element);
          }
          params[key] = element;
          originalParams[key] = element;
        }
      });
    }
    return params;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/navigation.mjs
  
  
  function Navigation(_ref) {
    let {
      swiper,
      extendParams,
      on,
      emit
    } = _ref;
    extendParams({
      navigation: {
        nextEl: null,
        prevEl: null,
        hideOnClick: false,
        disabledClass: 'swiper-button-disabled',
        hiddenClass: 'swiper-button-hidden',
        lockClass: 'swiper-button-lock',
        navigationDisabledClass: 'swiper-navigation-disabled'
      }
    });
    swiper.navigation = {
      nextEl: null,
      prevEl: null
    };
    const makeElementsArray = el => (Array.isArray(el) ? el : [el]).filter(e => !!e);
    function getEl(el) {
      let res;
      if (el && typeof el === 'string' && swiper.isElement) {
        res = swiper.el.querySelector(el);
        if (res) return res;
      }
      if (el) {
        if (typeof el === 'string') res = [...document.querySelectorAll(el)];
        if (swiper.params.uniqueNavElements && typeof el === 'string' && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {
          res = swiper.el.querySelector(el);
        }
      }
      if (el && !res) return el;
      // if (Array.isArray(res) && res.length === 1) res = res[0];
      return res;
    }
    function toggleEl(el, disabled) {
      const params = swiper.params.navigation;
      el = makeElementsArray(el);
      el.forEach(subEl => {
        if (subEl) {
          subEl.classList[disabled ? 'add' : 'remove'](...params.disabledClass.split(' '));
          if (subEl.tagName === 'BUTTON') subEl.disabled = disabled;
          if (swiper.params.watchOverflow && swiper.enabled) {
            subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);
          }
        }
      });
    }
    function update() {
      // Update Navigation Buttons
      const {
        nextEl,
        prevEl
      } = swiper.navigation;
      if (swiper.params.loop) {
        toggleEl(prevEl, false);
        toggleEl(nextEl, false);
        return;
      }
      toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);
      toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);
    }
    function onPrevClick(e) {
      e.preventDefault();
      if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;
      swiper.slidePrev();
      emit('navigationPrev');
    }
    function onNextClick(e) {
      e.preventDefault();
      if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;
      swiper.slideNext();
      emit('navigationNext');
    }
    function init() {
      const params = swiper.params.navigation;
      swiper.params.navigation = create_element_if_not_defined_createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {
        nextEl: 'swiper-button-next',
        prevEl: 'swiper-button-prev'
      });
      if (!(params.nextEl || params.prevEl)) return;
      let nextEl = getEl(params.nextEl);
      let prevEl = getEl(params.prevEl);
      Object.assign(swiper.navigation, {
        nextEl,
        prevEl
      });
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      const initButton = (el, dir) => {
        if (el) {
          el.addEventListener('click', dir === 'next' ? onNextClick : onPrevClick);
        }
        if (!swiper.enabled && el) {
          el.classList.add(...params.lockClass.split(' '));
        }
      };
      nextEl.forEach(el => initButton(el, 'next'));
      prevEl.forEach(el => initButton(el, 'prev'));
    }
    function destroy() {
      let {
        nextEl,
        prevEl
      } = swiper.navigation;
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      const destroyButton = (el, dir) => {
        el.removeEventListener('click', dir === 'next' ? onNextClick : onPrevClick);
        el.classList.remove(...swiper.params.navigation.disabledClass.split(' '));
      };
      nextEl.forEach(el => destroyButton(el, 'next'));
      prevEl.forEach(el => destroyButton(el, 'prev'));
    }
    on('init', () => {
      if (swiper.params.navigation.enabled === false) {
        // eslint-disable-next-line
        disable();
      } else {
        init();
        update();
      }
    });
    on('toEdge fromEdge lock unlock', () => {
      update();
    });
    on('destroy', () => {
      destroy();
    });
    on('enable disable', () => {
      let {
        nextEl,
        prevEl
      } = swiper.navigation;
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      if (swiper.enabled) {
        update();
        return;
      }
      [...nextEl, ...prevEl].filter(el => !!el).forEach(el => el.classList.add(swiper.params.navigation.lockClass));
    });
    on('click', (_s, e) => {
      let {
        nextEl,
        prevEl
      } = swiper.navigation;
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      const targetEl = e.target;
      if (swiper.params.navigation.hideOnClick && !prevEl.includes(targetEl) && !nextEl.includes(targetEl)) {
        if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;
        let isHidden;
        if (nextEl.length) {
          isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);
        } else if (prevEl.length) {
          isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);
        }
        if (isHidden === true) {
          emit('navigationShow');
        } else {
          emit('navigationHide');
        }
        [...nextEl, ...prevEl].filter(el => !!el).forEach(el => el.classList.toggle(swiper.params.navigation.hiddenClass));
      }
    });
    const enable = () => {
      swiper.el.classList.remove(...swiper.params.navigation.navigationDisabledClass.split(' '));
      init();
      update();
    };
    const disable = () => {
      swiper.el.classList.add(...swiper.params.navigation.navigationDisabledClass.split(' '));
      destroy();
    };
    Object.assign(swiper.navigation, {
      enable,
      disable,
      update,
      init,
      destroy
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/classes-to-selector.mjs
  function classes_to_selector_classesToSelector(classes) {
    if (classes === void 0) {
      classes = '';
    }
    return `.${classes.trim().replace(/([\.:!+\/])/g, '\\$1') // eslint-disable-line
    .replace(/ /g, '.')}`;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/pagination.mjs
  
  
  
  
  function Pagination(_ref) {
    let {
      swiper,
      extendParams,
      on,
      emit
    } = _ref;
    const pfx = 'swiper-pagination';
    extendParams({
      pagination: {
        el: null,
        bulletElement: 'span',
        clickable: false,
        hideOnClick: false,
        renderBullet: null,
        renderProgressbar: null,
        renderFraction: null,
        renderCustom: null,
        progressbarOpposite: false,
        type: 'bullets',
        // 'bullets' or 'progressbar' or 'fraction' or 'custom'
        dynamicBullets: false,
        dynamicMainBullets: 1,
        formatFractionCurrent: number => number,
        formatFractionTotal: number => number,
        bulletClass: `${pfx}-bullet`,
        bulletActiveClass: `${pfx}-bullet-active`,
        modifierClass: `${pfx}-`,
        currentClass: `${pfx}-current`,
        totalClass: `${pfx}-total`,
        hiddenClass: `${pfx}-hidden`,
        progressbarFillClass: `${pfx}-progressbar-fill`,
        progressbarOppositeClass: `${pfx}-progressbar-opposite`,
        clickableClass: `${pfx}-clickable`,
        lockClass: `${pfx}-lock`,
        horizontalClass: `${pfx}-horizontal`,
        verticalClass: `${pfx}-vertical`,
        paginationDisabledClass: `${pfx}-disabled`
      }
    });
    swiper.pagination = {
      el: null,
      bullets: []
    };
    let bulletSize;
    let dynamicBulletIndex = 0;
    const makeElementsArray = el => (Array.isArray(el) ? el : [el]).filter(e => !!e);
    function isPaginationDisabled() {
      return !swiper.params.pagination.el || !swiper.pagination.el || Array.isArray(swiper.pagination.el) && swiper.pagination.el.length === 0;
    }
    function setSideBullets(bulletEl, position) {
      const {
        bulletActiveClass
      } = swiper.params.pagination;
      if (!bulletEl) return;
      bulletEl = bulletEl[`${position === 'prev' ? 'previous' : 'next'}ElementSibling`];
      if (bulletEl) {
        bulletEl.classList.add(`${bulletActiveClass}-${position}`);
        bulletEl = bulletEl[`${position === 'prev' ? 'previous' : 'next'}ElementSibling`];
        if (bulletEl) {
          bulletEl.classList.add(`${bulletActiveClass}-${position}-${position}`);
        }
      }
    }
    function onBulletClick(e) {
      const bulletEl = e.target.closest(classes_to_selector_classesToSelector(swiper.params.pagination.bulletClass));
      if (!bulletEl) {
        return;
      }
      e.preventDefault();
      const index = utils_elementIndex(bulletEl) * swiper.params.slidesPerGroup;
      if (swiper.params.loop) {
        if (swiper.realIndex === index) return;
        swiper.slideToLoop(index);
      } else {
        swiper.slideTo(index);
      }
    }
    function update() {
      // Render || Update Pagination bullets/items
      const rtl = swiper.rtl;
      const params = swiper.params.pagination;
      if (isPaginationDisabled()) return;
      let el = swiper.pagination.el;
      el = makeElementsArray(el);
      // Current/Total
      let current;
      let previousIndex;
      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
      const total = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
      if (swiper.params.loop) {
        previousIndex = swiper.previousRealIndex || 0;
        current = swiper.params.slidesPerGroup > 1 ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup) : swiper.realIndex;
      } else if (typeof swiper.snapIndex !== 'undefined') {
        current = swiper.snapIndex;
        previousIndex = swiper.previousSnapIndex;
      } else {
        previousIndex = swiper.previousIndex || 0;
        current = swiper.activeIndex || 0;
      }
      // Types
      if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
        const bullets = swiper.pagination.bullets;
        let firstIndex;
        let lastIndex;
        let midIndex;
        if (params.dynamicBullets) {
          bulletSize = elementOuterSize(bullets[0], swiper.isHorizontal() ? 'width' : 'height', true);
          el.forEach(subEl => {
            subEl.style[swiper.isHorizontal() ? 'width' : 'height'] = `${bulletSize * (params.dynamicMainBullets + 4)}px`;
          });
          if (params.dynamicMainBullets > 1 && previousIndex !== undefined) {
            dynamicBulletIndex += current - (previousIndex || 0);
            if (dynamicBulletIndex > params.dynamicMainBullets - 1) {
              dynamicBulletIndex = params.dynamicMainBullets - 1;
            } else if (dynamicBulletIndex < 0) {
              dynamicBulletIndex = 0;
            }
          }
          firstIndex = Math.max(current - dynamicBulletIndex, 0);
          lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
          midIndex = (lastIndex + firstIndex) / 2;
        }
        bullets.forEach(bulletEl => {
          const classesToRemove = [...['', '-next', '-next-next', '-prev', '-prev-prev', '-main'].map(suffix => `${params.bulletActiveClass}${suffix}`)].map(s => typeof s === 'string' && s.includes(' ') ? s.split(' ') : s).flat();
          bulletEl.classList.remove(...classesToRemove);
        });
        if (el.length > 1) {
          bullets.forEach(bullet => {
            const bulletIndex = utils_elementIndex(bullet);
            if (bulletIndex === current) {
              bullet.classList.add(...params.bulletActiveClass.split(' '));
            } else if (swiper.isElement) {
              bullet.setAttribute('part', 'bullet');
            }
            if (params.dynamicBullets) {
              if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
                bullet.classList.add(...`${params.bulletActiveClass}-main`.split(' '));
              }
              if (bulletIndex === firstIndex) {
                setSideBullets(bullet, 'prev');
              }
              if (bulletIndex === lastIndex) {
                setSideBullets(bullet, 'next');
              }
            }
          });
        } else {
          const bullet = bullets[current];
          if (bullet) {
            bullet.classList.add(...params.bulletActiveClass.split(' '));
          }
          if (swiper.isElement) {
            bullets.forEach((bulletEl, bulletIndex) => {
              bulletEl.setAttribute('part', bulletIndex === current ? 'bullet-active' : 'bullet');
            });
          }
          if (params.dynamicBullets) {
            const firstDisplayedBullet = bullets[firstIndex];
            const lastDisplayedBullet = bullets[lastIndex];
            for (let i = firstIndex; i <= lastIndex; i += 1) {
              if (bullets[i]) {
                bullets[i].classList.add(...`${params.bulletActiveClass}-main`.split(' '));
              }
            }
            setSideBullets(firstDisplayedBullet, 'prev');
            setSideBullets(lastDisplayedBullet, 'next');
          }
        }
        if (params.dynamicBullets) {
          const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
          const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;
          const offsetProp = rtl ? 'right' : 'left';
          bullets.forEach(bullet => {
            bullet.style[swiper.isHorizontal() ? offsetProp : 'top'] = `${bulletsOffset}px`;
          });
        }
      }
      el.forEach((subEl, subElIndex) => {
        if (params.type === 'fraction') {
          subEl.querySelectorAll(classes_to_selector_classesToSelector(params.currentClass)).forEach(fractionEl => {
            fractionEl.textContent = params.formatFractionCurrent(current + 1);
          });
          subEl.querySelectorAll(classes_to_selector_classesToSelector(params.totalClass)).forEach(totalEl => {
            totalEl.textContent = params.formatFractionTotal(total);
          });
        }
        if (params.type === 'progressbar') {
          let progressbarDirection;
          if (params.progressbarOpposite) {
            progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
          } else {
            progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
          }
          const scale = (current + 1) / total;
          let scaleX = 1;
          let scaleY = 1;
          if (progressbarDirection === 'horizontal') {
            scaleX = scale;
          } else {
            scaleY = scale;
          }
          subEl.querySelectorAll(classes_to_selector_classesToSelector(params.progressbarFillClass)).forEach(progressEl => {
            progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;
            progressEl.style.transitionDuration = `${swiper.params.speed}ms`;
          });
        }
        if (params.type === 'custom' && params.renderCustom) {
          subEl.innerHTML = params.renderCustom(swiper, current + 1, total);
          if (subElIndex === 0) emit('paginationRender', subEl);
        } else {
          if (subElIndex === 0) emit('paginationRender', subEl);
          emit('paginationUpdate', subEl);
        }
        if (swiper.params.watchOverflow && swiper.enabled) {
          subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);
        }
      });
    }
    function render() {
      // Render Container
      const params = swiper.params.pagination;
      if (isPaginationDisabled()) return;
      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.grid && swiper.params.grid.rows > 1 ? swiper.slides.length / Math.ceil(swiper.params.grid.rows) : swiper.slides.length;
      let el = swiper.pagination.el;
      el = makeElementsArray(el);
      let paginationHTML = '';
      if (params.type === 'bullets') {
        let numberOfBullets = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
        if (swiper.params.freeMode && swiper.params.freeMode.enabled && numberOfBullets > slidesLength) {
          numberOfBullets = slidesLength;
        }
        for (let i = 0; i < numberOfBullets; i += 1) {
          if (params.renderBullet) {
            paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
          } else {
            // prettier-ignore
            paginationHTML += `<${params.bulletElement} ${swiper.isElement ? 'part="bullet"' : ''} class="${params.bulletClass}"></${params.bulletElement}>`;
          }
        }
      }
      if (params.type === 'fraction') {
        if (params.renderFraction) {
          paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
        } else {
          paginationHTML = `<span class="${params.currentClass}"></span>` + ' / ' + `<span class="${params.totalClass}"></span>`;
        }
      }
      if (params.type === 'progressbar') {
        if (params.renderProgressbar) {
          paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
        } else {
          paginationHTML = `<span class="${params.progressbarFillClass}"></span>`;
        }
      }
      swiper.pagination.bullets = [];
      el.forEach(subEl => {
        if (params.type !== 'custom') {
          subEl.innerHTML = paginationHTML || '';
        }
        if (params.type === 'bullets') {
          swiper.pagination.bullets.push(...subEl.querySelectorAll(classes_to_selector_classesToSelector(params.bulletClass)));
        }
      });
      if (params.type !== 'custom') {
        emit('paginationRender', el[0]);
      }
    }
    function init() {
      swiper.params.pagination = create_element_if_not_defined_createElementIfNotDefined(swiper, swiper.originalParams.pagination, swiper.params.pagination, {
        el: 'swiper-pagination'
      });
      const params = swiper.params.pagination;
      if (!params.el) return;
      let el;
      if (typeof params.el === 'string' && swiper.isElement) {
        el = swiper.el.querySelector(params.el);
      }
      if (!el && typeof params.el === 'string') {
        el = [...document.querySelectorAll(params.el)];
      }
      if (!el) {
        el = params.el;
      }
      if (!el || el.length === 0) return;
      if (swiper.params.uniqueNavElements && typeof params.el === 'string' && Array.isArray(el) && el.length > 1) {
        el = [...swiper.el.querySelectorAll(params.el)];
        // check if it belongs to another nested Swiper
        if (el.length > 1) {
          el = el.filter(subEl => {
            if (utils_elementParents(subEl, '.swiper')[0] !== swiper.el) return false;
            return true;
          })[0];
        }
      }
      if (Array.isArray(el) && el.length === 1) el = el[0];
      Object.assign(swiper.pagination, {
        el
      });
      el = makeElementsArray(el);
      el.forEach(subEl => {
        if (params.type === 'bullets' && params.clickable) {
          subEl.classList.add(...(params.clickableClass || '').split(' '));
        }
        subEl.classList.add(params.modifierClass + params.type);
        subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
        if (params.type === 'bullets' && params.dynamicBullets) {
          subEl.classList.add(`${params.modifierClass}${params.type}-dynamic`);
          dynamicBulletIndex = 0;
          if (params.dynamicMainBullets < 1) {
            params.dynamicMainBullets = 1;
          }
        }
        if (params.type === 'progressbar' && params.progressbarOpposite) {
          subEl.classList.add(params.progressbarOppositeClass);
        }
        if (params.clickable) {
          subEl.addEventListener('click', onBulletClick);
        }
        if (!swiper.enabled) {
          subEl.classList.add(params.lockClass);
        }
      });
    }
    function destroy() {
      const params = swiper.params.pagination;
      if (isPaginationDisabled()) return;
      let el = swiper.pagination.el;
      if (el) {
        el = makeElementsArray(el);
        el.forEach(subEl => {
          subEl.classList.remove(params.hiddenClass);
          subEl.classList.remove(params.modifierClass + params.type);
          subEl.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
          if (params.clickable) {
            subEl.classList.remove(...(params.clickableClass || '').split(' '));
            subEl.removeEventListener('click', onBulletClick);
          }
        });
      }
      if (swiper.pagination.bullets) swiper.pagination.bullets.forEach(subEl => subEl.classList.remove(...params.bulletActiveClass.split(' ')));
    }
    on('changeDirection', () => {
      if (!swiper.pagination || !swiper.pagination.el) return;
      const params = swiper.params.pagination;
      let {
        el
      } = swiper.pagination;
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.classList.remove(params.horizontalClass, params.verticalClass);
        subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
      });
    });
    on('init', () => {
      if (swiper.params.pagination.enabled === false) {
        // eslint-disable-next-line
        disable();
      } else {
        init();
        render();
        update();
      }
    });
    on('activeIndexChange', () => {
      if (typeof swiper.snapIndex === 'undefined') {
        update();
      }
    });
    on('snapIndexChange', () => {
      update();
    });
    on('snapGridLengthChange', () => {
      render();
      update();
    });
    on('destroy', () => {
      destroy();
    });
    on('enable disable', () => {
      let {
        el
      } = swiper.pagination;
      if (el) {
        el = makeElementsArray(el);
        el.forEach(subEl => subEl.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.pagination.lockClass));
      }
    });
    on('lock unlock', () => {
      update();
    });
    on('click', (_s, e) => {
      const targetEl = e.target;
      const el = makeElementsArray(swiper.pagination.el);
      if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && el && el.length > 0 && !targetEl.classList.contains(swiper.params.pagination.bulletClass)) {
        if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;
        const isHidden = el[0].classList.contains(swiper.params.pagination.hiddenClass);
        if (isHidden === true) {
          emit('paginationShow');
        } else {
          emit('paginationHide');
        }
        el.forEach(subEl => subEl.classList.toggle(swiper.params.pagination.hiddenClass));
      }
    });
    const enable = () => {
      swiper.el.classList.remove(swiper.params.pagination.paginationDisabledClass);
      let {
        el
      } = swiper.pagination;
      if (el) {
        el = makeElementsArray(el);
        el.forEach(subEl => subEl.classList.remove(swiper.params.pagination.paginationDisabledClass));
      }
      init();
      render();
      update();
    };
    const disable = () => {
      swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);
      let {
        el
      } = swiper.pagination;
      if (el) {
        el = makeElementsArray(el);
        el.forEach(subEl => subEl.classList.add(swiper.params.pagination.paginationDisabledClass));
      }
      destroy();
    };
    Object.assign(swiper.pagination, {
      enable,
      disable,
      render,
      update,
      init,
      destroy
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/scrollbar.mjs
  
  
  
  
  
  function Scrollbar(_ref) {
    let {
      swiper,
      extendParams,
      on,
      emit
    } = _ref;
    const document = getDocument();
    let isTouched = false;
    let timeout = null;
    let dragTimeout = null;
    let dragStartPos;
    let dragSize;
    let trackSize;
    let divider;
    extendParams({
      scrollbar: {
        el: null,
        dragSize: 'auto',
        hide: false,
        draggable: false,
        snapOnRelease: true,
        lockClass: 'swiper-scrollbar-lock',
        dragClass: 'swiper-scrollbar-drag',
        scrollbarDisabledClass: 'swiper-scrollbar-disabled',
        horizontalClass: `swiper-scrollbar-horizontal`,
        verticalClass: `swiper-scrollbar-vertical`
      }
    });
    swiper.scrollbar = {
      el: null,
      dragEl: null
    };
    function setTranslate() {
      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
      const {
        scrollbar,
        rtlTranslate: rtl
      } = swiper;
      const {
        dragEl,
        el
      } = scrollbar;
      const params = swiper.params.scrollbar;
      const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;
      let newSize = dragSize;
      let newPos = (trackSize - dragSize) * progress;
      if (rtl) {
        newPos = -newPos;
        if (newPos > 0) {
          newSize = dragSize - newPos;
          newPos = 0;
        } else if (-newPos + dragSize > trackSize) {
          newSize = trackSize + newPos;
        }
      } else if (newPos < 0) {
        newSize = dragSize + newPos;
        newPos = 0;
      } else if (newPos + dragSize > trackSize) {
        newSize = trackSize - newPos;
      }
      if (swiper.isHorizontal()) {
        dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;
        dragEl.style.width = `${newSize}px`;
      } else {
        dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;
        dragEl.style.height = `${newSize}px`;
      }
      if (params.hide) {
        clearTimeout(timeout);
        el.style.opacity = 1;
        timeout = setTimeout(() => {
          el.style.opacity = 0;
          el.style.transitionDuration = '400ms';
        }, 1000);
      }
    }
    function setTransition(duration) {
      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
      swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;
    }
    function updateSize() {
      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
      const {
        scrollbar
      } = swiper;
      const {
        dragEl,
        el
      } = scrollbar;
      dragEl.style.width = '';
      dragEl.style.height = '';
      trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;
      divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));
      if (swiper.params.scrollbar.dragSize === 'auto') {
        dragSize = trackSize * divider;
      } else {
        dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
      }
      if (swiper.isHorizontal()) {
        dragEl.style.width = `${dragSize}px`;
      } else {
        dragEl.style.height = `${dragSize}px`;
      }
      if (divider >= 1) {
        el.style.display = 'none';
      } else {
        el.style.display = '';
      }
      if (swiper.params.scrollbar.hide) {
        el.style.opacity = 0;
      }
      if (swiper.params.watchOverflow && swiper.enabled) {
        scrollbar.el.classList[swiper.isLocked ? 'add' : 'remove'](swiper.params.scrollbar.lockClass);
      }
    }
    function getPointerPosition(e) {
      return swiper.isHorizontal() ? e.clientX : e.clientY;
    }
    function setDragPosition(e) {
      const {
        scrollbar,
        rtlTranslate: rtl
      } = swiper;
      const {
        el
      } = scrollbar;
      let positionRatio;
      positionRatio = (getPointerPosition(e) - elementOffset(el)[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);
      positionRatio = Math.max(Math.min(positionRatio, 1), 0);
      if (rtl) {
        positionRatio = 1 - positionRatio;
      }
      const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;
      swiper.updateProgress(position);
      swiper.setTranslate(position);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    function onDragStart(e) {
      const params = swiper.params.scrollbar;
      const {
        scrollbar,
        wrapperEl
      } = swiper;
      const {
        el,
        dragEl
      } = scrollbar;
      isTouched = true;
      dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;
      e.preventDefault();
      e.stopPropagation();
      wrapperEl.style.transitionDuration = '100ms';
      dragEl.style.transitionDuration = '100ms';
      setDragPosition(e);
      clearTimeout(dragTimeout);
      el.style.transitionDuration = '0ms';
      if (params.hide) {
        el.style.opacity = 1;
      }
      if (swiper.params.cssMode) {
        swiper.wrapperEl.style['scroll-snap-type'] = 'none';
      }
      emit('scrollbarDragStart', e);
    }
    function onDragMove(e) {
      const {
        scrollbar,
        wrapperEl
      } = swiper;
      const {
        el,
        dragEl
      } = scrollbar;
      if (!isTouched) return;
      if (e.preventDefault) e.preventDefault();else e.returnValue = false;
      setDragPosition(e);
      wrapperEl.style.transitionDuration = '0ms';
      el.style.transitionDuration = '0ms';
      dragEl.style.transitionDuration = '0ms';
      emit('scrollbarDragMove', e);
    }
    function onDragEnd(e) {
      const params = swiper.params.scrollbar;
      const {
        scrollbar,
        wrapperEl
      } = swiper;
      const {
        el
      } = scrollbar;
      if (!isTouched) return;
      isTouched = false;
      if (swiper.params.cssMode) {
        swiper.wrapperEl.style['scroll-snap-type'] = '';
        wrapperEl.style.transitionDuration = '';
      }
      if (params.hide) {
        clearTimeout(dragTimeout);
        dragTimeout = nextTick(() => {
          el.style.opacity = 0;
          el.style.transitionDuration = '400ms';
        }, 1000);
      }
      emit('scrollbarDragEnd', e);
      if (params.snapOnRelease) {
        swiper.slideToClosest();
      }
    }
    function events(method) {
      const {
        scrollbar,
        params
      } = swiper;
      const el = scrollbar.el;
      if (!el) return;
      const target = el;
      const activeListener = params.passiveListeners ? {
        passive: false,
        capture: false
      } : false;
      const passiveListener = params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      if (!target) return;
      const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';
      target[eventMethod]('pointerdown', onDragStart, activeListener);
      document[eventMethod]('pointermove', onDragMove, activeListener);
      document[eventMethod]('pointerup', onDragEnd, passiveListener);
    }
    function enableDraggable() {
      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
      events('on');
    }
    function disableDraggable() {
      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
      events('off');
    }
    function init() {
      const {
        scrollbar,
        el: swiperEl
      } = swiper;
      swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {
        el: 'swiper-scrollbar'
      });
      const params = swiper.params.scrollbar;
      if (!params.el) return;
      let el;
      if (typeof params.el === 'string' && swiper.isElement) {
        el = swiper.el.querySelector(params.el);
      }
      if (!el && typeof params.el === 'string') {
        el = document.querySelectorAll(params.el);
        if (!el.length) return;
      } else if (!el) {
        el = params.el;
      }
      if (swiper.params.uniqueNavElements && typeof params.el === 'string' && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {
        el = swiperEl.querySelector(params.el);
      }
      if (el.length > 0) el = el[0];
      el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
      let dragEl;
      if (el) {
        dragEl = el.querySelector(classesToSelector(swiper.params.scrollbar.dragClass));
        if (!dragEl) {
          dragEl = createElement('div', swiper.params.scrollbar.dragClass);
          el.append(dragEl);
        }
      }
      Object.assign(scrollbar, {
        el,
        dragEl
      });
      if (params.draggable) {
        enableDraggable();
      }
      if (el) {
        el.classList[swiper.enabled ? 'remove' : 'add'](...classesToTokens(swiper.params.scrollbar.lockClass));
      }
    }
    function destroy() {
      const params = swiper.params.scrollbar;
      const el = swiper.scrollbar.el;
      if (el) {
        el.classList.remove(...classesToTokens(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass));
      }
      disableDraggable();
    }
    on('init', () => {
      if (swiper.params.scrollbar.enabled === false) {
        // eslint-disable-next-line
        disable();
      } else {
        init();
        updateSize();
        setTranslate();
      }
    });
    on('update resize observerUpdate lock unlock', () => {
      updateSize();
    });
    on('setTranslate', () => {
      setTranslate();
    });
    on('setTransition', (_s, duration) => {
      setTransition(duration);
    });
    on('enable disable', () => {
      const {
        el
      } = swiper.scrollbar;
      if (el) {
        el.classList[swiper.enabled ? 'remove' : 'add'](...classesToTokens(swiper.params.scrollbar.lockClass));
      }
    });
    on('destroy', () => {
      destroy();
    });
    const enable = () => {
      swiper.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));
      if (swiper.scrollbar.el) {
        swiper.scrollbar.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));
      }
      init();
      updateSize();
      setTranslate();
    };
    const disable = () => {
      swiper.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));
      if (swiper.scrollbar.el) {
        swiper.scrollbar.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));
      }
      destroy();
    };
    Object.assign(swiper.scrollbar, {
      enable,
      disable,
      updateSize,
      setTranslate,
      init,
      destroy
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/parallax.mjs
  
  
  function Parallax(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      parallax: {
        enabled: false
      }
    });
    const elementsSelector = '[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]';
    const setTransform = (el, progress) => {
      const {
        rtl
      } = swiper;
      const rtlFactor = rtl ? -1 : 1;
      const p = el.getAttribute('data-swiper-parallax') || '0';
      let x = el.getAttribute('data-swiper-parallax-x');
      let y = el.getAttribute('data-swiper-parallax-y');
      const scale = el.getAttribute('data-swiper-parallax-scale');
      const opacity = el.getAttribute('data-swiper-parallax-opacity');
      const rotate = el.getAttribute('data-swiper-parallax-rotate');
      if (x || y) {
        x = x || '0';
        y = y || '0';
      } else if (swiper.isHorizontal()) {
        x = p;
        y = '0';
      } else {
        y = p;
        x = '0';
      }
      if (x.indexOf('%') >= 0) {
        x = `${parseInt(x, 10) * progress * rtlFactor}%`;
      } else {
        x = `${x * progress * rtlFactor}px`;
      }
      if (y.indexOf('%') >= 0) {
        y = `${parseInt(y, 10) * progress}%`;
      } else {
        y = `${y * progress}px`;
      }
      if (typeof opacity !== 'undefined' && opacity !== null) {
        const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));
        el.style.opacity = currentOpacity;
      }
      let transform = `translate3d(${x}, ${y}, 0px)`;
      if (typeof scale !== 'undefined' && scale !== null) {
        const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));
        transform += ` scale(${currentScale})`;
      }
      if (rotate && typeof rotate !== 'undefined' && rotate !== null) {
        const currentRotate = rotate * progress * -1;
        transform += ` rotate(${currentRotate}deg)`;
      }
      el.style.transform = transform;
    };
    const setTranslate = () => {
      const {
        el,
        slides,
        progress,
        snapGrid,
        isElement
      } = swiper;
      const elements = utils_elementChildren(el, elementsSelector);
      if (swiper.isElement) {
        elements.push(...utils_elementChildren(swiper.hostEl, elementsSelector));
      }
      elements.forEach(subEl => {
        setTransform(subEl, progress);
      });
      slides.forEach((slideEl, slideIndex) => {
        let slideProgress = slideEl.progress;
        if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
          slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);
        }
        slideProgress = Math.min(Math.max(slideProgress, -1), 1);
        slideEl.querySelectorAll(`${elementsSelector}, [data-swiper-parallax-rotate]`).forEach(subEl => {
          setTransform(subEl, slideProgress);
        });
      });
    };
    const setTransition = function (duration) {
      if (duration === void 0) {
        duration = swiper.params.speed;
      }
      const {
        el,
        hostEl
      } = swiper;
      const elements = [...el.querySelectorAll(elementsSelector)];
      if (swiper.isElement) {
        elements.push(...hostEl.querySelectorAll(elementsSelector));
      }
      elements.forEach(parallaxEl => {
        let parallaxDuration = parseInt(parallaxEl.getAttribute('data-swiper-parallax-duration'), 10) || duration;
        if (duration === 0) parallaxDuration = 0;
        parallaxEl.style.transitionDuration = `${parallaxDuration}ms`;
      });
    };
    on('beforeInit', () => {
      if (!swiper.params.parallax.enabled) return;
      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
    });
    on('init', () => {
      if (!swiper.params.parallax.enabled) return;
      setTranslate();
    });
    on('setTranslate', () => {
      if (!swiper.params.parallax.enabled) return;
      setTranslate();
    });
    on('setTransition', (_swiper, duration) => {
      if (!swiper.params.parallax.enabled) return;
      setTransition(duration);
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/zoom.mjs
  
  
  
  function Zoom(_ref) {
    let {
      swiper,
      extendParams,
      on,
      emit
    } = _ref;
    const window = getWindow();
    extendParams({
      zoom: {
        enabled: false,
        maxRatio: 3,
        minRatio: 1,
        toggle: true,
        containerClass: 'swiper-zoom-container',
        zoomedSlideClass: 'swiper-slide-zoomed'
      }
    });
    swiper.zoom = {
      enabled: false
    };
    let currentScale = 1;
    let isScaling = false;
    let fakeGestureTouched;
    let fakeGestureMoved;
    const evCache = [];
    const gesture = {
      originX: 0,
      originY: 0,
      slideEl: undefined,
      slideWidth: undefined,
      slideHeight: undefined,
      imageEl: undefined,
      imageWrapEl: undefined,
      maxRatio: 3
    };
    const image = {
      isTouched: undefined,
      isMoved: undefined,
      currentX: undefined,
      currentY: undefined,
      minX: undefined,
      minY: undefined,
      maxX: undefined,
      maxY: undefined,
      width: undefined,
      height: undefined,
      startX: undefined,
      startY: undefined,
      touchesStart: {},
      touchesCurrent: {}
    };
    const velocity = {
      x: undefined,
      y: undefined,
      prevPositionX: undefined,
      prevPositionY: undefined,
      prevTime: undefined
    };
    let scale = 1;
    Object.defineProperty(swiper.zoom, 'scale', {
      get() {
        return scale;
      },
      set(value) {
        if (scale !== value) {
          const imageEl = gesture.imageEl;
          const slideEl = gesture.slideEl;
          emit('zoomChange', value, imageEl, slideEl);
        }
        scale = value;
      }
    });
    function getDistanceBetweenTouches() {
      if (evCache.length < 2) return 1;
      const x1 = evCache[0].pageX;
      const y1 = evCache[0].pageY;
      const x2 = evCache[1].pageX;
      const y2 = evCache[1].pageY;
      const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
      return distance;
    }
    function getScaleOrigin() {
      if (evCache.length < 2) return {
        x: null,
        y: null
      };
      const box = gesture.imageEl.getBoundingClientRect();
      return [(evCache[0].pageX + (evCache[1].pageX - evCache[0].pageX) / 2 - box.x - window.scrollX) / currentScale, (evCache[0].pageY + (evCache[1].pageY - evCache[0].pageY) / 2 - box.y - window.scrollY) / currentScale];
    }
    function getSlideSelector() {
      return swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;
    }
    function eventWithinSlide(e) {
      const slideSelector = getSlideSelector();
      if (e.target.matches(slideSelector)) return true;
      if (swiper.slides.filter(slideEl => slideEl.contains(e.target)).length > 0) return true;
      return false;
    }
    function eventWithinZoomContainer(e) {
      const selector = `.${swiper.params.zoom.containerClass}`;
      if (e.target.matches(selector)) return true;
      if ([...swiper.hostEl.querySelectorAll(selector)].filter(containerEl => containerEl.contains(e.target)).length > 0) return true;
      return false;
    }
  
    // Events
    function onGestureStart(e) {
      if (e.pointerType === 'mouse') {
        evCache.splice(0, evCache.length);
      }
      if (!eventWithinSlide(e)) return;
      const params = swiper.params.zoom;
      fakeGestureTouched = false;
      fakeGestureMoved = false;
      evCache.push(e);
      if (evCache.length < 2) {
        return;
      }
      fakeGestureTouched = true;
      gesture.scaleStart = getDistanceBetweenTouches();
      if (!gesture.slideEl) {
        gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);
        if (!gesture.slideEl) gesture.slideEl = swiper.slides[swiper.activeIndex];
        let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);
        if (imageEl) {
          imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];
        }
        gesture.imageEl = imageEl;
        if (imageEl) {
          gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];
        } else {
          gesture.imageWrapEl = undefined;
        }
        if (!gesture.imageWrapEl) {
          gesture.imageEl = undefined;
          return;
        }
        gesture.maxRatio = gesture.imageWrapEl.getAttribute('data-swiper-zoom') || params.maxRatio;
      }
      if (gesture.imageEl) {
        const [originX, originY] = getScaleOrigin();
        gesture.originX = originX;
        gesture.originY = originY;
        gesture.imageEl.style.transitionDuration = '0ms';
      }
      isScaling = true;
    }
    function onGestureChange(e) {
      if (!eventWithinSlide(e)) return;
      const params = swiper.params.zoom;
      const zoom = swiper.zoom;
      const pointerIndex = evCache.findIndex(cachedEv => cachedEv.pointerId === e.pointerId);
      if (pointerIndex >= 0) evCache[pointerIndex] = e;
      if (evCache.length < 2) {
        return;
      }
      fakeGestureMoved = true;
      gesture.scaleMove = getDistanceBetweenTouches();
      if (!gesture.imageEl) {
        return;
      }
      zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;
      if (zoom.scale > gesture.maxRatio) {
        zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;
      }
      if (zoom.scale < params.minRatio) {
        zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;
      }
      gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
    }
    function onGestureEnd(e) {
      if (!eventWithinSlide(e)) return;
      if (e.pointerType === 'mouse' && e.type === 'pointerout') return;
      const params = swiper.params.zoom;
      const zoom = swiper.zoom;
      const pointerIndex = evCache.findIndex(cachedEv => cachedEv.pointerId === e.pointerId);
      if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);
      if (!fakeGestureTouched || !fakeGestureMoved) {
        return;
      }
      fakeGestureTouched = false;
      fakeGestureMoved = false;
      if (!gesture.imageEl) return;
      zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
      gesture.imageEl.style.transitionDuration = `${swiper.params.speed}ms`;
      gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
      currentScale = zoom.scale;
      isScaling = false;
      if (zoom.scale > 1 && gesture.slideEl) {
        gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);
      } else if (zoom.scale <= 1 && gesture.slideEl) {
        gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);
      }
      if (zoom.scale === 1) {
        gesture.originX = 0;
        gesture.originY = 0;
        gesture.slideEl = undefined;
      }
    }
    function onTouchStart(e) {
      const device = swiper.device;
      if (!gesture.imageEl) return;
      if (image.isTouched) return;
      if (device.android && e.cancelable) e.preventDefault();
      image.isTouched = true;
      const event = evCache.length > 0 ? evCache[0] : e;
      image.touchesStart.x = event.pageX;
      image.touchesStart.y = event.pageY;
    }
    function onTouchMove(e) {
      if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) return;
      const zoom = swiper.zoom;
      if (!gesture.imageEl) return;
      if (!image.isTouched || !gesture.slideEl) return;
      if (!image.isMoved) {
        image.width = gesture.imageEl.offsetWidth;
        image.height = gesture.imageEl.offsetHeight;
        image.startX = getTranslate(gesture.imageWrapEl, 'x') || 0;
        image.startY = getTranslate(gesture.imageWrapEl, 'y') || 0;
        gesture.slideWidth = gesture.slideEl.offsetWidth;
        gesture.slideHeight = gesture.slideEl.offsetHeight;
        gesture.imageWrapEl.style.transitionDuration = '0ms';
      }
      // Define if we need image drag
      const scaledWidth = image.width * zoom.scale;
      const scaledHeight = image.height * zoom.scale;
      if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;
      image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
      image.maxX = -image.minX;
      image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
      image.maxY = -image.minY;
      image.touchesCurrent.x = evCache.length > 0 ? evCache[0].pageX : e.pageX;
      image.touchesCurrent.y = evCache.length > 0 ? evCache[0].pageY : e.pageY;
      const touchesDiff = Math.max(Math.abs(image.touchesCurrent.x - image.touchesStart.x), Math.abs(image.touchesCurrent.y - image.touchesStart.y));
      if (touchesDiff > 5) {
        swiper.allowClick = false;
      }
      if (!image.isMoved && !isScaling) {
        if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {
          image.isTouched = false;
          return;
        }
        if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {
          image.isTouched = false;
          return;
        }
      }
      if (e.cancelable) {
        e.preventDefault();
      }
      e.stopPropagation();
      image.isMoved = true;
      const scaleRatio = (zoom.scale - currentScale) / (gesture.maxRatio - swiper.params.zoom.minRatio);
      const {
        originX,
        originY
      } = gesture;
      image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX + scaleRatio * (image.width - originX * 2);
      image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY + scaleRatio * (image.height - originY * 2);
      if (image.currentX < image.minX) {
        image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;
      }
      if (image.currentX > image.maxX) {
        image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;
      }
      if (image.currentY < image.minY) {
        image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;
      }
      if (image.currentY > image.maxY) {
        image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;
      }
  
      // Velocity
      if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;
      if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;
      if (!velocity.prevTime) velocity.prevTime = Date.now();
      velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
      velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
      if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;
      if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;
      velocity.prevPositionX = image.touchesCurrent.x;
      velocity.prevPositionY = image.touchesCurrent.y;
      velocity.prevTime = Date.now();
      gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;
    }
    function onTouchEnd() {
      const zoom = swiper.zoom;
      if (!gesture.imageEl) return;
      if (!image.isTouched || !image.isMoved) {
        image.isTouched = false;
        image.isMoved = false;
        return;
      }
      image.isTouched = false;
      image.isMoved = false;
      let momentumDurationX = 300;
      let momentumDurationY = 300;
      const momentumDistanceX = velocity.x * momentumDurationX;
      const newPositionX = image.currentX + momentumDistanceX;
      const momentumDistanceY = velocity.y * momentumDurationY;
      const newPositionY = image.currentY + momentumDistanceY;
  
      // Fix duration
      if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);
      if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);
      const momentumDuration = Math.max(momentumDurationX, momentumDurationY);
      image.currentX = newPositionX;
      image.currentY = newPositionY;
      // Define if we need image drag
      const scaledWidth = image.width * zoom.scale;
      const scaledHeight = image.height * zoom.scale;
      image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
      image.maxX = -image.minX;
      image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
      image.maxY = -image.minY;
      image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
      image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);
      gesture.imageWrapEl.style.transitionDuration = `${momentumDuration}ms`;
      gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;
    }
    function onTransitionEnd() {
      const zoom = swiper.zoom;
      if (gesture.slideEl && swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)) {
        if (gesture.imageEl) {
          gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';
        }
        if (gesture.imageWrapEl) {
          gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';
        }
        gesture.slideEl.classList.remove(`${swiper.params.zoom.zoomedSlideClass}`);
        zoom.scale = 1;
        currentScale = 1;
        gesture.slideEl = undefined;
        gesture.imageEl = undefined;
        gesture.imageWrapEl = undefined;
        gesture.originX = 0;
        gesture.originY = 0;
      }
    }
    function zoomIn(e) {
      const zoom = swiper.zoom;
      const params = swiper.params.zoom;
      if (!gesture.slideEl) {
        if (e && e.target) {
          gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);
        }
        if (!gesture.slideEl) {
          if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
            gesture.slideEl = elementChildren(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];
          } else {
            gesture.slideEl = swiper.slides[swiper.activeIndex];
          }
        }
        let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);
        if (imageEl) {
          imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];
        }
        gesture.imageEl = imageEl;
        if (imageEl) {
          gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];
        } else {
          gesture.imageWrapEl = undefined;
        }
      }
      if (!gesture.imageEl || !gesture.imageWrapEl) return;
      if (swiper.params.cssMode) {
        swiper.wrapperEl.style.overflow = 'hidden';
        swiper.wrapperEl.style.touchAction = 'none';
      }
      gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);
      let touchX;
      let touchY;
      let offsetX;
      let offsetY;
      let diffX;
      let diffY;
      let translateX;
      let translateY;
      let imageWidth;
      let imageHeight;
      let scaledWidth;
      let scaledHeight;
      let translateMinX;
      let translateMinY;
      let translateMaxX;
      let translateMaxY;
      let slideWidth;
      let slideHeight;
      if (typeof image.touchesStart.x === 'undefined' && e) {
        touchX = e.pageX;
        touchY = e.pageY;
      } else {
        touchX = image.touchesStart.x;
        touchY = image.touchesStart.y;
      }
      const forceZoomRatio = typeof e === 'number' ? e : null;
      if (currentScale === 1 && forceZoomRatio) {
        touchX = undefined;
        touchY = undefined;
      }
      zoom.scale = forceZoomRatio || gesture.imageWrapEl.getAttribute('data-swiper-zoom') || params.maxRatio;
      currentScale = forceZoomRatio || gesture.imageWrapEl.getAttribute('data-swiper-zoom') || params.maxRatio;
      if (e && !(currentScale === 1 && forceZoomRatio)) {
        slideWidth = gesture.slideEl.offsetWidth;
        slideHeight = gesture.slideEl.offsetHeight;
        offsetX = elementOffset(gesture.slideEl).left + window.scrollX;
        offsetY = elementOffset(gesture.slideEl).top + window.scrollY;
        diffX = offsetX + slideWidth / 2 - touchX;
        diffY = offsetY + slideHeight / 2 - touchY;
        imageWidth = gesture.imageEl.offsetWidth;
        imageHeight = gesture.imageEl.offsetHeight;
        scaledWidth = imageWidth * zoom.scale;
        scaledHeight = imageHeight * zoom.scale;
        translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
        translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
        translateMaxX = -translateMinX;
        translateMaxY = -translateMinY;
        translateX = diffX * zoom.scale;
        translateY = diffY * zoom.scale;
        if (translateX < translateMinX) {
          translateX = translateMinX;
        }
        if (translateX > translateMaxX) {
          translateX = translateMaxX;
        }
        if (translateY < translateMinY) {
          translateY = translateMinY;
        }
        if (translateY > translateMaxY) {
          translateY = translateMaxY;
        }
      } else {
        translateX = 0;
        translateY = 0;
      }
      if (forceZoomRatio && zoom.scale === 1) {
        gesture.originX = 0;
        gesture.originY = 0;
      }
      gesture.imageWrapEl.style.transitionDuration = '300ms';
      gesture.imageWrapEl.style.transform = `translate3d(${translateX}px, ${translateY}px,0)`;
      gesture.imageEl.style.transitionDuration = '300ms';
      gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
    }
    function zoomOut() {
      const zoom = swiper.zoom;
      const params = swiper.params.zoom;
      if (!gesture.slideEl) {
        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
          gesture.slideEl = elementChildren(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];
        } else {
          gesture.slideEl = swiper.slides[swiper.activeIndex];
        }
        let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);
        if (imageEl) {
          imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];
        }
        gesture.imageEl = imageEl;
        if (imageEl) {
          gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];
        } else {
          gesture.imageWrapEl = undefined;
        }
      }
      if (!gesture.imageEl || !gesture.imageWrapEl) return;
      if (swiper.params.cssMode) {
        swiper.wrapperEl.style.overflow = '';
        swiper.wrapperEl.style.touchAction = '';
      }
      zoom.scale = 1;
      currentScale = 1;
      gesture.imageWrapEl.style.transitionDuration = '300ms';
      gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';
      gesture.imageEl.style.transitionDuration = '300ms';
      gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';
      gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);
      gesture.slideEl = undefined;
      gesture.originX = 0;
      gesture.originY = 0;
    }
  
    // Toggle Zoom
    function zoomToggle(e) {
      const zoom = swiper.zoom;
      if (zoom.scale && zoom.scale !== 1) {
        // Zoom Out
        zoomOut();
      } else {
        // Zoom In
        zoomIn(e);
      }
    }
    function getListeners() {
      const passiveListener = swiper.params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      const activeListenerWithCapture = swiper.params.passiveListeners ? {
        passive: false,
        capture: true
      } : true;
      return {
        passiveListener,
        activeListenerWithCapture
      };
    }
  
    // Attach/Detach Events
    function enable() {
      const zoom = swiper.zoom;
      if (zoom.enabled) return;
      zoom.enabled = true;
      const {
        passiveListener,
        activeListenerWithCapture
      } = getListeners();
  
      // Scale image
      swiper.wrapperEl.addEventListener('pointerdown', onGestureStart, passiveListener);
      swiper.wrapperEl.addEventListener('pointermove', onGestureChange, activeListenerWithCapture);
      ['pointerup', 'pointercancel', 'pointerout'].forEach(eventName => {
        swiper.wrapperEl.addEventListener(eventName, onGestureEnd, passiveListener);
      });
  
      // Move image
      swiper.wrapperEl.addEventListener('pointermove', onTouchMove, activeListenerWithCapture);
    }
    function disable() {
      const zoom = swiper.zoom;
      if (!zoom.enabled) return;
      zoom.enabled = false;
      const {
        passiveListener,
        activeListenerWithCapture
      } = getListeners();
  
      // Scale image
      swiper.wrapperEl.removeEventListener('pointerdown', onGestureStart, passiveListener);
      swiper.wrapperEl.removeEventListener('pointermove', onGestureChange, activeListenerWithCapture);
      ['pointerup', 'pointercancel', 'pointerout'].forEach(eventName => {
        swiper.wrapperEl.removeEventListener(eventName, onGestureEnd, passiveListener);
      });
  
      // Move image
      swiper.wrapperEl.removeEventListener('pointermove', onTouchMove, activeListenerWithCapture);
    }
    on('init', () => {
      if (swiper.params.zoom.enabled) {
        enable();
      }
    });
    on('destroy', () => {
      disable();
    });
    on('touchStart', (_s, e) => {
      if (!swiper.zoom.enabled) return;
      onTouchStart(e);
    });
    on('touchEnd', (_s, e) => {
      if (!swiper.zoom.enabled) return;
      onTouchEnd();
    });
    on('doubleTap', (_s, e) => {
      if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
        zoomToggle(e);
      }
    });
    on('transitionEnd', () => {
      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
        onTransitionEnd();
      }
    });
    on('slideChange', () => {
      if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {
        onTransitionEnd();
      }
    });
    Object.assign(swiper.zoom, {
      enable,
      disable,
      in: zoomIn,
      out: zoomOut,
      toggle: zoomToggle
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/controller.mjs
  
  
  /* eslint no-bitwise: ["error", { "allow": [">>"] }] */
  function Controller(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      controller: {
        control: undefined,
        inverse: false,
        by: 'slide' // or 'container'
      }
    });
  
    swiper.controller = {
      control: undefined
    };
    function LinearSpline(x, y) {
      const binarySearch = function search() {
        let maxIndex;
        let minIndex;
        let guess;
        return (array, val) => {
          minIndex = -1;
          maxIndex = array.length;
          while (maxIndex - minIndex > 1) {
            guess = maxIndex + minIndex >> 1;
            if (array[guess] <= val) {
              minIndex = guess;
            } else {
              maxIndex = guess;
            }
          }
          return maxIndex;
        };
      }();
      this.x = x;
      this.y = y;
      this.lastIndex = x.length - 1;
      // Given an x value (x2), return the expected y2 value:
      // (x1,y1) is the known point before given value,
      // (x3,y3) is the known point after given value.
      let i1;
      let i3;
      this.interpolate = function interpolate(x2) {
        if (!x2) return 0;
  
        // Get the indexes of x1 and x3 (the array indexes before and after given x2):
        i3 = binarySearch(this.x, x2);
        i1 = i3 - 1;
  
        // We have our indexes i1 & i3, so we can calculate already:
        // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
        return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];
      };
      return this;
    }
    function getInterpolateFunction(c) {
      swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);
    }
    function setTranslate(_t, byController) {
      const controlled = swiper.controller.control;
      let multiplier;
      let controlledTranslate;
      const Swiper = swiper.constructor;
      function setControlledTranslate(c) {
        if (c.destroyed) return;
  
        // this will create an Interpolate function based on the snapGrids
        // x is the Grid of the scrolled scroller and y will be the controlled scroller
        // it makes sense to create this only once and recall it for the interpolation
        // the function does a lot of value caching for performance
        const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;
        if (swiper.params.controller.by === 'slide') {
          getInterpolateFunction(c);
          // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
          // but it did not work out
          controlledTranslate = -swiper.controller.spline.interpolate(-translate);
        }
        if (!controlledTranslate || swiper.params.controller.by === 'container') {
          multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
          if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {
            multiplier = 1;
          }
          controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();
        }
        if (swiper.params.controller.inverse) {
          controlledTranslate = c.maxTranslate() - controlledTranslate;
        }
        c.updateProgress(controlledTranslate);
        c.setTranslate(controlledTranslate, swiper);
        c.updateActiveIndex();
        c.updateSlidesClasses();
      }
      if (Array.isArray(controlled)) {
        for (let i = 0; i < controlled.length; i += 1) {
          if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
            setControlledTranslate(controlled[i]);
          }
        }
      } else if (controlled instanceof Swiper && byController !== controlled) {
        setControlledTranslate(controlled);
      }
    }
    function setTransition(duration, byController) {
      const Swiper = swiper.constructor;
      const controlled = swiper.controller.control;
      let i;
      function setControlledTransition(c) {
        if (c.destroyed) return;
        c.setTransition(duration, swiper);
        if (duration !== 0) {
          c.transitionStart();
          if (c.params.autoHeight) {
            nextTick(() => {
              c.updateAutoHeight();
            });
          }
          elementTransitionEnd(c.wrapperEl, () => {
            if (!controlled) return;
            c.transitionEnd();
          });
        }
      }
      if (Array.isArray(controlled)) {
        for (i = 0; i < controlled.length; i += 1) {
          if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
            setControlledTransition(controlled[i]);
          }
        }
      } else if (controlled instanceof Swiper && byController !== controlled) {
        setControlledTransition(controlled);
      }
    }
    function removeSpline() {
      if (!swiper.controller.control) return;
      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    }
    on('beforeInit', () => {
      if (typeof window !== 'undefined' && (
      // eslint-disable-line
      typeof swiper.params.controller.control === 'string' || swiper.params.controller.control instanceof HTMLElement)) {
        const controlElement = document.querySelector(swiper.params.controller.control);
        if (controlElement && controlElement.swiper) {
          swiper.controller.control = controlElement.swiper;
        } else if (controlElement) {
          const onControllerSwiper = e => {
            swiper.controller.control = e.detail[0];
            swiper.update();
            controlElement.removeEventListener('init', onControllerSwiper);
          };
          controlElement.addEventListener('init', onControllerSwiper);
        }
        return;
      }
      swiper.controller.control = swiper.params.controller.control;
    });
    on('update', () => {
      removeSpline();
    });
    on('resize', () => {
      removeSpline();
    });
    on('observerUpdate', () => {
      removeSpline();
    });
    on('setTranslate', (_s, translate, byController) => {
      if (!swiper.controller.control || swiper.controller.control.destroyed) return;
      swiper.controller.setTranslate(translate, byController);
    });
    on('setTransition', (_s, duration, byController) => {
      if (!swiper.controller.control || swiper.controller.control.destroyed) return;
      swiper.controller.setTransition(duration, byController);
    });
    Object.assign(swiper.controller, {
      setTranslate,
      setTransition
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/a11y.mjs
  
  
  
  function A11y(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      a11y: {
        enabled: true,
        notificationClass: 'swiper-notification',
        prevSlideMessage: 'Previous slide',
        nextSlideMessage: 'Next slide',
        firstSlideMessage: 'This is the first slide',
        lastSlideMessage: 'This is the last slide',
        paginationBulletMessage: 'Go to slide {{index}}',
        slideLabelMessage: '{{index}} / {{slidesLength}}',
        containerMessage: null,
        containerRoleDescriptionMessage: null,
        itemRoleDescriptionMessage: null,
        slideRole: 'group',
        id: null
      }
    });
    swiper.a11y = {
      clicked: false
    };
    let liveRegion = null;
    function notify(message) {
      const notification = liveRegion;
      if (notification.length === 0) return;
      notification.innerHTML = '';
      notification.innerHTML = message;
    }
    const makeElementsArray = el => (Array.isArray(el) ? el : [el]).filter(e => !!e);
    function getRandomNumber(size) {
      if (size === void 0) {
        size = 16;
      }
      const randomChar = () => Math.round(16 * Math.random()).toString(16);
      return 'x'.repeat(size).replace(/x/g, randomChar);
    }
    function makeElFocusable(el) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('tabIndex', '0');
      });
    }
    function makeElNotFocusable(el) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('tabIndex', '-1');
      });
    }
    function addElRole(el, role) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('role', role);
      });
    }
    function addElRoleDescription(el, description) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('aria-roledescription', description);
      });
    }
    function addElControls(el, controls) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('aria-controls', controls);
      });
    }
    function addElLabel(el, label) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('aria-label', label);
      });
    }
    function addElId(el, id) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('id', id);
      });
    }
    function addElLive(el, live) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('aria-live', live);
      });
    }
    function disableEl(el) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('aria-disabled', true);
      });
    }
    function enableEl(el) {
      el = makeElementsArray(el);
      el.forEach(subEl => {
        subEl.setAttribute('aria-disabled', false);
      });
    }
    function onEnterOrSpaceKey(e) {
      if (e.keyCode !== 13 && e.keyCode !== 32) return;
      const params = swiper.params.a11y;
      const targetEl = e.target;
      if (swiper.pagination && swiper.pagination.el && (targetEl === swiper.pagination.el || swiper.pagination.el.contains(e.target))) {
        if (!e.target.matches(classesToSelector(swiper.params.pagination.bulletClass))) return;
      }
      if (swiper.navigation && swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl) {
        if (!(swiper.isEnd && !swiper.params.loop)) {
          swiper.slideNext();
        }
        if (swiper.isEnd) {
          notify(params.lastSlideMessage);
        } else {
          notify(params.nextSlideMessage);
        }
      }
      if (swiper.navigation && swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl) {
        if (!(swiper.isBeginning && !swiper.params.loop)) {
          swiper.slidePrev();
        }
        if (swiper.isBeginning) {
          notify(params.firstSlideMessage);
        } else {
          notify(params.prevSlideMessage);
        }
      }
      if (swiper.pagination && targetEl.matches(classesToSelector(swiper.params.pagination.bulletClass))) {
        targetEl.click();
      }
    }
    function updateNavigation() {
      if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;
      const {
        nextEl,
        prevEl
      } = swiper.navigation;
      if (prevEl) {
        if (swiper.isBeginning) {
          disableEl(prevEl);
          makeElNotFocusable(prevEl);
        } else {
          enableEl(prevEl);
          makeElFocusable(prevEl);
        }
      }
      if (nextEl) {
        if (swiper.isEnd) {
          disableEl(nextEl);
          makeElNotFocusable(nextEl);
        } else {
          enableEl(nextEl);
          makeElFocusable(nextEl);
        }
      }
    }
    function hasPagination() {
      return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;
    }
    function hasClickablePagination() {
      return hasPagination() && swiper.params.pagination.clickable;
    }
    function updatePagination() {
      const params = swiper.params.a11y;
      if (!hasPagination()) return;
      swiper.pagination.bullets.forEach(bulletEl => {
        if (swiper.params.pagination.clickable) {
          makeElFocusable(bulletEl);
          if (!swiper.params.pagination.renderBullet) {
            addElRole(bulletEl, 'button');
            addElLabel(bulletEl, params.paginationBulletMessage.replace(/\{\{index\}\}/, elementIndex(bulletEl) + 1));
          }
        }
        if (bulletEl.matches(classesToSelector(swiper.params.pagination.bulletActiveClass))) {
          bulletEl.setAttribute('aria-current', 'true');
        } else {
          bulletEl.removeAttribute('aria-current');
        }
      });
    }
    const initNavEl = (el, wrapperId, message) => {
      makeElFocusable(el);
      if (el.tagName !== 'BUTTON') {
        addElRole(el, 'button');
        el.addEventListener('keydown', onEnterOrSpaceKey);
      }
      addElLabel(el, message);
      addElControls(el, wrapperId);
    };
    const handlePointerDown = () => {
      swiper.a11y.clicked = true;
    };
    const handlePointerUp = () => {
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          if (!swiper.destroyed) {
            swiper.a11y.clicked = false;
          }
        });
      });
    };
    const handleFocus = e => {
      if (swiper.a11y.clicked) return;
      const slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);
      if (!slideEl || !swiper.slides.includes(slideEl)) return;
      const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;
      const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);
      if (isActive || isVisible) return;
      if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents) return;
      if (swiper.isHorizontal()) {
        swiper.el.scrollLeft = 0;
      } else {
        swiper.el.scrollTop = 0;
      }
      swiper.slideTo(swiper.slides.indexOf(slideEl), 0);
    };
    const initSlides = () => {
      const params = swiper.params.a11y;
      if (params.itemRoleDescriptionMessage) {
        addElRoleDescription(swiper.slides, params.itemRoleDescriptionMessage);
      }
      if (params.slideRole) {
        addElRole(swiper.slides, params.slideRole);
      }
      const slidesLength = swiper.slides.length;
      if (params.slideLabelMessage) {
        swiper.slides.forEach((slideEl, index) => {
          const slideIndex = swiper.params.loop ? parseInt(slideEl.getAttribute('data-swiper-slide-index'), 10) : index;
          const ariaLabelMessage = params.slideLabelMessage.replace(/\{\{index\}\}/, slideIndex + 1).replace(/\{\{slidesLength\}\}/, slidesLength);
          addElLabel(slideEl, ariaLabelMessage);
        });
      }
    };
    const init = () => {
      const params = swiper.params.a11y;
      swiper.el.append(liveRegion);
  
      // Container
      const containerEl = swiper.el;
      if (params.containerRoleDescriptionMessage) {
        addElRoleDescription(containerEl, params.containerRoleDescriptionMessage);
      }
      if (params.containerMessage) {
        addElLabel(containerEl, params.containerMessage);
      }
  
      // Wrapper
      const wrapperEl = swiper.wrapperEl;
      const wrapperId = params.id || wrapperEl.getAttribute('id') || `swiper-wrapper-${getRandomNumber(16)}`;
      const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';
      addElId(wrapperEl, wrapperId);
      addElLive(wrapperEl, live);
  
      // Slide
      initSlides();
  
      // Navigation
      let {
        nextEl,
        prevEl
      } = swiper.navigation ? swiper.navigation : {};
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      if (nextEl) {
        nextEl.forEach(el => initNavEl(el, wrapperId, params.nextSlideMessage));
      }
      if (prevEl) {
        prevEl.forEach(el => initNavEl(el, wrapperId, params.prevSlideMessage));
      }
  
      // Pagination
      if (hasClickablePagination()) {
        const paginationEl = Array.isArray(swiper.pagination.el) ? swiper.pagination.el : [swiper.pagination.el];
        paginationEl.forEach(el => {
          el.addEventListener('keydown', onEnterOrSpaceKey);
        });
      }
  
      // Tab focus
      swiper.el.addEventListener('focus', handleFocus, true);
      swiper.el.addEventListener('pointerdown', handlePointerDown, true);
      swiper.el.addEventListener('pointerup', handlePointerUp, true);
    };
    function destroy() {
      if (liveRegion) liveRegion.remove();
      let {
        nextEl,
        prevEl
      } = swiper.navigation ? swiper.navigation : {};
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      if (nextEl) {
        nextEl.forEach(el => el.removeEventListener('keydown', onEnterOrSpaceKey));
      }
      if (prevEl) {
        prevEl.forEach(el => el.removeEventListener('keydown', onEnterOrSpaceKey));
      }
  
      // Pagination
      if (hasClickablePagination()) {
        const paginationEl = Array.isArray(swiper.pagination.el) ? swiper.pagination.el : [swiper.pagination.el];
        paginationEl.forEach(el => {
          el.removeEventListener('keydown', onEnterOrSpaceKey);
        });
      }
  
      // Tab focus
      swiper.el.removeEventListener('focus', handleFocus, true);
      swiper.el.removeEventListener('pointerdown', handlePointerDown, true);
      swiper.el.removeEventListener('pointerup', handlePointerUp, true);
    }
    on('beforeInit', () => {
      liveRegion = createElement('span', swiper.params.a11y.notificationClass);
      liveRegion.setAttribute('aria-live', 'assertive');
      liveRegion.setAttribute('aria-atomic', 'true');
    });
    on('afterInit', () => {
      if (!swiper.params.a11y.enabled) return;
      init();
    });
    on('slidesLengthChange snapGridLengthChange slidesGridLengthChange', () => {
      if (!swiper.params.a11y.enabled) return;
      initSlides();
    });
    on('fromEdge toEdge afterInit lock unlock', () => {
      if (!swiper.params.a11y.enabled) return;
      updateNavigation();
    });
    on('paginationUpdate', () => {
      if (!swiper.params.a11y.enabled) return;
      updatePagination();
    });
    on('destroy', () => {
      if (!swiper.params.a11y.enabled) return;
      destroy();
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/history.mjs
  
  
  function History(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      history: {
        enabled: false,
        root: '',
        replaceState: false,
        key: 'slides',
        keepQuery: false
      }
    });
    let initialized = false;
    let paths = {};
    const slugify = text => {
      return text.toString().replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
    };
    const getPathValues = urlOverride => {
      const window = getWindow();
      let location;
      if (urlOverride) {
        location = new URL(urlOverride);
      } else {
        location = window.location;
      }
      const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');
      const total = pathArray.length;
      const key = pathArray[total - 2];
      const value = pathArray[total - 1];
      return {
        key,
        value
      };
    };
    const setHistory = (key, index) => {
      const window = getWindow();
      if (!initialized || !swiper.params.history.enabled) return;
      let location;
      if (swiper.params.url) {
        location = new URL(swiper.params.url);
      } else {
        location = window.location;
      }
      const slide = swiper.slides[index];
      let value = slugify(slide.getAttribute('data-history'));
      if (swiper.params.history.root.length > 0) {
        let root = swiper.params.history.root;
        if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);
        value = `${root}/${key ? `${key}/` : ''}${value}`;
      } else if (!location.pathname.includes(key)) {
        value = `${key ? `${key}/` : ''}${value}`;
      }
      if (swiper.params.history.keepQuery) {
        value += location.search;
      }
      const currentState = window.history.state;
      if (currentState && currentState.value === value) {
        return;
      }
      if (swiper.params.history.replaceState) {
        window.history.replaceState({
          value
        }, null, value);
      } else {
        window.history.pushState({
          value
        }, null, value);
      }
    };
    const scrollToSlide = (speed, value, runCallbacks) => {
      if (value) {
        for (let i = 0, length = swiper.slides.length; i < length; i += 1) {
          const slide = swiper.slides[i];
          const slideHistory = slugify(slide.getAttribute('data-history'));
          if (slideHistory === value) {
            const index = swiper.getSlideIndex(slide);
            swiper.slideTo(index, speed, runCallbacks);
          }
        }
      } else {
        swiper.slideTo(0, speed, runCallbacks);
      }
    };
    const setHistoryPopState = () => {
      paths = getPathValues(swiper.params.url);
      scrollToSlide(swiper.params.speed, paths.value, false);
    };
    const init = () => {
      const window = getWindow();
      if (!swiper.params.history) return;
      if (!window.history || !window.history.pushState) {
        swiper.params.history.enabled = false;
        swiper.params.hashNavigation.enabled = true;
        return;
      }
      initialized = true;
      paths = getPathValues(swiper.params.url);
      if (!paths.key && !paths.value) {
        if (!swiper.params.history.replaceState) {
          window.addEventListener('popstate', setHistoryPopState);
        }
        return;
      }
      scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);
      if (!swiper.params.history.replaceState) {
        window.addEventListener('popstate', setHistoryPopState);
      }
    };
    const destroy = () => {
      const window = getWindow();
      if (!swiper.params.history.replaceState) {
        window.removeEventListener('popstate', setHistoryPopState);
      }
    };
    on('init', () => {
      if (swiper.params.history.enabled) {
        init();
      }
    });
    on('destroy', () => {
      if (swiper.params.history.enabled) {
        destroy();
      }
    });
    on('transitionEnd _freeModeNoMomentumRelease', () => {
      if (initialized) {
        setHistory(swiper.params.history.key, swiper.activeIndex);
      }
    });
    on('slideChange', () => {
      if (initialized && swiper.params.cssMode) {
        setHistory(swiper.params.history.key, swiper.activeIndex);
      }
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/hash-navigation.mjs
  
  
  
  function HashNavigation(_ref) {
    let {
      swiper,
      extendParams,
      emit,
      on
    } = _ref;
    let initialized = false;
    const document = getDocument();
    const window = getWindow();
    extendParams({
      hashNavigation: {
        enabled: false,
        replaceState: false,
        watchState: false,
        getSlideIndex(_s, hash) {
          if (swiper.virtual && swiper.params.virtual.enabled) {
            const slideWithHash = swiper.slides.filter(slideEl => slideEl.getAttribute('data-hash') === hash)[0];
            if (!slideWithHash) return 0;
            const index = parseInt(slideWithHash.getAttribute('data-swiper-slide-index'), 10);
            return index;
          }
          return swiper.getSlideIndex(elementChildren(swiper.slidesEl, `.${swiper.params.slideClass}[data-hash="${hash}"], swiper-slide[data-hash="${hash}"]`)[0]);
        }
      }
    });
    const onHashChange = () => {
      emit('hashChange');
      const newHash = document.location.hash.replace('#', '');
      const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index="${swiper.activeIndex}"]`) : swiper.slides[swiper.activeIndex];
      const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute('data-hash') : '';
      if (newHash !== activeSlideHash) {
        const newIndex = swiper.params.hashNavigation.getSlideIndex(swiper, newHash);
        if (typeof newIndex === 'undefined' || Number.isNaN(newIndex)) return;
        swiper.slideTo(newIndex);
      }
    };
    const setHash = () => {
      if (!initialized || !swiper.params.hashNavigation.enabled) return;
      const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index="${swiper.activeIndex}"]`) : swiper.slides[swiper.activeIndex];
      const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute('data-hash') || activeSlideEl.getAttribute('data-history') : '';
      if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {
        window.history.replaceState(null, null, `#${activeSlideHash}` || '');
        emit('hashSet');
      } else {
        document.location.hash = activeSlideHash || '';
        emit('hashSet');
      }
    };
    const init = () => {
      if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;
      initialized = true;
      const hash = document.location.hash.replace('#', '');
      if (hash) {
        const speed = 0;
        const index = swiper.params.hashNavigation.getSlideIndex(swiper, hash);
        swiper.slideTo(index || 0, speed, swiper.params.runCallbacksOnInit, true);
      }
      if (swiper.params.hashNavigation.watchState) {
        window.addEventListener('hashchange', onHashChange);
      }
    };
    const destroy = () => {
      if (swiper.params.hashNavigation.watchState) {
        window.removeEventListener('hashchange', onHashChange);
      }
    };
    on('init', () => {
      if (swiper.params.hashNavigation.enabled) {
        init();
      }
    });
    on('destroy', () => {
      if (swiper.params.hashNavigation.enabled) {
        destroy();
      }
    });
    on('transitionEnd _freeModeNoMomentumRelease', () => {
      if (initialized) {
        setHash();
      }
    });
    on('slideChange', () => {
      if (initialized && swiper.params.cssMode) {
        setHash();
      }
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/autoplay.mjs
  
  
  /* eslint no-underscore-dangle: "off" */
  /* eslint no-use-before-define: "off" */
  function Autoplay(_ref) {
    let {
      swiper,
      extendParams,
      on,
      emit,
      params
    } = _ref;
    swiper.autoplay = {
      running: false,
      paused: false,
      timeLeft: 0
    };
    extendParams({
      autoplay: {
        enabled: false,
        delay: 3000,
        waitForTransition: true,
        disableOnInteraction: false,
        stopOnLastSlide: false,
        reverseDirection: false,
        pauseOnMouseEnter: false
      }
    });
    let timeout;
    let raf;
    let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3000;
    let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3000;
    let autoplayTimeLeft;
    let autoplayStartTime = new Date().getTime();
    let wasPaused;
    let isTouched;
    let pausedByTouch;
    let touchStartTimeout;
    let slideChanged;
    let pausedByInteraction;
    let pausedByPointerEnter;
    function onTransitionEnd(e) {
      if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;
      if (e.target !== swiper.wrapperEl) return;
      swiper.wrapperEl.removeEventListener('transitionend', onTransitionEnd);
      if (pausedByPointerEnter) {
        return;
      }
      resume();
    }
    const calcTimeLeft = () => {
      if (swiper.destroyed || !swiper.autoplay.running) return;
      if (swiper.autoplay.paused) {
        wasPaused = true;
      } else if (wasPaused) {
        autoplayDelayCurrent = autoplayTimeLeft;
        wasPaused = false;
      }
      const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();
      swiper.autoplay.timeLeft = timeLeft;
      emit('autoplayTimeLeft', timeLeft, timeLeft / autoplayDelayTotal);
      raf = requestAnimationFrame(() => {
        calcTimeLeft();
      });
    };
    const getSlideDelay = () => {
      let activeSlideEl;
      if (swiper.virtual && swiper.params.virtual.enabled) {
        activeSlideEl = swiper.slides.filter(slideEl => slideEl.classList.contains('swiper-slide-active'))[0];
      } else {
        activeSlideEl = swiper.slides[swiper.activeIndex];
      }
      if (!activeSlideEl) return undefined;
      const currentSlideDelay = parseInt(activeSlideEl.getAttribute('data-swiper-autoplay'), 10);
      return currentSlideDelay;
    };
    const run = delayForce => {
      if (swiper.destroyed || !swiper.autoplay.running) return;
      cancelAnimationFrame(raf);
      calcTimeLeft();
      let delay = typeof delayForce === 'undefined' ? swiper.params.autoplay.delay : delayForce;
      autoplayDelayTotal = swiper.params.autoplay.delay;
      autoplayDelayCurrent = swiper.params.autoplay.delay;
      const currentSlideDelay = getSlideDelay();
      if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === 'undefined') {
        delay = currentSlideDelay;
        autoplayDelayTotal = currentSlideDelay;
        autoplayDelayCurrent = currentSlideDelay;
      }
      autoplayTimeLeft = delay;
      const speed = swiper.params.speed;
      const proceed = () => {
        if (!swiper || swiper.destroyed) return;
        if (swiper.params.autoplay.reverseDirection) {
          if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {
            swiper.slidePrev(speed, true, true);
            emit('autoplay');
          } else if (!swiper.params.autoplay.stopOnLastSlide) {
            swiper.slideTo(swiper.slides.length - 1, speed, true, true);
            emit('autoplay');
          }
        } else {
          if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {
            swiper.slideNext(speed, true, true);
            emit('autoplay');
          } else if (!swiper.params.autoplay.stopOnLastSlide) {
            swiper.slideTo(0, speed, true, true);
            emit('autoplay');
          }
        }
        if (swiper.params.cssMode) {
          autoplayStartTime = new Date().getTime();
          requestAnimationFrame(() => {
            run();
          });
        }
      };
      if (delay > 0) {
        clearTimeout(timeout);
        timeout = setTimeout(() => {
          proceed();
        }, delay);
      } else {
        requestAnimationFrame(() => {
          proceed();
        });
      }
  
      // eslint-disable-next-line
      return delay;
    };
    const start = () => {
      autoplayStartTime = new Date().getTime();
      swiper.autoplay.running = true;
      run();
      emit('autoplayStart');
    };
    const stop = () => {
      swiper.autoplay.running = false;
      clearTimeout(timeout);
      cancelAnimationFrame(raf);
      emit('autoplayStop');
    };
    const pause = (internal, reset) => {
      if (swiper.destroyed || !swiper.autoplay.running) return;
      clearTimeout(timeout);
      if (!internal) {
        pausedByInteraction = true;
      }
      const proceed = () => {
        emit('autoplayPause');
        if (swiper.params.autoplay.waitForTransition) {
          swiper.wrapperEl.addEventListener('transitionend', onTransitionEnd);
        } else {
          resume();
        }
      };
      swiper.autoplay.paused = true;
      if (reset) {
        if (slideChanged) {
          autoplayTimeLeft = swiper.params.autoplay.delay;
        }
        slideChanged = false;
        proceed();
        return;
      }
      const delay = autoplayTimeLeft || swiper.params.autoplay.delay;
      autoplayTimeLeft = delay - (new Date().getTime() - autoplayStartTime);
      if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;
      if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;
      proceed();
    };
    const resume = () => {
      if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;
      autoplayStartTime = new Date().getTime();
      if (pausedByInteraction) {
        pausedByInteraction = false;
        run(autoplayTimeLeft);
      } else {
        run();
      }
      swiper.autoplay.paused = false;
      emit('autoplayResume');
    };
    const onVisibilityChange = () => {
      if (swiper.destroyed || !swiper.autoplay.running) return;
      const document = ssr_window_esm_getDocument();
      if (document.visibilityState === 'hidden') {
        pausedByInteraction = true;
        pause(true);
      }
      if (document.visibilityState === 'visible') {
        resume();
      }
    };
    const onPointerEnter = e => {
      if (e.pointerType !== 'mouse') return;
      pausedByInteraction = true;
      pausedByPointerEnter = true;
      if (swiper.animating || swiper.autoplay.paused) return;
      pause(true);
    };
    const onPointerLeave = e => {
      if (e.pointerType !== 'mouse') return;
      pausedByPointerEnter = false;
      if (swiper.autoplay.paused) {
        resume();
      }
    };
    const attachMouseEvents = () => {
      if (swiper.params.autoplay.pauseOnMouseEnter) {
        swiper.el.addEventListener('pointerenter', onPointerEnter);
        swiper.el.addEventListener('pointerleave', onPointerLeave);
      }
    };
    const detachMouseEvents = () => {
      swiper.el.removeEventListener('pointerenter', onPointerEnter);
      swiper.el.removeEventListener('pointerleave', onPointerLeave);
    };
    const attachDocumentEvents = () => {
      const document = ssr_window_esm_getDocument();
      document.addEventListener('visibilitychange', onVisibilityChange);
    };
    const detachDocumentEvents = () => {
      const document = ssr_window_esm_getDocument();
      document.removeEventListener('visibilitychange', onVisibilityChange);
    };
    on('init', () => {
      if (swiper.params.autoplay.enabled) {
        attachMouseEvents();
        attachDocumentEvents();
        start();
      }
    });
    on('destroy', () => {
      detachMouseEvents();
      detachDocumentEvents();
      if (swiper.autoplay.running) {
        stop();
      }
    });
    on('_freeModeStaticRelease', () => {
      if (pausedByTouch || pausedByInteraction) {
        resume();
      }
    });
    on('_freeModeNoMomentumRelease', () => {
      if (!swiper.params.autoplay.disableOnInteraction) {
        pause(true, true);
      } else {
        stop();
      }
    });
    on('beforeTransitionStart', (_s, speed, internal) => {
      if (swiper.destroyed || !swiper.autoplay.running) return;
      if (internal || !swiper.params.autoplay.disableOnInteraction) {
        pause(true, true);
      } else {
        stop();
      }
    });
    on('sliderFirstMove', () => {
      if (swiper.destroyed || !swiper.autoplay.running) return;
      if (swiper.params.autoplay.disableOnInteraction) {
        stop();
        return;
      }
      isTouched = true;
      pausedByTouch = false;
      pausedByInteraction = false;
      touchStartTimeout = setTimeout(() => {
        pausedByInteraction = true;
        pausedByTouch = true;
        pause(true);
      }, 200);
    });
    on('touchEnd', () => {
      if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;
      clearTimeout(touchStartTimeout);
      clearTimeout(timeout);
      if (swiper.params.autoplay.disableOnInteraction) {
        pausedByTouch = false;
        isTouched = false;
        return;
      }
      if (pausedByTouch && swiper.params.cssMode) resume();
      pausedByTouch = false;
      isTouched = false;
    });
    on('slideChange', () => {
      if (swiper.destroyed || !swiper.autoplay.running) return;
      slideChanged = true;
    });
    Object.assign(swiper.autoplay, {
      start,
      stop,
      pause,
      resume
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/thumbs.mjs
  
  
  
  function Thumb(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      thumbs: {
        swiper: null,
        multipleActiveThumbs: true,
        autoScrollOffset: 0,
        slideThumbActiveClass: 'swiper-slide-thumb-active',
        thumbsContainerClass: 'swiper-thumbs'
      }
    });
    let initialized = false;
    let swiperCreated = false;
    swiper.thumbs = {
      swiper: null
    };
    function onThumbClick() {
      const thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper || thumbsSwiper.destroyed) return;
      const clickedIndex = thumbsSwiper.clickedIndex;
      const clickedSlide = thumbsSwiper.clickedSlide;
      if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;
      if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;
      let slideToIndex;
      if (thumbsSwiper.params.loop) {
        slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);
      } else {
        slideToIndex = clickedIndex;
      }
      if (swiper.params.loop) {
        swiper.slideToLoop(slideToIndex);
      } else {
        swiper.slideTo(slideToIndex);
      }
    }
    function init() {
      const {
        thumbs: thumbsParams
      } = swiper.params;
      if (initialized) return false;
      initialized = true;
      const SwiperClass = swiper.constructor;
      if (thumbsParams.swiper instanceof SwiperClass) {
        swiper.thumbs.swiper = thumbsParams.swiper;
        Object.assign(swiper.thumbs.swiper.originalParams, {
          watchSlidesProgress: true,
          slideToClickedSlide: false
        });
        Object.assign(swiper.thumbs.swiper.params, {
          watchSlidesProgress: true,
          slideToClickedSlide: false
        });
        swiper.thumbs.swiper.update();
      } else if (isObject(thumbsParams.swiper)) {
        const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);
        Object.assign(thumbsSwiperParams, {
          watchSlidesProgress: true,
          slideToClickedSlide: false
        });
        swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);
        swiperCreated = true;
      }
      swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);
      swiper.thumbs.swiper.on('tap', onThumbClick);
      return true;
    }
    function update(initial) {
      const thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper || thumbsSwiper.destroyed) return;
      const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;
  
      // Activate thumbs
      let thumbsToActivate = 1;
      const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;
      if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
        thumbsToActivate = swiper.params.slidesPerView;
      }
      if (!swiper.params.thumbs.multipleActiveThumbs) {
        thumbsToActivate = 1;
      }
      thumbsToActivate = Math.floor(thumbsToActivate);
      thumbsSwiper.slides.forEach(slideEl => slideEl.classList.remove(thumbActiveClass));
      if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {
        for (let i = 0; i < thumbsToActivate; i += 1) {
          elementChildren(thumbsSwiper.slidesEl, `[data-swiper-slide-index="${swiper.realIndex + i}"]`).forEach(slideEl => {
            slideEl.classList.add(thumbActiveClass);
          });
        }
      } else {
        for (let i = 0; i < thumbsToActivate; i += 1) {
          if (thumbsSwiper.slides[swiper.realIndex + i]) {
            thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);
          }
        }
      }
      const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
      const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;
      if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
        const currentThumbsIndex = thumbsSwiper.activeIndex;
        let newThumbsIndex;
        let direction;
        if (thumbsSwiper.params.loop) {
          const newThumbsSlide = thumbsSwiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') === `${swiper.realIndex}`)[0];
          newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);
          direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';
        } else {
          newThumbsIndex = swiper.realIndex;
          direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';
        }
        if (useOffset) {
          newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;
        }
        if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
          if (thumbsSwiper.params.centeredSlides) {
            if (newThumbsIndex > currentThumbsIndex) {
              newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
            } else {
              newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
            }
          } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;
          thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
        }
      }
    }
    on('beforeInit', () => {
      const {
        thumbs
      } = swiper.params;
      if (!thumbs || !thumbs.swiper) return;
      if (typeof thumbs.swiper === 'string' || thumbs.swiper instanceof HTMLElement) {
        const document = getDocument();
        const getThumbsElementAndInit = () => {
          const thumbsElement = typeof thumbs.swiper === 'string' ? document.querySelector(thumbs.swiper) : thumbs.swiper;
          if (thumbsElement && thumbsElement.swiper) {
            thumbs.swiper = thumbsElement.swiper;
            init();
            update(true);
          } else if (thumbsElement) {
            const onThumbsSwiper = e => {
              thumbs.swiper = e.detail[0];
              thumbsElement.removeEventListener('init', onThumbsSwiper);
              init();
              update(true);
              thumbs.swiper.update();
              swiper.update();
            };
            thumbsElement.addEventListener('init', onThumbsSwiper);
          }
          return thumbsElement;
        };
        const watchForThumbsToAppear = () => {
          if (swiper.destroyed) return;
          const thumbsElement = getThumbsElementAndInit();
          if (!thumbsElement) {
            requestAnimationFrame(watchForThumbsToAppear);
          }
        };
        requestAnimationFrame(watchForThumbsToAppear);
      } else {
        init();
        update(true);
      }
    });
    on('slideChange update resize observerUpdate', () => {
      update();
    });
    on('setTransition', (_s, duration) => {
      const thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper || thumbsSwiper.destroyed) return;
      thumbsSwiper.setTransition(duration);
    });
    on('beforeDestroy', () => {
      const thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper || thumbsSwiper.destroyed) return;
      if (swiperCreated) {
        thumbsSwiper.destroy();
      }
    });
    Object.assign(swiper.thumbs, {
      init,
      update
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/free-mode.mjs
  
  
  function freeMode(_ref) {
    let {
      swiper,
      extendParams,
      emit,
      once
    } = _ref;
    extendParams({
      freeMode: {
        enabled: false,
        momentum: true,
        momentumRatio: 1,
        momentumBounce: true,
        momentumBounceRatio: 1,
        momentumVelocityRatio: 1,
        sticky: false,
        minimumVelocity: 0.02
      }
    });
    function onTouchStart() {
      if (swiper.params.cssMode) return;
      const translate = swiper.getTranslate();
      swiper.setTranslate(translate);
      swiper.setTransition(0);
      swiper.touchEventsData.velocities.length = 0;
      swiper.freeMode.onTouchEnd({
        currentPos: swiper.rtl ? swiper.translate : -swiper.translate
      });
    }
    function onTouchMove() {
      if (swiper.params.cssMode) return;
      const {
        touchEventsData: data,
        touches
      } = swiper;
      // Velocity
      if (data.velocities.length === 0) {
        data.velocities.push({
          position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
          time: data.touchStartTime
        });
      }
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
        time: now()
      });
    }
    function onTouchEnd(_ref2) {
      let {
        currentPos
      } = _ref2;
      if (swiper.params.cssMode) return;
      const {
        params,
        wrapperEl,
        rtlTranslate: rtl,
        snapGrid,
        touchEventsData: data
      } = swiper;
      // Time diff
      const touchEndTime = now();
      const timeDiff = touchEndTime - data.touchStartTime;
      if (currentPos < -swiper.minTranslate()) {
        swiper.slideTo(swiper.activeIndex);
        return;
      }
      if (currentPos > -swiper.maxTranslate()) {
        if (swiper.slides.length < snapGrid.length) {
          swiper.slideTo(snapGrid.length - 1);
        } else {
          swiper.slideTo(swiper.slides.length - 1);
        }
        return;
      }
      if (params.freeMode.momentum) {
        if (data.velocities.length > 1) {
          const lastMoveEvent = data.velocities.pop();
          const velocityEvent = data.velocities.pop();
          const distance = lastMoveEvent.position - velocityEvent.position;
          const time = lastMoveEvent.time - velocityEvent.time;
          swiper.velocity = distance / time;
          swiper.velocity /= 2;
          if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {
            swiper.velocity = 0;
          }
          // this implies that the user stopped moving a finger then released.
          // There would be no events with distance zero, so the last event is stale.
          if (time > 150 || now() - lastMoveEvent.time > 300) {
            swiper.velocity = 0;
          }
        } else {
          swiper.velocity = 0;
        }
        swiper.velocity *= params.freeMode.momentumVelocityRatio;
        data.velocities.length = 0;
        let momentumDuration = 1000 * params.freeMode.momentumRatio;
        const momentumDistance = swiper.velocity * momentumDuration;
        let newPosition = swiper.translate + momentumDistance;
        if (rtl) newPosition = -newPosition;
        let doBounce = false;
        let afterBouncePosition;
        const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;
        let needsLoopFix;
        if (newPosition < swiper.maxTranslate()) {
          if (params.freeMode.momentumBounce) {
            if (newPosition + swiper.maxTranslate() < -bounceAmount) {
              newPosition = swiper.maxTranslate() - bounceAmount;
            }
            afterBouncePosition = swiper.maxTranslate();
            doBounce = true;
            data.allowMomentumBounce = true;
          } else {
            newPosition = swiper.maxTranslate();
          }
          if (params.loop && params.centeredSlides) needsLoopFix = true;
        } else if (newPosition > swiper.minTranslate()) {
          if (params.freeMode.momentumBounce) {
            if (newPosition - swiper.minTranslate() > bounceAmount) {
              newPosition = swiper.minTranslate() + bounceAmount;
            }
            afterBouncePosition = swiper.minTranslate();
            doBounce = true;
            data.allowMomentumBounce = true;
          } else {
            newPosition = swiper.minTranslate();
          }
          if (params.loop && params.centeredSlides) needsLoopFix = true;
        } else if (params.freeMode.sticky) {
          let nextSlide;
          for (let j = 0; j < snapGrid.length; j += 1) {
            if (snapGrid[j] > -newPosition) {
              nextSlide = j;
              break;
            }
          }
          if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
            newPosition = snapGrid[nextSlide];
          } else {
            newPosition = snapGrid[nextSlide - 1];
          }
          newPosition = -newPosition;
        }
        if (needsLoopFix) {
          once('transitionEnd', () => {
            swiper.loopFix();
          });
        }
        // Fix duration
        if (swiper.velocity !== 0) {
          if (rtl) {
            momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
          } else {
            momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
          }
          if (params.freeMode.sticky) {
            // If freeMode.sticky is active and the user ends a swipe with a slow-velocity
            // event, then durations can be 20+ seconds to slide one (or zero!) slides.
            // It's easy to see this when simulating touch with mouse events. To fix this,
            // limit single-slide swipes to the default slide duration. This also has the
            // nice side effect of matching slide speed if the user stopped moving before
            // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
            // For faster swipes, also apply limits (albeit higher ones).
            const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
            const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];
            if (moveDistance < currentSlideSize) {
              momentumDuration = params.speed;
            } else if (moveDistance < 2 * currentSlideSize) {
              momentumDuration = params.speed * 1.5;
            } else {
              momentumDuration = params.speed * 2.5;
            }
          }
        } else if (params.freeMode.sticky) {
          swiper.slideToClosest();
          return;
        }
        if (params.freeMode.momentumBounce && doBounce) {
          swiper.updateProgress(afterBouncePosition);
          swiper.setTransition(momentumDuration);
          swiper.setTranslate(newPosition);
          swiper.transitionStart(true, swiper.swipeDirection);
          swiper.animating = true;
          elementTransitionEnd(wrapperEl, () => {
            if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
            emit('momentumBounce');
            swiper.setTransition(params.speed);
            setTimeout(() => {
              swiper.setTranslate(afterBouncePosition);
              elementTransitionEnd(wrapperEl, () => {
                if (!swiper || swiper.destroyed) return;
                swiper.transitionEnd();
              });
            }, 0);
          });
        } else if (swiper.velocity) {
          emit('_freeModeNoMomentumRelease');
          swiper.updateProgress(newPosition);
          swiper.setTransition(momentumDuration);
          swiper.setTranslate(newPosition);
          swiper.transitionStart(true, swiper.swipeDirection);
          if (!swiper.animating) {
            swiper.animating = true;
            elementTransitionEnd(wrapperEl, () => {
              if (!swiper || swiper.destroyed) return;
              swiper.transitionEnd();
            });
          }
        } else {
          swiper.updateProgress(newPosition);
        }
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      } else if (params.freeMode.sticky) {
        swiper.slideToClosest();
        return;
      } else if (params.freeMode) {
        emit('_freeModeNoMomentumRelease');
      }
      if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {
        emit('_freeModeStaticRelease');
        swiper.updateProgress();
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      }
    }
    Object.assign(swiper, {
      freeMode: {
        onTouchStart,
        onTouchMove,
        onTouchEnd
      }
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/effect-target.mjs
  
  
  function effect_target_effectTarget(effectParams, slideEl) {
    const transformEl = getSlideTransformEl(slideEl);
    if (transformEl !== slideEl) {
      transformEl.style.backfaceVisibility = 'hidden';
      transformEl.style['-webkit-backface-visibility'] = 'hidden';
    }
    return transformEl;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/effect-virtual-transition-end.mjs
  
  
  function effect_virtual_transition_end_effectVirtualTransitionEnd(_ref) {
    let {
      swiper,
      duration,
      transformElements,
      allSlides
    } = _ref;
    const {
      activeIndex
    } = swiper;
    const getSlide = el => {
      if (!el.parentElement) {
        // assume shadow root
        const slide = swiper.slides.filter(slideEl => slideEl.shadowRoot && slideEl.shadowRoot === el.parentNode)[0];
        return slide;
      }
      return el.parentElement;
    };
    if (swiper.params.virtualTranslate && duration !== 0) {
      let eventTriggered = false;
      let transitionEndTarget;
      if (allSlides) {
        transitionEndTarget = transformElements;
      } else {
        transitionEndTarget = transformElements.filter(transformEl => {
          const el = transformEl.classList.contains('swiper-slide-transform') ? getSlide(transformEl) : transformEl;
          return swiper.getSlideIndex(el) === activeIndex;
        });
      }
      transitionEndTarget.forEach(el => {
        elementTransitionEnd(el, () => {
          if (eventTriggered) return;
          if (!swiper || swiper.destroyed) return;
          eventTriggered = true;
          swiper.animating = false;
          const evt = new window.CustomEvent('transitionend', {
            bubbles: true,
            cancelable: true
          });
          swiper.wrapperEl.dispatchEvent(evt);
        });
      });
    }
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-fade.mjs
  
  
  
  
  
  function EffectFade(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      fadeEffect: {
        crossFade: false
      }
    });
    const setTranslate = () => {
      const {
        slides
      } = swiper;
      const params = swiper.params.fadeEffect;
      for (let i = 0; i < slides.length; i += 1) {
        const slideEl = swiper.slides[i];
        const offset = slideEl.swiperSlideOffset;
        let tx = -offset;
        if (!swiper.params.virtualTranslate) tx -= swiper.translate;
        let ty = 0;
        if (!swiper.isHorizontal()) {
          ty = tx;
          tx = 0;
        }
        const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(slideEl.progress), 0) : 1 + Math.min(Math.max(slideEl.progress, -1), 0);
        const targetEl = effectTarget(params, slideEl);
        targetEl.style.opacity = slideOpacity;
        targetEl.style.transform = `translate3d(${tx}px, ${ty}px, 0px)`;
      }
    };
    const setTransition = duration => {
      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));
      transformElements.forEach(el => {
        el.style.transitionDuration = `${duration}ms`;
      });
      effectVirtualTransitionEnd({
        swiper,
        duration,
        transformElements,
        allSlides: true
      });
    };
    effectInit({
      effect: 'fade',
      swiper,
      on,
      setTranslate,
      setTransition,
      overwriteParams: () => ({
        slidesPerView: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: !swiper.params.cssMode
      })
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-cube.mjs
  
  
  
  function EffectCube(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      cubeEffect: {
        slideShadows: true,
        shadow: true,
        shadowOffset: 20,
        shadowScale: 0.94
      }
    });
    const createSlideShadows = (slideEl, progress, isHorizontal) => {
      let shadowBefore = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');
      let shadowAfter = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');
      if (!shadowBefore) {
        shadowBefore = createElement('div', `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}`.split(' '));
        slideEl.append(shadowBefore);
      }
      if (!shadowAfter) {
        shadowAfter = createElement('div', `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}`.split(' '));
        slideEl.append(shadowAfter);
      }
      if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);
      if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);
    };
    const recreateShadows = () => {
      // create new ones
      const isHorizontal = swiper.isHorizontal();
      swiper.slides.forEach(slideEl => {
        const progress = Math.max(Math.min(slideEl.progress, 1), -1);
        createSlideShadows(slideEl, progress, isHorizontal);
      });
    };
    const setTranslate = () => {
      const {
        el,
        wrapperEl,
        slides,
        width: swiperWidth,
        height: swiperHeight,
        rtlTranslate: rtl,
        size: swiperSize,
        browser
      } = swiper;
      const params = swiper.params.cubeEffect;
      const isHorizontal = swiper.isHorizontal();
      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
      let wrapperRotate = 0;
      let cubeShadowEl;
      if (params.shadow) {
        if (isHorizontal) {
          cubeShadowEl = swiper.wrapperEl.querySelector('.swiper-cube-shadow');
          if (!cubeShadowEl) {
            cubeShadowEl = createElement('div', 'swiper-cube-shadow');
            swiper.wrapperEl.append(cubeShadowEl);
          }
          cubeShadowEl.style.height = `${swiperWidth}px`;
        } else {
          cubeShadowEl = el.querySelector('.swiper-cube-shadow');
          if (!cubeShadowEl) {
            cubeShadowEl = createElement('div', 'swiper-cube-shadow');
            el.append(cubeShadowEl);
          }
        }
      }
      for (let i = 0; i < slides.length; i += 1) {
        const slideEl = slides[i];
        let slideIndex = i;
        if (isVirtual) {
          slideIndex = parseInt(slideEl.getAttribute('data-swiper-slide-index'), 10);
        }
        let slideAngle = slideIndex * 90;
        let round = Math.floor(slideAngle / 360);
        if (rtl) {
          slideAngle = -slideAngle;
          round = Math.floor(-slideAngle / 360);
        }
        const progress = Math.max(Math.min(slideEl.progress, 1), -1);
        let tx = 0;
        let ty = 0;
        let tz = 0;
        if (slideIndex % 4 === 0) {
          tx = -round * 4 * swiperSize;
          tz = 0;
        } else if ((slideIndex - 1) % 4 === 0) {
          tx = 0;
          tz = -round * 4 * swiperSize;
        } else if ((slideIndex - 2) % 4 === 0) {
          tx = swiperSize + round * 4 * swiperSize;
          tz = swiperSize;
        } else if ((slideIndex - 3) % 4 === 0) {
          tx = -swiperSize;
          tz = 3 * swiperSize + swiperSize * 4 * round;
        }
        if (rtl) {
          tx = -tx;
        }
        if (!isHorizontal) {
          ty = tx;
          tx = 0;
        }
        const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;
        if (progress <= 1 && progress > -1) {
          wrapperRotate = slideIndex * 90 + progress * 90;
          if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;
        }
        slideEl.style.transform = transform;
        if (params.slideShadows) {
          createSlideShadows(slideEl, progress, isHorizontal);
        }
      }
      wrapperEl.style.transformOrigin = `50% 50% -${swiperSize / 2}px`;
      wrapperEl.style['-webkit-transform-origin'] = `50% 50% -${swiperSize / 2}px`;
      if (params.shadow) {
        if (isHorizontal) {
          cubeShadowEl.style.transform = `translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`;
        } else {
          const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;
          const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);
          const scale1 = params.shadowScale;
          const scale2 = params.shadowScale / multiplier;
          const offset = params.shadowOffset;
          cubeShadowEl.style.transform = `scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`;
        }
      }
      const zFactor = (browser.isSafari || browser.isWebView) && browser.needPerspectiveFix ? -swiperSize / 2 : 0;
      wrapperEl.style.transform = `translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`;
      wrapperEl.style.setProperty('--swiper-cube-translate-z', `${zFactor}px`);
    };
    const setTransition = duration => {
      const {
        el,
        slides
      } = swiper;
      slides.forEach(slideEl => {
        slideEl.style.transitionDuration = `${duration}ms`;
        slideEl.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(subEl => {
          subEl.style.transitionDuration = `${duration}ms`;
        });
      });
      if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
        const shadowEl = el.querySelector('.swiper-cube-shadow');
        if (shadowEl) shadowEl.style.transitionDuration = `${duration}ms`;
      }
    };
    effectInit({
      effect: 'cube',
      swiper,
      on,
      setTranslate,
      setTransition,
      recreateShadows,
      getEffectParams: () => swiper.params.cubeEffect,
      perspective: () => true,
      overwriteParams: () => ({
        slidesPerView: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        resistanceRatio: 0,
        spaceBetween: 0,
        centeredSlides: false,
        virtualTranslate: true
      })
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/create-shadow.mjs
  
  
  function create_shadow_createShadow(suffix, slideEl, side) {
    const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}${suffix ? ` swiper-slide-shadow-${suffix}` : ''}`;
    const shadowContainer = getSlideTransformEl(slideEl);
    let shadowEl = shadowContainer.querySelector(`.${shadowClass.split(' ').join('.')}`);
    if (!shadowEl) {
      shadowEl = createElement('div', shadowClass.split(' '));
      shadowContainer.append(shadowEl);
    }
    return shadowEl;
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-flip.mjs
  
  
  
  
  
  
  function EffectFlip(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      flipEffect: {
        slideShadows: true,
        limitRotation: true
      }
    });
    const createSlideShadows = (slideEl, progress) => {
      let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');
      let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');
      if (!shadowBefore) {
        shadowBefore = createShadow('flip', slideEl, swiper.isHorizontal() ? 'left' : 'top');
      }
      if (!shadowAfter) {
        shadowAfter = createShadow('flip', slideEl, swiper.isHorizontal() ? 'right' : 'bottom');
      }
      if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);
      if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);
    };
    const recreateShadows = () => {
      // Set shadows
      swiper.params.flipEffect;
      swiper.slides.forEach(slideEl => {
        let progress = slideEl.progress;
        if (swiper.params.flipEffect.limitRotation) {
          progress = Math.max(Math.min(slideEl.progress, 1), -1);
        }
        createSlideShadows(slideEl, progress);
      });
    };
    const setTranslate = () => {
      const {
        slides,
        rtlTranslate: rtl
      } = swiper;
      const params = swiper.params.flipEffect;
      for (let i = 0; i < slides.length; i += 1) {
        const slideEl = slides[i];
        let progress = slideEl.progress;
        if (swiper.params.flipEffect.limitRotation) {
          progress = Math.max(Math.min(slideEl.progress, 1), -1);
        }
        const offset = slideEl.swiperSlideOffset;
        const rotate = -180 * progress;
        let rotateY = rotate;
        let rotateX = 0;
        let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;
        let ty = 0;
        if (!swiper.isHorizontal()) {
          ty = tx;
          tx = 0;
          rotateX = -rotateY;
          rotateY = 0;
        } else if (rtl) {
          rotateY = -rotateY;
        }
        slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;
        if (params.slideShadows) {
          createSlideShadows(slideEl, progress);
        }
        const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
        const targetEl = effectTarget(params, slideEl);
        targetEl.style.transform = transform;
      }
    };
    const setTransition = duration => {
      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));
      transformElements.forEach(el => {
        el.style.transitionDuration = `${duration}ms`;
        el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {
          shadowEl.style.transitionDuration = `${duration}ms`;
        });
      });
      effectVirtualTransitionEnd({
        swiper,
        duration,
        transformElements
      });
    };
    effectInit({
      effect: 'flip',
      swiper,
      on,
      setTranslate,
      setTransition,
      recreateShadows,
      getEffectParams: () => swiper.params.flipEffect,
      perspective: () => true,
      overwriteParams: () => ({
        slidesPerView: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: !swiper.params.cssMode
      })
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-coverflow.mjs
  
  
  
  
  
  function EffectCoverflow(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      coverflowEffect: {
        rotate: 50,
        stretch: 0,
        depth: 100,
        scale: 1,
        modifier: 1,
        slideShadows: true
      }
    });
    const setTranslate = () => {
      const {
        width: swiperWidth,
        height: swiperHeight,
        slides,
        slidesSizesGrid
      } = swiper;
      const params = swiper.params.coverflowEffect;
      const isHorizontal = swiper.isHorizontal();
      const transform = swiper.translate;
      const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;
      const rotate = isHorizontal ? params.rotate : -params.rotate;
      const translate = params.depth;
      // Each slide offset from center
      for (let i = 0, length = slides.length; i < length; i += 1) {
        const slideEl = slides[i];
        const slideSize = slidesSizesGrid[i];
        const slideOffset = slideEl.swiperSlideOffset;
        const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;
        const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;
        let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
        let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
        // var rotateZ = 0
        let translateZ = -translate * Math.abs(offsetMultiplier);
        let stretch = params.stretch;
        // Allow percentage to make a relative stretch for responsive sliders
        if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {
          stretch = parseFloat(params.stretch) / 100 * slideSize;
        }
        let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;
        let translateX = isHorizontal ? stretch * offsetMultiplier : 0;
        let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);
  
        // Fix for ultra small values
        if (Math.abs(translateX) < 0.001) translateX = 0;
        if (Math.abs(translateY) < 0.001) translateY = 0;
        if (Math.abs(translateZ) < 0.001) translateZ = 0;
        if (Math.abs(rotateY) < 0.001) rotateY = 0;
        if (Math.abs(rotateX) < 0.001) rotateX = 0;
        if (Math.abs(scale) < 0.001) scale = 0;
        const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;
        const targetEl = effectTarget(params, slideEl);
        targetEl.style.transform = slideTransform;
        slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
        if (params.slideShadows) {
          // Set shadows
          let shadowBeforeEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');
          let shadowAfterEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');
          if (!shadowBeforeEl) {
            shadowBeforeEl = createShadow('coverflow', slideEl, isHorizontal ? 'left' : 'top');
          }
          if (!shadowAfterEl) {
            shadowAfterEl = createShadow('coverflow', slideEl, isHorizontal ? 'right' : 'bottom');
          }
          if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
          if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;
        }
      }
    };
    const setTransition = duration => {
      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));
      transformElements.forEach(el => {
        el.style.transitionDuration = `${duration}ms`;
        el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {
          shadowEl.style.transitionDuration = `${duration}ms`;
        });
      });
    };
    effectInit({
      effect: 'coverflow',
      swiper,
      on,
      setTranslate,
      setTransition,
      perspective: () => true,
      overwriteParams: () => ({
        watchSlidesProgress: true
      })
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-creative.mjs
  
  
  
  
  
  
  function EffectCreative(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      creativeEffect: {
        limitProgress: 1,
        shadowPerProgress: false,
        progressMultiplier: 1,
        perspective: true,
        prev: {
          translate: [0, 0, 0],
          rotate: [0, 0, 0],
          opacity: 1,
          scale: 1
        },
        next: {
          translate: [0, 0, 0],
          rotate: [0, 0, 0],
          opacity: 1,
          scale: 1
        }
      }
    });
    const getTranslateValue = value => {
      if (typeof value === 'string') return value;
      return `${value}px`;
    };
    const setTranslate = () => {
      const {
        slides,
        wrapperEl,
        slidesSizesGrid
      } = swiper;
      const params = swiper.params.creativeEffect;
      const {
        progressMultiplier: multiplier
      } = params;
      const isCenteredSlides = swiper.params.centeredSlides;
      if (isCenteredSlides) {
        const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;
        wrapperEl.style.transform = `translateX(calc(50% - ${margin}px))`;
      }
      for (let i = 0; i < slides.length; i += 1) {
        const slideEl = slides[i];
        const slideProgress = slideEl.progress;
        const progress = Math.min(Math.max(slideEl.progress, -params.limitProgress), params.limitProgress);
        let originalProgress = progress;
        if (!isCenteredSlides) {
          originalProgress = Math.min(Math.max(slideEl.originalProgress, -params.limitProgress), params.limitProgress);
        }
        const offset = slideEl.swiperSlideOffset;
        const t = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];
        const r = [0, 0, 0];
        let custom = false;
        if (!swiper.isHorizontal()) {
          t[1] = t[0];
          t[0] = 0;
        }
        let data = {
          translate: [0, 0, 0],
          rotate: [0, 0, 0],
          scale: 1,
          opacity: 1
        };
        if (progress < 0) {
          data = params.next;
          custom = true;
        } else if (progress > 0) {
          data = params.prev;
          custom = true;
        }
        // set translate
        t.forEach((value, index) => {
          t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;
        });
        // set rotates
        r.forEach((value, index) => {
          r[index] = data.rotate[index] * Math.abs(progress * multiplier);
        });
        slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;
        const translateString = t.join(', ');
        const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;
        const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;
        const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;
        const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`;
  
        // Set shadows
        if (custom && data.shadow || !custom) {
          let shadowEl = slideEl.querySelector('.swiper-slide-shadow');
          if (!shadowEl && data.shadow) {
            shadowEl = createShadow('creative', slideEl);
          }
          if (shadowEl) {
            const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;
            shadowEl.style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);
          }
        }
        const targetEl = effectTarget(params, slideEl);
        targetEl.style.transform = transform;
        targetEl.style.opacity = opacityString;
        if (data.origin) {
          targetEl.style.transformOrigin = data.origin;
        }
      }
    };
    const setTransition = duration => {
      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));
      transformElements.forEach(el => {
        el.style.transitionDuration = `${duration}ms`;
        el.querySelectorAll('.swiper-slide-shadow').forEach(shadowEl => {
          shadowEl.style.transitionDuration = `${duration}ms`;
        });
      });
      effectVirtualTransitionEnd({
        swiper,
        duration,
        transformElements,
        allSlides: true
      });
    };
    effectInit({
      effect: 'creative',
      swiper,
      on,
      setTranslate,
      setTransition,
      perspective: () => swiper.params.creativeEffect.perspective,
      overwriteParams: () => ({
        watchSlidesProgress: true,
        virtualTranslate: !swiper.params.cssMode
      })
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-cards.mjs
  
  
  
  
  
  
  function EffectCards(_ref) {
    let {
      swiper,
      extendParams,
      on
    } = _ref;
    extendParams({
      cardsEffect: {
        slideShadows: true,
        rotate: true,
        perSlideRotate: 2,
        perSlideOffset: 8
      }
    });
    const setTranslate = () => {
      const {
        slides,
        activeIndex,
        rtlTranslate: rtl
      } = swiper;
      const params = swiper.params.cardsEffect;
      const {
        startTranslate,
        isTouched
      } = swiper.touchEventsData;
      const currentTranslate = rtl ? -swiper.translate : swiper.translate;
      for (let i = 0; i < slides.length; i += 1) {
        const slideEl = slides[i];
        const slideProgress = slideEl.progress;
        const progress = Math.min(Math.max(slideProgress, -4), 4);
        let offset = slideEl.swiperSlideOffset;
        if (swiper.params.centeredSlides && !swiper.params.cssMode) {
          swiper.wrapperEl.style.transform = `translateX(${swiper.minTranslate()}px)`;
        }
        if (swiper.params.centeredSlides && swiper.params.cssMode) {
          offset -= slides[0].swiperSlideOffset;
        }
        let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;
        let tY = 0;
        const tZ = -100 * Math.abs(progress);
        let scale = 1;
        let rotate = -params.perSlideRotate * progress;
        let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;
        const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;
        const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;
        const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;
        if (isSwipeToNext || isSwipeToPrev) {
          const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;
          rotate += -28 * progress * subProgress;
          scale += -0.5 * subProgress;
          tXAdd += 96 * subProgress;
          tY = `${-25 * subProgress * Math.abs(progress)}%`;
        }
        if (progress < 0) {
          // next
          tX = `calc(${tX}px ${rtl ? '-' : '+'} (${tXAdd * Math.abs(progress)}%))`;
        } else if (progress > 0) {
          // prev
          tX = `calc(${tX}px ${rtl ? '-' : '+'} (-${tXAdd * Math.abs(progress)}%))`;
        } else {
          tX = `${tX}px`;
        }
        if (!swiper.isHorizontal()) {
          const prevY = tY;
          tY = tX;
          tX = prevY;
        }
        const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;
  
        /* eslint-disable */
        const transform = `
          translate3d(${tX}, ${tY}, ${tZ}px)
          rotateZ(${params.rotate ? rtl ? -rotate : rotate : 0}deg)
          scale(${scaleString})
        `;
        /* eslint-enable */
  
        if (params.slideShadows) {
          // Set shadows
          let shadowEl = slideEl.querySelector('.swiper-slide-shadow');
          if (!shadowEl) {
            shadowEl = createShadow('cards', slideEl);
          }
          if (shadowEl) shadowEl.style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);
        }
        slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;
        const targetEl = effectTarget(params, slideEl);
        targetEl.style.transform = transform;
      }
    };
    const setTransition = duration => {
      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));
      transformElements.forEach(el => {
        el.style.transitionDuration = `${duration}ms`;
        el.querySelectorAll('.swiper-slide-shadow').forEach(shadowEl => {
          shadowEl.style.transitionDuration = `${duration}ms`;
        });
      });
      effectVirtualTransitionEnd({
        swiper,
        duration,
        transformElements
      });
    };
    effectInit({
      effect: 'cards',
      swiper,
      on,
      setTranslate,
      setTransition,
      perspective: () => true,
      overwriteParams: () => ({
        watchSlidesProgress: true,
        virtualTranslate: !swiper.params.cssMode
      })
    });
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/modules/index.mjs
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/pages/main/kv.js
  
  
  
  
  
  
  gsapWithCSS.registerPlugin(SplitText, ScrollTrigger_ScrollTrigger, ScrollToPlugin);
  Swiper.use([Navigation, Parallax, Pagination, Autoplay]);
  var $header = document.querySelector('#header');
  var list = null;
  var slider = null;
  var __s = window.location.hash === '#dev' ? .0 : 1;
  function initMainKV(kvList) {
    list = kvList;
    startIntro();
  }
  var kvMaskGuide = {
    width: 0,
    height: 0,
    x: 0,
    y: 0,
    r: 0
  };
  function updateKvMask() {
    var mask = document.querySelector('#mainKV #kvMask rect');
    if (mask) {
      var kvSlider = document.querySelector('#mainKV .kv-slider');
      gsap.set(mask, {
        width: kvMaskGuide.width,
        height: kvMaskGuide.height,
        x: kvMaskGuide.x,
        y: kvMaskGuide.y,
        rx: kvMaskGuide.r,
        ry: kvMaskGuide.r
      });
      // gsap.set(kvSlider, {maskImage:'url(#kvMask)'});
    }
  }
  function startIntro() {
    initKVSlider();
  
    //[NOTE - 2021-09-29-intro] 인트로 없는 버전
    introFinished();
    setTitle(slider.slides[slider.activeIndex]);
    window.scrollTo(0, 0);
    gsapWithCSS.delayedCall(.2, function () {
      dispatchEvent(new CustomEvent('KV_IMG_MOTION_START'));
    });
  
    // [NOTE - 2021-09-29-intro] 인트로 있는 버전 (주석 처리)
    /*
      const urlSearch = new URLSearchParams(location.search);
      const intro = urlSearch.get('intro')
      // $header.classList.add('hide');
      if ( intro && intro === 'skip') {
        introFinished();
        setTitle(slider.slides[slider.activeIndex]);
        window.scrollTo(0,0);
        gsap.delayedCall(.2, ()=>{
          dispatchEvent(new CustomEvent('KV_IMG_MOTION_START'));
        })
      } else {   
        const tl = gsap.timeline({
          onComplete: () => {
            startKVImgMotion();
            dispatchEvent(new CustomEvent('KV_IMG_MOTION_START'));
          },
          onUpdate: () => {
            const kvImg = document.querySelector('#mainKV .kv-intro .__img');
            const kvImgRect = kvImg.getBoundingClientRect();
            const style = getComputedStyle(kvImg)
            kvMaskGuide.width = kvImgRect.width;
            kvMaskGuide.height = kvImgRect.height;
            kvMaskGuide.x = kvImgRect.x;
            kvMaskGuide.y = kvImgRect.y;
            kvMaskGuide.r = parseInt(style.borderRadius);
            updateKvMask();
          }
        })
        tl.to('#mainKV .kv-intro .__txt', {autoAlpha:1, duration: __s * .2})
        let delay = __s * .2;
        let elTop = 0;
        document.querySelectorAll('#mainKV .kv-intro .__sentence').forEach((sentence, index) => {
          const rect = sentence.getBoundingClientRect();
          console.log('rect',rect.top);
          if (elTop === 0) {
            delay += .2;
            elTop = rect.top;
          } else {
            if (Math.abs(elTop - rect.top) >= 10) {
              delay += .2;
              elTop = rect.top;
            } else {
             }
          }
          tl.from(sentence, {y:'100%', duration: __s * 1.6, ease:Quint.easeOut}, delay)
        });
        tl.from('#mainKV .kv-intro .__img', {width:0, duration: __s * 1.6,  ease:Quint.easeInOut}, `-=${1 * __s}`)
        tl.to('#mainKV .kv-intro .__prev', {paddingRight:'0.12em', duration: __s * 1.6,  ease:Quint.easeInOut}, `-=${ __s * 1.6}`)
        tl.to('#mainKV .kv-intro .__next', {paddingLeft:'0.08em', duration: __s * 1.6,  ease:Quint.easeInOut}, `-=${ __s * 1.6}`)
         gsap.set('#mainKV .kv-slider-item .__bg', {scale:.8});
      }
    */
  
    setSlide(slider.slides[slider.activeIndex], true);
  }
  function startKVImgMotion() {
    var kvSlider = document.querySelector('#mainKV .kv-slider');
    var kvSliderWidth = kvSlider.getBoundingClientRect().width;
    var kvSliderHeight = kvSlider.getBoundingClientRect().height;
    gsap.timeline({
      onComplete: function onComplete() {
        $header.classList.remove('hide');
        introFinished();
      },
      onUpdate: function onUpdate() {
        $header.classList.add('hide');
        updateKvMask();
      }
    }).to(kvMaskGuide, {
      width: kvSliderWidth,
      height: kvSliderHeight,
      x: 0,
      y: 0,
      r: 0,
      duration: __s * 2,
      ease: Quint.easeInOut
    }, 0).to('#mainKV .kv-slider-item .__bg', {
      scale: 1,
      duration: __s * 2,
      ease: Quint.easeInOut
    }, 0).to(kvSlider, {
      alpha: 1,
      onStart: function onStart() {
        setTitle(slider.slides[slider.activeIndex]);
      }
    }, __s * 1);
  }
  function initKVSlider() {
    list.forEach(function (kv, index) {
      var template = "\n      ".concat(kv.link ? '<a' : '<section', " ").concat(kv.blank ? 'target="_blank"' : '', " ").concat(kv.link ? "href=\"".concat(kv.link, "\"") : '', " class=\"kv-slider-item\">\n        <div class=\"__bg\">\n          <div class=\"__inner\" data-swiper-parallax-x=\"75%\">\n          </div>\n        </div>\n        <div class=\"__desc\" data-swiper-parallax-x=\"100%\">\n          <div class=\"__inner\">\n            <h2 class=\"__title\">").concat(kv.title.replace(/(?:\r\n|\r|\n)/g, '<br/>'), "</h2>\n            <h3 class=\"__caption\">").concat(parseInt(index) + 1 + '. ' + kv.caption, "</h3>\n          </div>\n        </div>\n      <").concat(kv.link ? '</a>' : '</section>');
      var swiperSlide = document.createElement('div');
      swiperSlide.classList.add('swiper-slide');
      swiperSlide.setAttribute('data-swiper-autoplay', kv.duration || 6000);
      swiperSlide.innerHTML = template;
      if (kv.type === 'image') {
        var img = document.createElement('img');
        img.src = kv.src;
        swiperSlide.querySelector('.kv-slider-item .__bg .__inner').append(img);
      }
      if (kv.type === 'video') {
        var video = document.createElement('video');
        video.src = kv.src;
        video.poster = kv.poster;
        video.playsInline = true;
        video.muted = true;
        video.loop = true;
        //[NOTE - 2021-09-29-intro] 첫번째 슬라이드의 비디오는 포스터추가 
        // - 대표비디오 변경이 되면 이 부분에 이미지를 변경이 필요함
        if (index == 0) video.poster = '/assets/img/pages/main/poster-min.jpg';
        swiperSlide.querySelector('.kv-slider-item .__bg .__inner').append(video);
        video.addEventListener('loadedmetadata', function () {
          video.duration >= 0 && swiperSlide.setAttribute('data-swiper-autoplay', video.duration * 1000);
        });
      }
      document.querySelector('#mainKV .kv-slider .swiper-wrapper').append(swiperSlide);
    });
    if (list.length === 1) {
      document.querySelector('#mainKV .kv-control').classList.add('hide');
    }
    slider = new Swiper('#mainKV .kv-slider .swiper', {
      parallax: true,
      speed: 800,
      loop: true,
      autoplay: {
        delay: 5000,
        disableOnInteraction: false
      },
      navigation: {
        nextEl: '.kv-control .__nav .__next',
        prevEl: '.kv-control .__nav .__prev'
      },
      pagination: {
        el: '.kv-control .__pagination',
        type: 'bullets',
        clickable: true,
        renderBullet: function renderBullet(index, className) {
          return "<span class=\"".concat(className, " __progressbar\"><span class=\"__bar\"></span></span>");
        }
      }
    });
    slider.on('slideChangeTransitionStart', function () {
      var activeIndex = slider.activeIndex;
      var activeSlide = slider.slides[activeIndex];
      setSlide(activeSlide);
    });
  }
  function setSlide(slide, disableTitleAnim) {
    if (!disableTitleAnim) {
      var title = slide.querySelector('.__title').innerHTML;
      setTitle(slide);
    }
    var video = slide.querySelector('video');
    if (video) {
      console.log(video.canPlayType);
      video.play();
      video.currentTime = 0;
    }
    var autoplayDuration = slide.getAttribute('data-swiper-autoplay');
    document.querySelector('.kv-control .__pagination').style.setProperty('--progress-duration', "".concat(autoplayDuration, "ms"));
  }
  function setTitle(slide) {
    var title = slide.querySelector('.__title').innerHTML;
    var titleEl = document.querySelector('.kv-control .__kv-title');
    titleEl.innerHTML = '';
    titleEl.innerHTML = title;
    titleEl.splitText = new SplitText(titleEl, {
      type: "lines, chars",
      linesClass: '__line',
      charsClass: '__char'
    });
    gsapWithCSS.set(titleEl.splitText.chars, {
      yPercent: 100
    });
    titleEl.splitText.lines.forEach(function (line, index) {
      var spitDelay = document.documentElement.clientWidth <= 1024 ? .2 : 3;
      gsapWithCSS.to(line.querySelectorAll('.__char'), {
        yPercent: 0,
        duration: 1.6,
        ease: gsap_core_Quint.easeOut,
        delay: index * spitDelay
      });
    });
    document.querySelector('.kv-control .__caption').innerHTML = slide.querySelector('.__caption').innerHTML;
  }
  function introFinished() {
    document.querySelector('body').classList.add('loaded');
    document.querySelector('#mainKV').classList.add('start');
    // $header.classList.remove('hide');      
    // document.querySelector('.kv-intro').remove();
  
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainKV',
      start: 'top top',
      end: 'bottom top',
      onUpdate: function onUpdate(self) {
        requestAnimationFrame(function () {
          var progress = self.progress;
          gsapWithCSS.set('#mainKV .kv-slider', {
            y: "".concat(progress * -50, "%")
          });
        });
      }
    });
    requestAnimationFrame(function () {
      ScrollTrigger_ScrollTrigger.refresh();
    });
    if (window.location.hash === '#dev') {
      gsapWithCSS.to(window, {
        scrollTo: {
          y: '.__slogan-motion1',
          offsetY: window.innerHeight
        },
        duration: .5,
        ease: 'power2.out'
      });
    }
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainKV',
      start: 'top 120%',
      end: 'bottom -20%',
      onToggle: function onToggle(self) {
        document.querySelector('#mainKV').classList.toggle('__hidden', !self.isActive);
      },
      onLeave: function onLeave() {
        document.querySelector('#mainKV').classList.add('__hidden');
      }
    });
  }
  ;// CONCATENATED MODULE: ./node_modules/detect-gpu/dist/detect-gpu.esm.js
  function detect_gpu_esm_e(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{d(r.next(e))}catch(e){a(e)}}function c(e){try{d(r.throw(e))}catch(e){a(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}d((r=r.apply(e,t||[])).next())}))}const detect_gpu_esm_t=(/* unused pure expression or super */ null && (["geforce 320m","geforce 8600","geforce 8600m gt","geforce 8800 gs","geforce 8800 gt","geforce 9400","geforce 9400m g","geforce 9400m","geforce 9600m gt","geforce 9600m","geforce fx go5200","geforce gt 120","geforce gt 130","geforce gt 330m","geforce gtx 285","google swiftshader","intel g41","intel g45","intel gma 4500mhd","intel gma x3100","intel hd 3000","intel q45","legacy","mali-2","mali-3","mali-4","quadro fx 1500","quadro fx 4","quadro fx 5","radeon hd 2400","radeon hd 2600","radeon hd 4670","radeon hd 4850","radeon hd 4870","radeon hd 5670","radeon hd 5750","radeon hd 6290","radeon hd 6300","radeon hd 6310","radeon hd 6320","radeon hd 6490m","radeon hd 6630m","radeon hd 6750m","radeon hd 6770m","radeon hd 6970m","sgx 543","sgx543"]));function detect_gpu_esm_n(e){return e=e.toLowerCase().replace(/.*angle ?\((.+)\)(?: on vulkan [0-9.]+)?$/i,"$1").replace(/\s(\d{1,2}gb|direct3d.+$)|\(r\)| \([^)]+\)$/g,"").replace(/(?:vulkan|opengl) \d+\.\d+(?:\.\d+)?(?: \((.*)\))?/,"$1")}const detect_gpu_esm_r="undefined"==typeof window,detect_gpu_esm_o=(()=>{if(detect_gpu_esm_r)return;const{userAgent:e,platform:t,maxTouchPoints:n}=window.navigator,o=/(iphone|ipod|ipad)/i.test(e),a="iPad"===t||"MacIntel"===t&&n>0&&!window.MSStream;return{isIpad:a,isMobile:/android/i.test(e)||o||a,isSafari12:/Version\/12.+Safari/.test(e)}})();function a(e,t,n){if(!n)return[t];const r=function(e){const t="\n    precision highp float;\n    attribute vec3 aPosition;\n    varying float vvv;\n    void main() {\n      vvv = 0.31622776601683794;\n      gl_Position = vec4(aPosition, 1.0);\n    }\n  ",n="\n    precision highp float;\n    varying float vvv;\n    void main() {\n      vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * vvv;\n      enc = fract(enc);\n      enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n      gl_FragColor = enc;\n    }\n  ",r=e.createShader(35633),o=e.createShader(35632),a=e.createProgram();if(!(o&&r&&a))return;e.shaderSource(r,t),e.shaderSource(o,n),e.compileShader(r),e.compileShader(o),e.attachShader(a,r),e.attachShader(a,o),e.linkProgram(a),e.detachShader(a,r),e.detachShader(a,o),e.deleteShader(r),e.deleteShader(o),e.useProgram(a);const i=e.createBuffer();e.bindBuffer(34962,i),e.bufferData(34962,new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),35044);const c=e.getAttribLocation(a,"aPosition");e.vertexAttribPointer(c,3,5126,!1,0,0),e.enableVertexAttribArray(c),e.clearColor(1,1,1,1),e.clear(16384),e.viewport(0,0,1,1),e.drawArrays(4,0,3);const d=new Uint8Array(4);return e.readPixels(0,0,1,1,6408,5121,d),e.deleteProgram(a),e.deleteBuffer(i),d.join("")}(e),a="801621810",i="8016218135",c="80162181161",d=(null==detect_gpu_esm_o?void 0:detect_gpu_esm_o.isIpad)?[["a7",c,12],["a8",i,15],["a8x",i,15],["a9",i,15],["a9x",i,15],["a10",i,15],["a10x",i,15],["a12",a,15],["a12x",a,15],["a12z",a,15],["a14",a,15],["m1",a,15]]:[["a7",c,12],["a8",i,12],["a9",i,15],["a10",i,15],["a11",a,15],["a12",a,15],["a13",a,15],["a14",a,15]];let l;"80162181255"===r?l=d.filter((([,,e])=>e>=14)):(l=d.filter((([,e])=>e===r)),l.length||(l=d));return l.map((([e])=>`apple ${e} gpu`))}class detect_gpu_esm_i extends (/* unused pure expression or super */ null && (Error)){constructor(e){super(e),Object.setPrototypeOf(this,new.target.prototype)}}const c=(/* unused pure expression or super */ null && ([])),d=(/* unused pure expression or super */ null && ([]));function l(e,t){if(e===t)return 0;const n=e;e.length>t.length&&(e=t,t=n);let r=e.length,o=t.length;for(;r>0&&e.charCodeAt(~-r)===t.charCodeAt(~-o);)r--,o--;let a,i=0;for(;i<r&&e.charCodeAt(i)===t.charCodeAt(i);)i++;if(r-=i,o-=i,0===r)return o;let l,s,f=0,u=0,h=0;for(;u<r;)d[u]=e.charCodeAt(i+u),c[u]=++u;for(;h<o;)for(a=t.charCodeAt(i+h),l=h++,f=h,u=0;u<r;u++)s=a===d[u]?l:l+1,l=c[u],f=c[u]=l>f?s>f?f+1:s:s>l?l+1:s;return f}function detect_gpu_esm_s(e){return null!=e}const f=({mobileTiers:c=[0,15,30,60],desktopTiers:d=[0,15,30,60],override:f={},glContext:u,failIfMajorPerformanceCaveat:h=!1,benchmarksURL:g="https://unpkg.com/detect-gpu@5.0.37/dist/benchmarks"}={})=>detect_gpu_esm_e(void 0,void 0,void 0,(function*(){const p={};if(detect_gpu_esm_r)return{tier:0,type:"SSR"};const{isIpad:m=!!(null==detect_gpu_esm_o?void 0:detect_gpu_esm_o.isIpad),isMobile:v=!!(null==detect_gpu_esm_o?void 0:detect_gpu_esm_o.isMobile),screenSize:w=window.screen,loadBenchmarks:x=(t=>detect_gpu_esm_e(void 0,void 0,void 0,(function*(){const e=yield fetch(`${g}/${t}`).then((e=>e.json()));if(parseInt(e.shift().split(".")[0],10)<4)throw new detect_gpu_esm_i("Detect GPU benchmark data is out of date. Please update to version 4x");return e})))}=f;let{renderer:A}=f;const P=(e,t,n,r,o)=>({device:o,fps:r,gpu:n,isMobile:v,tier:e,type:t});let b,S="";if(A)A=detect_gpu_esm_n(A),b=[A];else{const e=u||function(e,t=!1){const n={alpha:!1,antialias:!1,depth:!1,failIfMajorPerformanceCaveat:t,powerPreference:"high-performance",stencil:!1};e&&delete n.powerPreference;const r=window.document.createElement("canvas"),o=r.getContext("webgl",n)||r.getContext("experimental-webgl",n);return null!=o?o:void 0}(null==detect_gpu_esm_o?void 0:detect_gpu_esm_o.isSafari12,h);if(!e)return P(0,"WEBGL_UNSUPPORTED");const t=e.getExtension("WEBGL_debug_renderer_info");if(t&&(A=e.getParameter(t.UNMASKED_RENDERER_WEBGL)),!A)return P(1,"FALLBACK");S=A,A=detect_gpu_esm_n(A),b=function(e,t,n){return"apple gpu"===t?a(e,t,n):[t]}(e,A,v)}const y=(yield Promise.all(b.map((function(t){var n;return detect_gpu_esm_e(this,void 0,void 0,(function*(){const e=(e=>{const t=v?["adreno","apple","mali-t","mali","nvidia","powervr","samsung"]:["intel","apple","amd","radeon","nvidia","geforce"];for(const n of t)if(e.includes(n))return n})(t);if(!e)return;const r=`${v?"m":"d"}-${e}${m?"-ipad":""}.json`,o=p[r]=null!==(n=p[r])&&void 0!==n?n:x(r);let a;try{a=yield o}catch(e){if(e instanceof detect_gpu_esm_i)throw e;return}const c=function(e){var t;const n=(e=e.replace(/\([^)]+\)/,"")).match(/\d+/)||e.match(/(\W|^)([A-Za-z]{1,3})(\W|$)/g);return null!==(t=null==n?void 0:n.join("").replace(/\W|amd/g,""))&&void 0!==t?t:""}(t);let d=a.filter((([,e])=>e===c));d.length||(d=a.filter((([e])=>e.includes(t))));const s=d.length;if(0===s)return;const f=t.split(/[.,()\[\]/\s]/g).sort().filter(((e,t,n)=>0===t||e!==n[t-1])).join(" ");let u,[h,,,,g]=s>1?d.map((e=>[e,l(f,e[2])])).sort((([,e],[,t])=>e-t))[0][0]:d[0],A=Number.MAX_VALUE;const{devicePixelRatio:P}=window,b=w.width*P*w.height*P;for(const e of g){const[t,n]=e,r=t*n,o=Math.abs(b-r);o<A&&(A=o,u=e)}if(!u)return;const[,,S,y]=u;return[A,S,h,y]}))})))).filter(detect_gpu_esm_s).sort((([e=Number.MAX_VALUE,t],[n=Number.MAX_VALUE,r])=>e===n?t-r:e-n));if(!y.length){const e=detect_gpu_esm_t.find((e=>A.includes(e)));return e?P(0,"BLOCKLISTED",e):P(1,"FALLBACK",`${A} (${S})`)}const[,C,E,L]=y[0];if(-1===C)return P(0,"BLOCKLISTED",E,C,L);const M=v?c:d;let $=0;for(let e=0;e<M.length;e++)C>=M[e]&&($=e);return P($,"BENCHMARK",E,C,L)}));
  //# sourceMappingURL=detect-gpu.esm.js.map
  
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/pages/main/seq.js
  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  function initSeq(el) {
    if (el.inited) return;
    el.inited = true;
    if (isSafari) {
      if (el.dataset.videoTb.indexOf('motion2/hud') > -1) {
        __createImg(el);
      } else {
        __createVideo(el);
      }
    } else {
      var video = el.querySelector('video');
      if (video) video.remove();
      var path = el.dataset.seqPath;
      var start = el.dataset.start;
      var end = el.dataset.end;
      var format = el.dataset.format;
      var imgs = [];
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      canvas.width = el.dataset.width;
      canvas.height = el.dataset.height;
      el.appendChild(canvas);
      var _loop = function _loop(i) {
        var img = document.createElement('img');
        img.src = path + i + '.' + format;
        img.loaded = false;
        imgs.push(img);
        img.onload = function () {
          if (i === start) {
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
          }
          img.loaded = true;
        };
      };
      for (var i = start; i <= end; i++) {
        _loop(i);
      }
      el.seqIndex = 0;
      el.time = 0;
      var render = function render() {
        if (el.isActive) {
          var img = imgs[el.seqIndex];
          if (img.loaded && el.time % 3 === 0) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
            el.seqIndex++;
            if (el.seqIndex === imgs.length) el.seqIndex = 0;
          }
          el.time += 1;
        }
        requestAnimationFrame(render);
      };
      render();
    }
    if (el.classList.contains('__crane')) {
      var onResize = function onResize() {
        var WIDTH = el.dataset.originWidth;
        var HEIGHT = el.dataset.originHeight;
        var scaleX = el.parentNode.clientWidth / WIDTH;
        var scaleY = el.parentNode.clientHeight / HEIGHT;
        var scale = Math.max(scaleX, scaleY);
        el.style.transform = "translate(-50%, -50%) scale(".concat(scale, ")");
        console.log(scale);
      };
      window.addEventListener('resize', function () {
        requestAnimationFrame(onResize);
      });
      onResize();
    }
  }
  function __createVideo(el) {
    var video = document.createElement('video');
    video.loop = true;
    video.muted = true;
    video.playsInline = true;
    video.poster = el.dataset.videoTb;
    video.setAttribute('playsinline', true);
    video.setAttribute('muted', true);
    video.setAttribute('loop', true);
    video.innerHTML = "\n    <source src=\"".concat(el.dataset.videoMov, "\" type=\"video/quicktime\">\n    <source src=\"").concat(el.dataset.videoMp4, "\" type=\"video/mp4;codecs=hvc1\">\n    <source src=\"").concat(el.dataset.videoWebm, "\" type=\"video/webm; codecs=vp8, vorbis\">\n   ");
    el.appendChild(video);
    video.style.display = 'none';
    var canvas = document.createElement('canvas');
    var ctx = canvas.getContext('2d');
    canvas.width = el.dataset.width;
    canvas.height = el.dataset.height;
    el.appendChild(canvas);
    function render() {
      if (el.isActive) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      }
      requestAnimationFrame(render);
    }
    render();
  }
  function __createImg(el) {
    var img = document.createElement('img');
    img.src = el.dataset.videoTb;
    img.style.width = '100%';
    el.appendChild(img);
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/pages/main/title.js
  function setHanhwaFont(descSplit) {
    var beforeTxt = '';
    console.log('descSplit', descSplit);
    descSplit.chars.forEach(function (el, index) {
      if (beforeTxt == '한' && el.innerHTML == '화') {
        descSplit.chars[index - 1].setAttribute('font-hanwha', '');
        el.setAttribute('font-hanwha', '');
      }
      beforeTxt = el.innerHTML;
    });
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/pages/main/slogan-motion.js
  
  
  
  
  
  
  var slogan_motion_isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  var MOTION_SETTING = {
    startWidth: 66,
    //%
    startHeight: 66,
    //%
    startBorderRadius: 4.25,
    //vw
    startRotateY: -9,
    //deg
    startRotateX: -12,
    //deg
    startBgInnerY: -90,
    //%
    startMobileVideoY: -50,
    //%
    endBgInnerY: 40,
    //%
    endRotateY: 9,
    //deg
    endRotateX: 12,
    //deg
    endWidth: 66,
    endHeight: 66,
    endBorderRadius: 4.25 //vw
  };
  function initMainSloganMotion() {
    var keywordList = document.querySelector('#mainSlogan .__list');
    function __updateInMotion(sloganMotion, progress) {
      gsapWithCSS.set(sloganMotion.querySelector('.__bg-wrapper'), {
        // rotateY: (1 - progress) * MOTION_SETTING.startRotateY,
        // rotateX: (1 - progress) * MOTION_SETTING.startRotateX,
        width: "".concat(MOTION_SETTING.startWidth + progress * (100 - MOTION_SETTING.startWidth), "%"),
        height: "".concat(MOTION_SETTING.startHeight + progress * (100 - MOTION_SETTING.startHeight), "%"),
        borderRadius: "".concat((1 - progress) * MOTION_SETTING.startBorderRadius, "vw")
      });
      gsapWithCSS.set(sloganMotion.querySelector('.__bg-inner'), {
        yPercent: (1 - progress) * MOTION_SETTING.startBgInnerY
      });
      gsapWithCSS.set(sloganMotion.querySelector('.__m-bg-inner'), {
        yPercent: (1 - progress) * MOTION_SETTING.startMobileVideoY
      });
    }
    function __updateOutMotion(sloganMotion, progress) {
      if (sloganMotion.dataset.motion === 'both' || sloganMotion.dataset.motion === 'out') {
        gsapWithCSS.set(sloganMotion.querySelector('.__bg-wrapper'), {
          // rotateY: progress * MOTION_SETTING.endRotateY,
          // rotateX: progress * MOTION_SETTING.endRotateX,
          width: "".concat(100 - progress * (100 - MOTION_SETTING.endWidth), "%"),
          height: "".concat(100 - progress * (100 - MOTION_SETTING.endHeight), "%"),
          borderRadius: "".concat(progress * MOTION_SETTING.endBorderRadius, "vw")
        });
      }
      gsapWithCSS.set(sloganMotion.querySelector('.__bg-inner'), {
        yPercent: progress * MOTION_SETTING.endBgInnerY
      });
      gsapWithCSS.set(sloganMotion.querySelector('.__m-bg-inner'), {
        yPercent: progress * MOTION_SETTING.endBgInnerY
      });
    }
    document.querySelectorAll('#mainSlogan .__slogan-motion').forEach(function (sloganMotion) {
      ScrollTrigger_ScrollTrigger.create({
        trigger: sloganMotion,
        start: 'top 30%',
        end: 'bottom 30%',
        onToggle: function onToggle(self) {
          var index = sloganMotion.dataset.index;
          var keyword = keywordList.querySelector(".__keyword[data-index=\"".concat(index, "\"]"));
          keyword.classList.toggle('__active', self.isActive);
        },
        onEnter: function onEnter() {
          keywordList.classList.add('__active');
        },
        onEnterBack: function onEnterBack() {
          keywordList.classList.add('__active');
        },
        onLeave: function onLeave() {
          keywordList.classList.remove('__active');
        },
        onLeaveBack: function onLeaveBack() {
          keywordList.classList.remove('__active');
        }
      });
      ScrollTrigger_ScrollTrigger.create({
        trigger: sloganMotion,
        start: 'top 120%',
        end: 'bottom -20%',
        onToggle: function onToggle(self) {
          sloganMotion.classList.toggle('__hidden', !self.isActive);
        }
      });
      if (sloganMotion.dataset.motion === 'both' || sloganMotion.dataset.motion === 'in') {
        ScrollTrigger_ScrollTrigger.create({
          trigger: sloganMotion,
          start: 'top bottom',
          end: 'top top',
          scrub: true,
          onUpdate: function onUpdate(self) {
            requestAnimationFrame(function () {
              var progress = self.progress;
              __updateInMotion(sloganMotion, progress);
            });
          }
        });
      }
  
      // __updateInMotion(sloganMotion, 0);
      var desktopBgVideo = sloganMotion.querySelector('.__d .__bg-video');
      gsapWithCSS.set(desktopBgVideo, {
        objectPosition: "50% 0%"
      });
      if (desktopBgVideo) {
        ScrollTrigger_ScrollTrigger.create({
          trigger: sloganMotion,
          start: 'top center',
          end: 'bottom center',
          scrub: true,
          onUpdate: function onUpdate(self) {
            requestAnimationFrame(function () {
              gsapWithCSS.set(desktopBgVideo, {
                objectPosition: "50% ".concat(self.progress * 100, "%")
              });
            });
          }
        });
      }
      ScrollTrigger_ScrollTrigger.create({
        trigger: sloganMotion,
        start: 'bottom bottom',
        end: 'bottom top',
        scrub: true,
        onUpdate: function onUpdate(self) {
          requestAnimationFrame(function () {
            var progress = self.progress;
            __updateOutMotion(sloganMotion, progress);
          });
        }
      });
  
      // __updateOutMotion(sloganMotion, 0);
  
      var index = sloganMotion.dataset.index;
      var desc = document.querySelector("#mainSlogan .__desc[data-index=\"".concat(index, "\"]"));
      var txt = desc.querySelector('p');
      var split = new SplitText(txt, {
        type: 'lines, chars',
        linesClass: '__line',
        charsClass: '__char'
      });
      gsapWithCSS.set(split.chars, {
        yPercent: 105
      });
      setHanhwaFont(split);
      var txtTL = gsapWithCSS.timeline({
        scrollTrigger: {
          trigger: sloganMotion.querySelector('.__motion-desc-in'),
          start: 'top 130%',
          end: 'bottom center',
          scrub: 0.00001
        }
      });
      split.lines.forEach(function (line, i) {
        txtTL.to(line.querySelectorAll('.__char'), {
          yPercent: 0,
          duration: 1,
          ease: 'power2.out'
        }, i * .1);
      });
      txtTL.to(txt, {
        opacity: 0,
        duration: .5
      }, 2.2);
    });
    document.querySelectorAll('#mainSlogan .__slogan-motion').forEach(function (sloganMotion) {
      ScrollTrigger_ScrollTrigger.create({
        trigger: sloganMotion,
        start: "top bottom",
        end: "bottom top",
        onToggle: function onToggle(self) {
          sloganMotion.querySelectorAll(".__video").forEach(function (el) {
            var video = el.querySelector("video");
            el.isActive = self.isActive;
            el.seqIndex = 0;
            if (video) {
              try {
                if (self.isActive) {
                  console.log(sloganMotion, "play");
                  video.currentTime = 0;
                  video.play();
                } else {
                  console.log(sloganMotion, "pause");
                  video.pause();
                }
              } catch (e) {
                console.log(e);
              }
            }
          });
          sloganMotion.querySelectorAll('.__m video').forEach(function (video) {
            try {
              if (self.isActive) {
                console.log(sloganMotion, "play");
                video.currentTime = 0;
                video.play();
              } else {
                console.log(sloganMotion, "pause");
                video.pause();
              }
            } catch (e) {
              console.log(e);
            }
          });
          sloganMotion.querySelectorAll('.__d .__bg-video').forEach(function (video) {
            try {
              if (self.isActive) {
                console.log(sloganMotion, "play");
                video.currentTime = 0;
                video.play();
              } else {
                console.log(sloganMotion, "pause");
                video.pause();
              }
            } catch (e) {
              console.log(e);
            }
          });
        }
      });
    });
    ScrollTrigger_ScrollTrigger.matchMedia({
      "(min-aspect-ratio: 1/1)": function minAspectRatio11() {
        document.querySelectorAll('#mainSlogan .__slogan-motion').forEach(function (sloganMotion) {
          ScrollTrigger_ScrollTrigger.create({
            trigger: sloganMotion.querySelector('.__slogan-motion-wrapper'),
            start: 'top top',
            end: 'bottom bottom',
            pin: sloganMotion.querySelector('.__motion-visual'),
            pinSpacing: false
            // anticipatePin: 1,
          });
        });
  
        // motion1
  
        ScrollTrigger_ScrollTrigger.create({
          trigger: '#mainSlogan .__slogan-motion1',
          start: 'top top',
          end: 'bottom top',
          scrub: true,
          onUpdate: function onUpdate(self) {
            // const progress = self.progress ;
            // const easingIn = (t) => t * t  * t * t;
            // const easingCircIn = (t) => 1 - Math.sqrt(1 - t * t);
            // gsap.set('#mainSlogan .__slogan-motion1 .__rocket video', {yPercent: easingCircIn(progress) * -300 + 20});
          }
        });
        document.querySelectorAll("#mainSlogan .__slogan-motion1 .__d .__video").forEach(function (obj, index) {
          var seqPath = obj.dataset.seqPath;
          if (seqPath) {
            gsapWithCSS.delayedCall(index * .2, function () {
              initSeq(obj);
            });
          } else {
            var video = obj.querySelector('video');
            if (video) {
              var canvas = document.createElement("canvas");
              obj.appendChild(canvas);
              if (canvas) {
                var loop = function loop() {
                  ctx.clearRect(0, 0, canvas.width, canvas.height);
                  ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                  requestAnimationFrame(loop);
                };
                canvas.width = 1920 * .8;
                canvas.height = 1290 * .8;
                var ctx = canvas.getContext("2d");
                loop();
                video.style.display = "none";
              }
            }
          }
        });
        ScrollTrigger_ScrollTrigger.create({
          trigger: '#mainSlogan .__slogan-motion1',
          start: 'top bottom',
          end: 'bottom bottom',
          scrub: true,
          onUpdate: function onUpdate(self) {
            var progress = self.progress;
            gsapWithCSS.set('#mainSlogan .__slogan-motion1 .__rocket .__video', {
              yPercent: progress * -100 + 100
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion1 .__smoke .__video', {
              yPercent: progress * -80 + 85
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion1 .__mountain2 img', {
              scale: 1 - progress + 1,
              yPercent: progress * -70 + 70
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion1 .__mountain1 img', {
              scale: 1 - progress + 1,
              yPercent: progress * -60 + 60
            });
          }
        });
        ScrollTrigger_ScrollTrigger.create({
          trigger: '#mainSlogan .__slogan-motion1',
          start: 'bottom bottom',
          end: 'bottom top',
          scrub: true,
          onUpdate: function onUpdate(self) {
            var progress = self.progress;
            gsapWithCSS.set('#mainSlogan .__slogan-motion1 .__rocket .__video', {
              yPercent: progress * -60
            });
            // gsap.set('#mainSlogan .__slogan-motion1 .__smoke video', {yPercent: progress * - 10 + 5});
            // gsap.set('#mainSlogan .__slogan-motion1 .__mountain2 img', {yPercent: progress * -20});
            // gsap.set('#mainSlogan .__slogan-motion1 .__mountain1 img', {yPercent: progress * -30});
          }
        });
        ScrollTrigger_ScrollTrigger.create({
          trigger: '#mainSlogan .__slogan-motion1',
          start: 'top bottom',
          end: 'bottom top',
          scrub: true,
          onUpdate: function onUpdate(self) {
            var progress = self.progress;
            var windowHeight = window.innerHeight;
            var skyImgHeight = document.querySelector('#mainSlogan .__slogan-motion1 .__sky img').clientHeight;
            var maxScroll = skyImgHeight - windowHeight;
            gsapWithCSS.set('#mainSlogan .__slogan-motion1 .__sky img', {
              xPercent: -5 + progress * 5,
              y: progress * maxScroll * -.9
            });
          }
        });
        ScrollTrigger_ScrollTrigger.create({
          trigger: '#mainSlogan .__slogan-motion1',
          start: 'top bottom',
          end: 'top top',
          scrub: true,
          onUpdate: function onUpdate(self) {
            var progress = self.progress;
            gsapWithCSS.set('#mainSlogan .__slogan-motion1 .__rocket .__video', {
              xPercent: progress * 6 - 6
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion1 .__smoke .__video', {
              xPercent: progress * 6 - 6
            });
          }
        });
        document.querySelector('#mainSlogan').addEventListener('mousemove', function (e) {
          var x = e.clientX;
          var y = e.clientY;
          var centerX = window.innerWidth / 2;
          var centerY = window.innerHeight / 2;
          var dx = x - centerX;
          var dy = y - centerY;
          var tiltX = dy / centerY;
          var tiltY = dx / centerX;
          gsapWithCSS.to('#mainSlogan .__slogan-motion1 .__bg-3d', {
            rotateY: tiltY * -4,
            rotateX: tiltX * -1,
            duration: .5,
            overwrite: true
          });
        });
  
        // motion2
        document.querySelectorAll("#mainSlogan .__slogan-motion2 .__d .__video").forEach(function (obj, index) {
          var seqPath = obj.dataset.seqPath;
          if (seqPath) {
            gsapWithCSS.delayedCall(index * .2 + 1, function () {
              initSeq(obj);
            });
          } else {
            var video = obj.querySelector('video');
            if (video) {
              var canvas = document.createElement("canvas");
              obj.appendChild(canvas);
              if (canvas) {
                var loop = function loop() {
                  ctx.clearRect(0, 0, canvas.width, canvas.height);
                  ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                  requestAnimationFrame(loop);
                };
                canvas.width = 1920 * .8;
                canvas.height = 1290 * .8;
                var ctx = canvas.getContext("2d");
                loop();
                video.style.display = "none";
              }
            }
          }
        });
  
        // if (isSafari) {
        //   document.querySelectorAll('#mainSlogan .__slogan-motion2 .__d video').forEach( video => {
        //     if (video.classList.contains('__crane')) return;
        //     const poster = video.poster; 
        //     const img = document.createElement('img');
        //     img.src = poster;
        //     video.parentNode.insertBefore(img, video);
        //     video.remove();
        //   });
        // }
        // ScrollTrigger.create({
        //   trigger: '#mainSlogan .__slogan-motion2',
        //   start: 'top bottom',
        //   end: 'top top',
        //   scrub: true,
        //   onUpdate: self => {
        //     // const progress = self.progress;
        //     //
        //     // gsap.set('#mainSlogan .__slogan-motion2', {
        //     //   rotateY: (1-progress) * MOTION_SETTING.startRotateY * -2});
        //     // gsap.set('#mainSlogan .__slogan-motion2 .__d ', {yPercent: 40 + progress * -40});
        //   }
        // });
  
        ScrollTrigger_ScrollTrigger.create({
          trigger: '#mainSlogan .__slogan-motion2',
          start: 'top bottom',
          end: 'bottom top',
          scrub: true,
          onUpdate: function onUpdate(self) {
            requestAnimationFrame(function () {
              var progress = self.progress;
              gsapWithCSS.set('#mainSlogan .__slogan-motion2 .__hud1 .__video', {
                yPercent: 25 + progress * -45
              });
              gsapWithCSS.set('#mainSlogan .__slogan-motion2 .__hud2 .__video', {
                yPercent: 33 + progress * -57
              });
              gsapWithCSS.set('#mainSlogan .__slogan-motion2 .__hud3 .__video', {
                yPercent: 28 + progress * -43
              });
              gsapWithCSS.set('#mainSlogan .__slogan-motion2 .__hud4 .__video', {
                yPercent: 46 + progress * -77
              });
              // gsap.set('#mainSlogan .__slogan-motion2 .__hud5 img', {yPercent: 34 + progress * -66});
              // gsap.set('#mainSlogan .__slogan-motion2 .__hud6 img', {yPercent: 20 + progress * -43});
              gsapWithCSS.set('#mainSlogan .__slogan-motion2 .__hud7 .__video', {
                yPercent: 34 + progress * -124
              });
              // gsap.set('#mainSlogan .__slogan-motion2 .__hud8 img', {yPercent: 36 + progress * -68});
              // gsap.set('#mainSlogan .__slogan-motion2 .__hud9 .__video', {yPercent: 20 + progress * -40});
            });
          }
        });
        document.querySelector('#mainSlogan').addEventListener('mousemove', function (e) {
          var x = e.clientX;
          var y = e.clientY;
          var centerX = window.innerWidth / 2;
          var centerY = window.innerHeight / 2;
          var dx = x - centerX;
          var dy = y - centerY;
          var tiltX = dy / centerY;
          var tiltY = dx / centerX;
          gsapWithCSS.to('#mainSlogan .__slogan-motion2 .__bg-3d', {
            rotateY: tiltY * -6,
            rotateX: tiltX * -3,
            duration: .5,
            overwrite: true
          });
        });
  
        //   motion3
  
        if (slogan_motion_isSafari) {
          document.querySelectorAll('#mainSlogan .__slogan-motion3 .__d video').forEach(function (video) {
            // const poster = video.poster;
            // const img = document.createElement('img');
            // img.src = poster;
            // video.parentNode.insertBefore(img, video);
            // video.remove();
          });
        }
        ScrollTrigger_ScrollTrigger.create({
          trigger: '#mainSlogan .__slogan-motion3',
          start: 'top bottom',
          end: 'top -50%',
          scrub: true,
          onUpdate: function onUpdate(self) {
            var progress = self.progress;
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__mountain3 img', {
              scale: (1 - progress) * .56 + 1
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__mountain2 img', {
              scale: (1 - progress) * .735 + 1
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__mountain1 img', {
              scale: (1 - progress) * 1.6 + 1
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__windmill3 .__video', {
              scale: (1 - progress) * .56 + 1
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__windmill2 .__video', {
              scale: (1 - progress) * .735 + 1
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__windmill1 .__video', {
              scale: (1 - progress) * 1.5 + 1
            });
          }
        });
        ScrollTrigger_ScrollTrigger.create({
          trigger: '#mainSlogan .__slogan-motion3',
          start: 'top bottom',
          end: 'bottom bottom',
          scrub: true,
          onUpdate: function onUpdate(self) {
            var progress = slogan_motion_easeInOut(self.progress);
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__sky img', {
              yPercent: progress * -24 - 9
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__mountain3 img', {
              yPercent: progress * -30
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__mountain2 img', {
              yPercent: progress * -41 + 22
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__mountain1 img', {
              yPercent: progress * -46 + 24
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__windmill3 .__video', {
              yPercent: progress * -30
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__windmill2 .__video', {
              yPercent: progress * -41 + 22
            });
            gsapWithCSS.set('#mainSlogan .__slogan-motion3 .__windmill1 .__video', {
              yPercent: progress * -46 + 24
            });
          }
        });
        document.querySelectorAll("#mainSlogan .__slogan-motion3 .__d .__video").forEach(function (obj, index) {
          var seqPath = obj.dataset.seqPath;
          if (seqPath) {
            gsapWithCSS.delayedCall(index * .2 + 2, function () {
              initSeq(obj);
            });
          } else {
            var video = obj.querySelector('video');
            if (video) {
              var canvas = document.createElement("canvas");
              obj.appendChild(canvas);
              if (canvas) {
                var loop = function loop() {
                  ctx.clearRect(0, 0, canvas.width, canvas.height);
                  ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                  requestAnimationFrame(loop);
                };
                canvas.width = 2200;
                canvas.height = 2200;
                var ctx = canvas.getContext("2d");
                loop();
                video.style.display = "none";
              }
            }
          }
        });
        document.querySelector('#mainSlogan').addEventListener('mousemove', function (e) {
          var x = e.clientX;
          var y = e.clientY;
          var centerX = window.innerWidth / 2;
          var centerY = window.innerHeight / 2;
          var dx = x - centerX;
          var dy = y - centerY;
          var tiltX = dy / centerY;
          var tiltY = dx / centerX;
          gsapWithCSS.to('#mainSlogan .__slogan-motion3 .__bg-3d', {
            rotateY: tiltY * -8,
            rotateX: tiltX * -5,
            duration: .5,
            overwrite: true
          });
        });
      }
    });
    ScrollTrigger_ScrollTrigger.matchMedia({
      "(max-width: 681px)": function maxWidth681px() {
        document.querySelectorAll('#mainSlogan .__slogan-motion .__d video').forEach(function (video) {
          video.querySelectorAll('source').forEach(function (source) {
            source.src = '';
            source.remove();
          });
          video.src = '';
        });
      }
    });
  }
  function slogan_motion_easeInOut(x) {
    return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/pages/main/slogan.js
  
  
  
  
  gsapWithCSS.registerPlugin(ScrollTrigger_ScrollTrigger, SplitText);
  var keywordCloneList = [];
  function initMainSlogan() {
    document.querySelectorAll('#mainSlogan .__slogan .__keyword[data-dir="from"]').forEach(function (el, i) {
      var clone = el.cloneNode(true);
      document.querySelector('#mainSlogan .__slogan').appendChild(clone);
      gsapWithCSS.set(clone, {
        position: 'absolute',
        top: 0,
        left: 0,
        opacity: 0,
        zIndex: 2
      });
      clone.from = el;
      clone.to = document.querySelector("#mainSlogan .__slogan .__keyword[data-dir=\"to\"][data-index=\"".concat(el.dataset.index, "\"]"));
      keywordCloneList.push(clone);
      reposClone();
    });
    function reposClone() {
      keywordCloneList.forEach(function (clone, i) {
        var rect = clone.from.getBoundingClientRect();
        gsapWithCSS.set(clone, {
          top: rect.top,
          left: rect.left
        });
      });
    }
    gsapWithCSS.set('#mainSlogan .__sentence span', {
      yPercent: 110
    });
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainSlogan',
      start: 'top top',
      end: 'bottom bottom',
      pin: '#mainSlogan .__visual',
      pinSpacing: false
      // anticipatePin: 1,
    });
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainSlogan',
      start: 'bottom bottom',
      end: 'bottom top',
      onUpdate: function onUpdate(self) {
        var progress = self.progress;
        requestAnimationFrame(function () {
          gsapWithCSS.set('#mainSlogan .__visual-inner', {
            yPercent: progress * 40
          });
        });
      }
    });
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainSlogan .main-section-inner',
      start: 'top 40%',
      end: 'top top',
      scrub: true,
      onUpdate: function onUpdate(self) {
        var progress = self.progress;
        requestAnimationFrame(function () {
          gsapWithCSS.set('#mainSlogan .__sentence span', {
            yPercent: (1 - progress) * 110
          });
          reposClone();
        });
      },
      onEnter: function onEnter() {
        gsapWithCSS.set(keywordCloneList, {
          opacity: 0
        });
      },
      onEnterBack: function onEnterBack() {
        gsapWithCSS.set(keywordCloneList, {
          opacity: 0
        });
      },
      onLeave: function onLeave() {
        gsapWithCSS.set(keywordCloneList, {
          opacity: 1
        });
      }
    });
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainSlogan .__motion-fade-out',
      start: 'top top',
      end: 'bottom top',
      scrub: true,
      onUpdate: function onUpdate(self) {
        var progress = self.progress;
        requestAnimationFrame(function () {
          gsapWithCSS.set('#mainSlogan .__sentence', {
            opacity: 1 - progress
          });
        });
      },
      onEnter: function onEnter() {
        gsapWithCSS.set(keywordCloneList, {
          opacity: 1
        });
      }
    });
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainSlogan .__motion-move-v',
      start: 'top top',
      end: 'bottom top',
      scrub: true,
      onUpdate: function onUpdate(self) {
        var progress = self.progress;
        requestAnimationFrame(function () {
          keywordCloneList.forEach(function (clone, i) {
            var rectFrom = clone.from.getBoundingClientRect();
            var rectTo = clone.to.getBoundingClientRect();
            var posX = rectTo.left * progress + rectFrom.left * (1 - progress);
            gsapWithCSS.set(clone, {
              left: posX
            });
          });
        });
      }
    });
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainSlogan .__motion-move-h',
      start: 'top top',
      end: 'bottom 30%',
      scrub: true,
      onUpdate: function onUpdate(self) {
        var progress = self.progress;
        requestAnimationFrame(function () {
          keywordCloneList.forEach(function (clone, i) {
            var rectFrom = clone.from.getBoundingClientRect();
            var rectTo = clone.to.getBoundingClientRect();
            var posY = rectTo.top * progress + rectFrom.top * (1 - progress);
            gsapWithCSS.set(clone, {
              top: posY
            });
          });
        });
      },
      onEnter: function onEnter() {
        gsapWithCSS.set(document.querySelector('#mainSlogan .__slogan .__list'), {
          opacity: 0
        });
        gsapWithCSS.set(keywordCloneList, {
          opacity: 1
        });
      },
      onEnterBack: function onEnterBack() {
        gsapWithCSS.set(document.querySelector('#mainSlogan .__slogan .__list'), {
          opacity: 0
        });
        gsapWithCSS.set(keywordCloneList, {
          opacity: 1
        });
      },
      onLeave: function onLeave() {
        gsapWithCSS.set(keywordCloneList, {
          opacity: 0
        });
        gsapWithCSS.set(document.querySelector('#mainSlogan .__slogan .__list'), {
          opacity: 1
        });
      }
    });
    window.addEventListener('KV_IMG_MOTION_START', function () {
      initMainSloganMotion();
    });
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/pages/main/banner.js
  function initMainBanner() {
    var bannerList = [{
      "tagging": "main_goto_banner1",
      "link": "https://www.hanwhain.com",
      "title": "가슴 속에 불꽃을 품은 한화와 함께할 인재를 찾습니다.",
      "src": "/assets/img/pages/main/banner_1_n.png"
    }, {
      "tagging": "main_goto_banner2",
      "link": "https://www.hanwhaspacehub.com/",
      "title": "대한민국 우주시대 한화가 함께합니다.",
      "src": "/assets/img/pages/main/banner_2_n.png"
    }];
    bannerList.forEach(function (banner) {
      var bannerA = document.createElement('a');
      bannerA.target = '_blank';
      bannerA.classList.add('__banner');
      bannerA.href = banner.link;
      bannerA.addEventListener('click', function () {
        setTagging(banner.tagging);
      });
      var template = "<img src=\"".concat(banner.src, "\" alt=\"").concat(banner.title, "\">");
      bannerA.innerHTML = template;
      document.querySelector('#mainBanner .__banners').append(bannerA);
    });
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/pages/main/future.js
  
  
  
  
  gsapWithCSS.registerPlugin(ScrollTrigger_ScrollTrigger, SplitText);
  function initMainFuture() {
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainFuture',
      start: 'top top',
      end: 'bottom bottom',
      pin: '#mainFuture .__visual',
      pinSpacing: false,
      // anticipatePin: 1,
      onToggle: function onToggle(self) {
        // ScrollTrigger.refresh();
      }
    });
    var imgsFrom = document.querySelector('#mainFuture .__imgs[data-dir="from"]');
    gsapWithCSS.set(imgsFrom.querySelector('.__i2 img'), {
      scale: 0.6
    });
    var imgsClone = imgsFrom.cloneNode(true);
    imgsClone.classList.add('__hide');
    imgsClone.removeAttribute('data-dir');
    document.querySelector('#mainFuture .__visual-inner').appendChild(imgsClone);
    gsapWithCSS.set(imgsClone, {
      xPercent: -50,
      yPercent: -50,
      left: '50%',
      top: '50%',
      position: 'absolute'
    });
    gsapWithCSS.timeline({
      scrollTrigger: {
        trigger: '#mainFuture .__imgs[data-dir="from"]',
        start: 'top 90%',
        end: 'bottom center',
        onUpdate: function onUpdate(self) {
          gsapWithCSS.set("#mainFuture .__imgs .__img.__i1", {
            display: 'none'
          });
          gsapWithCSS.set("#mainFuture .__imgs .__img.__i2", {
            autoAlpha: 1
          });
        }
      }
    });
    // .fromTo('#mainFuture .__imgs .__img.__i2', {autoAlpha:0}, {autoAlpha: 1,  duration:.5})
    // .fromTo('#mainFuture .__imgs .__img.__i3', {autoAlpha:0}, {autoAlpha: 1,  duration:.5}, 2)
    // .fromTo('#mainFuture .__imgs .__img.__i4', {autoAlpha:0}, {autoAlpha: 1,  duration:.5}, 4)
    // .fromTo('#mainFuture .__imgs .__img.__i5', {autoAlpha:0}, {autoAlpha: 1,  duration:.5}, 6)
    // .fromTo('#mainFuture .__imgs .__img.__i6', {autoAlpha:0}, {autoAlpha: 1,  duration:.5}, 8)
    // // .fromTo('#mainFuture .__imgs .__img.__i6', {autoAlpha:0}, {autoAlpha: 1,  duration:.1}, 5)
  
    ScrollTrigger_ScrollTrigger.create({
      trigger: '#mainFuture .__imgs[data-dir="from"] .__i1',
      start: 'center 50%',
      end: 'top top',
      onEnter: function onEnter() {
        imgsFrom.classList.add('__hide');
        imgsClone.classList.remove('__hide');
      },
      onEnterBack: function onEnterBack() {
        imgsFrom.classList.add('__hide');
        imgsClone.classList.remove('__hide');
      },
      onLeaveBack: function onLeaveBack() {
        imgsFrom.classList.remove('__hide');
        imgsClone.classList.add('__hide');
      }
    });
    gsapWithCSS.timeline({
      scrollTrigger: {
        trigger: '#mainFuture .__motion-scale-up',
        start: 'top top',
        end: 'bottom top',
        scrub: true,
        onUpdate: function onUpdate(self) {
          requestAnimationFrame(function () {
            var progress = self.progress;
            var toWidth = window.innerWidth;
            var toHeight = window.innerHeight;
            var fromWidth = document.querySelector('#mainFuture .__imgs[data-dir="from"]').offsetWidth;
            var fromHeight = document.querySelector('#mainFuture .__imgs[data-dir="from"]').offsetHeight;
            var width = fromWidth + (toWidth - fromWidth) * progress;
            var height = fromHeight + (toHeight - fromHeight) * progress;
            gsapWithCSS.set(imgsClone, {
              width: width,
              height: height
            });
            gsapWithCSS.set(imgsClone.querySelector('.__i2 img'), {
              scale: .6 + progress * .4
            });
          });
        }
      }
    }).to(imgsClone, {
      borderRadius: '0px'
    });
    var descHeadingSplit, descSplit, showDescTL;
    var descHeadingSplitTop, descSplitTop;
    var descMotion = function descMotion() {
      // slogan--top
      descHeadingSplitTop = new SplitText('#mainFuture .__future-slogan--top .__desc h2', {
        type: 'lines, chars',
        linesClass: '__line',
        charsClass: '__char'
      });
      descSplitTop = new SplitText('#mainFuture .__future-slogan--top .__desc h3', {
        type: 'lines, chars',
        linesClass: '__line',
        charsClass: '__char'
      });
  
      // slogan--bottom
      descHeadingSplit = new SplitText('#mainFuture .__future-slogan--bottom .__desc h3', {
        type: 'lines, chars',
        linesClass: '__line',
        charsClass: '__char'
      });
      descSplit = new SplitText('#mainFuture .__future-slogan--bottom .__desc p', {
        type: 'lines, chars',
        linesClass: '__line',
        charsClass: '__char'
      });
      gsapWithCSS.set(descHeadingSplitTop.chars, {
        yPercent: 110
      });
      gsapWithCSS.set('#mainFuture .__future-slogan--top .__desc h2 svg', {
        yPercent: 110
      });
      gsapWithCSS.set(descSplitTop.chars, {
        yPercent: 105
      });
      gsapWithCSS.set(descHeadingSplit.chars, {
        yPercent: 105
      });
      gsapWithCSS.set(descSplit.chars, {
        yPercent: 105
      });
      setHanhwaFont(descSplit);
      showDescTL = gsapWithCSS.timeline({
        scrollTrigger: {
          trigger: '#mainFuture .__motion-show-desc',
          start: 'top top',
          end: 'bottom top',
          scrub: 0.000001
        }
      });
      // slogan--top
      showDescTL.add('topTitle');
      showDescTL.to('#mainFuture .__future-slogan--top .__desc h2 .__char', {
        yPercent: 0,
        duration: 1.5
      }, 'topTitle');
      showDescTL.to('#mainFuture .__future-slogan--top .__desc h2 svg', {
        yPercent: 0,
        duration: 1.5
      }, 'topTitle');
      document.querySelectorAll('#mainFuture .__future-slogan--top .__desc h3 .__line').forEach(function (p, index) {
        return showDescTL.to(p.querySelectorAll('.__char'), {
          yPercent: 0,
          duration: 1.5,
          delay: index * .02
        });
      });
      // slogan--bottom
      showDescTL.to('#mainFuture .__future-slogan--bottom .__desc h3 .__char', {
        yPercent: 0,
        duration: 1.5,
        delay: 1
      });
      document.querySelectorAll('#mainFuture .__future-slogan--bottom .__desc p .__line').forEach(function (p, index) {
        return showDescTL.to(p.querySelectorAll('.__char'), {
          yPercent: 0,
          duration: 1.5,
          delay: index * .02
        });
      });
    };
    descMotion();
    window.addEventListener('resize', function () {
      descHeadingSplitTop.revert();
      descSplitTop.revert();
      descHeadingSplit.revert();
      descSplit.revert();
      showDescTL.clear();
      showDescTL.kill();
      descMotion();
    });
  
    // ScrollTrigger.create({
    //   trigger: '#mainFuture .main-section-inner',
    //   start: 'bottom bottom',
    //   end: 'bottom top',
    //   onUpdate: (self) => {
    //     requestAnimationFrame(()=> {
    //       const progress = self.progress;
    //       gsap.set(imgsClone.querySelector('.__i1 img'), {yPercent: progress * 40});
    //     })
    //   }
    // })
  
    // function setMotionScaleUp() {
    //   const marginTop = imgsFrom.offsetHeight * -1;
    //   gsap.set('#mainFuture .__motion-scale-up', {marginTop: marginTop});
    // }
    //
    // setMotionScaleUp();
    // window.addEventListener('resize', ()=>{
    //   setMotionScaleUp();
    // });
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/pages/main/section.js
  
  
  
  
  function initMainSection() {
    document.querySelectorAll('.main-section-heading').forEach(function (heading, index) {
      var titleArea = heading.querySelector('.__title-area');
      var titleSplit = new SplitText(titleArea.querySelector('p'), {
        type: 'lines, chars',
        linesClass: '__line',
        charsClass: '__char'
      });
      gsapWithCSS.set(titleArea.querySelector('h2 strong'), {
        yPercent: 105
      });
      gsapWithCSS.set(titleSplit.chars, {
        yPercent: 105
      });
      setHanhwaFont(titleSplit);
      gsapWithCSS.timeline({
        scrollTrigger: {
          trigger: titleArea,
          start: 'top 80%',
          end: 'top 40%'
        },
        onComplete: function onComplete() {
          // titleSplit.revert();
        }
      }).to(titleArea.querySelector('h2 strong'), {
        yPercent: 0,
        duration: 2,
        ease: gsap_core_Quint.easeOut
      }, 0).to(titleSplit.chars, {
        yPercent: 0,
        duration: 2,
        ease: gsap_core_Quint.easeOut
      }, 0.2);
    });
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/CategoryText.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const CategoryText_module = ({"category-txt":"CategoryText-module__category-txt--DqOeA","light":"CategoryText-module__light--y6JF8","orange":"CategoryText-module__orange--hJSr2","md":"CategoryText-module__md--Uaj3o","md-txt":"CategoryText-module__md-txt--kNwxp","sm":"CategoryText-module__sm--QU3vb","sm-txt":"CategoryText-module__sm-txt--OYt1J","font-on":"CategoryText-module__font-on--ZAs6f","font-off":"CategoryText-module__font-off--FhlCQ"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/CategoryText.jsx
  
  
  
  
  // Libraries - Components - Tag
  function CategoryText(_ref) {
    var children = _ref.children,
      size = _ref.size,
      theme = _ref.theme,
      _ref$social = _ref.social,
      social = _ref$social === void 0 ? "youtube" : _ref$social,
      font = _ref.font,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? "off" : _ref$icon;
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
      className: "".concat(CategoryText_module["category-txt"], " ").concat(CategoryText_module[size], " ").concat(CategoryText_module[theme], " ").concat(CategoryText_module["font-".concat(font)]),
      type: "button"
    }, icon == "on" && /*#__PURE__*/react.createElement(SocialIcon, {
      type: social,
      color: theme == "light" ? "typo2" : theme
    }), /*#__PURE__*/react.createElement("span", {
      className: "".concat(CategoryText_module["".concat(size, "-txt")]),
      dangerouslySetInnerHTML: {
        __html: children
      }
    })));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/unescapeHTML.jsx
  function unescapeHTML(input) {
    var entities = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#34;": '"',
      "&#39;": "'",
      "&#039;": "'",
      "&middot;": "·",
      "&hellip;": "…",
      "&lsquo;": "‘",
      "&rsquo;": "’",
      "&#37;": "%",
      "&ldquo;": "“",
      "&deg;": "°",
      "&times;": "×",
      "&divide;": "÷",
      "&infin;": "∞",
      "&trade;": "™",
      "&rarr;": "→",
      "&rdquo;": "”"
    };
    var regex = new RegExp(Object.keys(entities).join("|"), "g");
    return String(input).replace(regex, function (match) {
      return entities[match];
    });
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/splitStringByCrLf.jsx
  function splitStringByCrLf(inputString) {
    if (Array.isArray(inputString)) {
      return inputString[0].split("\r\n");
    } else {
      return inputString.split("\r\n");
    }
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/PostItem.jsx
  
  
  
  
  
  function PostItem_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function PostItem_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? PostItem_ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : PostItem_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  
  
  
  
  
  
  
  
  
  
  
  
  
  function PostItem(_ref) {
    var _data$img, _data$img2, _data$img3, _data$txt3, _data$txt4;
    var data = _ref.data,
      _ref$txtSize = _ref.txtSize,
      txtSize = _ref$txtSize === void 0 ? "sm" : _ref$txtSize,
      _ref$blurBg = _ref.blurBg,
      blurBg = _ref$blurBg === void 0 ? true : _ref$blurBg,
      horizontal = _ref.horizontal,
      noPad = _ref.noPad,
      category = _ref.category,
      _ref$line = _ref.line,
      line = _ref$line === void 0 ? 2 : _ref$line,
      _ref$hold = _ref.hold,
      hold = _ref$hold === void 0 ? true : _ref$hold,
      _ref$idx = _ref.idx,
      idx = _ref$idx === void 0 ? 0 : _ref$idx,
      inmotion = _ref.inmotion,
      tagging = _ref.tagging,
      _ref$isHashtagTagging = _ref.isHashtagTagging,
      isHashtagTagging = _ref$isHashtagTagging === void 0 ? true : _ref$isHashtagTagging;
    var device = hooks_useDeviceType();
    var isDesktop = device == "web" || device == "labtop";
    var isTablet = device == "tablet";
    var isHorizontalType = horizontal ? {
      "data-horizontal": ""
    } : "";
    var isOutlink = data.outlink ? {
      "data-outlink": ""
    } : "";
    var videoPopupData = data.popup ? PostItem_objectSpread({}, data.popup) : {};
    var seq = data.seq ? data.seq : null;
    var _useState = (0,react.useState)(false),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      openVideoPopup = _useState2[0],
      setOpenVideoPopup = _useState2[1];
    var hasSubData = (data === null || data === void 0 ? void 0 : data.txt.category) || (data === null || data === void 0 ? void 0 : data.txt.date);
    function clickCallback() {
      var _data$txt, _data$txt2;
      tagging && dataLayer.push({
        /* GA4 태깅 */
        event: tagging === null || tagging === void 0 ? void 0 : tagging.eventName,
        'click_data': PostItem_objectSpread({
          'categoryName': 'contents',
          'buttonType': 'content',
          'buttonName': "".concat(data === null || data === void 0 || (_data$txt = data.txt) === null || _data$txt === void 0 ? void 0 : _data$txt.title),
          'contentsName': "".concat(data === null || data === void 0 || (_data$txt2 = data.txt) === null || _data$txt2 === void 0 ? void 0 : _data$txt2.title)
        }, tagging.clickData)
      });
      if (data !== null && data !== void 0 && data.popup) {
        setVideoPopup();
        return;
      }
      if (data !== null && data !== void 0 && data.outlink && (data === null || data === void 0 ? void 0 : data.type) == "social") {
        var fetchData = /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
            var source, res;
            return regenerator_default().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  source = lib_axios.CancelToken.source();
                  _context.prev = 1;
                  _context.next = 4;
                  return lib_axios.get("/api/v1/news/media/add-view-ajax.do?seq=".concat(seq), {
                    cancelToken: source.token
                  });
                case 4:
                  res = _context.sent;
                  console.log(res.request.responseURL);
                  _context.next = 11;
                  break;
                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](1);
                  console.log("error");
                case 11:
                  _context.prev = 11;
                  console.log("finally");
                  return _context.finish(11);
                case 14:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[1, 8, 11, 14]]);
          }));
          return function fetchData() {
            return _ref2.apply(this, arguments);
          };
        }();
        fetchData();
      }
    }
    function setVideoPopup() {
      hold && window.lenis.stop();
      setOpenVideoPopup(true);
    }
    function closeVideoPopup() {
      hold && window.lenis.start();
      setOpenVideoPopup(false);
    }
    var addDefaultImg = function addDefaultImg(e) {
      e.currentTarget.src = "/assets/img/common/default-image.jpg";
      e.currentTarget.closest(".img").classList.remove("blurBg");
      e.currentTarget.closest(".img").classList.add("default");
    };
    var Img = function Img() {
      return /*#__PURE__*/react.createElement("div", {
        className: "img".concat(blurBg ? " blurBg" : "")
      }, blurBg && /*#__PURE__*/react.createElement("img", {
        src: data === null || data === void 0 ? void 0 : data.img.src,
        onError: addDefaultImg,
        alt: data === null || data === void 0 ? void 0 : data.txt.title,
        className: "blur"
      }), /*#__PURE__*/react.createElement("img", {
        src: data === null || data === void 0 ? void 0 : data.img.src,
        onError: addDefaultImg,
        alt: data === null || data === void 0 ? void 0 : data.txt.title
      }));
    };
    function isHanwha(txt) {
      var need = txt.indexOf("한화") != -1;
      return need;
    }
    var Title = function Title() {
      var md = isDesktop ? " sub-title-3" : isTablet ? " sub-headline-5" : " sub-title-3";
      var sm = isDesktop ? " sub-title-5" : " sub-title-3";
      var xs = isDesktop ? " sub-title-6" : " sub-title-3";
      return /*#__PURE__*/react.createElement("h3", {
        line: line,
        className: "title".concat(txtSize == "l" ? " sub-headline-5" : txtSize == "md" ? md : txtSize == "xs" ? xs : sm),
        onClick: function onClick() {
          clickCallback();
        }
      }, /*#__PURE__*/react.createElement(TitleTxt, null));
    };
    var TitleTxt = function TitleTxt() {
      var renderTitle = function renderTitle() {
        return splitStringByCrLf(data.txt.title).map(function (el, idx) {
          return /*#__PURE__*/react.createElement("div", {
            key: idx
          }, unescapeHTML(el));
        });
      };
      var renderLink = function renderLink() {
        return /*#__PURE__*/react.createElement("a", {
          href: data === null || data === void 0 ? void 0 : data.link,
          target: isOutlink ? "_blank" : ""
        }, renderTitle());
      };
      var renderParagraph = function renderParagraph() {
        return /*#__PURE__*/react.createElement("div", null, renderTitle());
      };
      var renderDangerousLink = function renderDangerousLink() {
        return /*#__PURE__*/react.createElement("a", {
          href: data === null || data === void 0 ? void 0 : data.link,
          target: isOutlink ? "_blank" : "",
          dangerouslySetInnerHTML: {
            __html: "".concat(unescapeHTML(data === null || data === void 0 ? void 0 : data.txt.title))
          }
        });
      };
      return /*#__PURE__*/react.createElement(react.Fragment, null, (data === null || data === void 0 ? void 0 : data.link) && !data.popup && renderLink(), (data === null || data === void 0 ? void 0 : data.popup) && renderParagraph());
    };
    var Count = function Count(_ref3) {
      var length = _ref3.length;
      return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
        className: "count"
      }, /*#__PURE__*/react.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        fill: "none"
      }, /*#__PURE__*/react.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M6.99039 5.20019C6.99039 5.06212 7.10232 4.9502 7.24039 4.9502H20.6004C20.7385 4.9502 20.8504 5.06213 20.8504 5.2002V11.669L18.7 9.65304C18.4055 9.37692 17.9452 9.38349 17.6587 9.66791L14.4779 12.8253L12.4318 11.3867C12.141 11.1822 11.7467 11.21 11.4874 11.453L7.64743 15.053C7.52959 15.1635 7.45537 15.3031 7.42548 15.4502H7.24039C7.10232 15.4502 6.99039 15.3383 6.99039 15.2002V5.20019ZM18.2019 11.2422L20.8504 13.7251V15.2002C20.8504 15.3383 20.7385 15.4502 20.6004 15.4502H9.41698L12.0682 12.9647L14.129 14.4137C14.4263 14.6228 14.8308 14.5885 15.0888 14.3325L18.2019 11.2422ZM7.24039 3.4502C6.27389 3.4502 5.49039 4.2337 5.49039 5.20019V15.2002C5.49039 16.1667 6.27389 16.9502 7.24039 16.9502H20.6004C21.5669 16.9502 22.3504 16.1667 22.3504 15.2002V5.2002C22.3504 4.2337 21.5669 3.4502 20.6004 3.4502H7.24039ZM3.15039 9.00019C3.15039 8.58598 2.8146 8.25019 2.40039 8.25019C1.98618 8.25019 1.65039 8.58598 1.65039 9.00019V19.8002C1.65039 20.2144 1.98618 20.5502 2.40039 20.5502H15.2004C15.6146 20.5502 15.9504 20.2144 15.9504 19.8002C15.9504 19.386 15.6146 19.0502 15.2004 19.0502H3.15039V9.00019ZM11.0804 7.8002C11.0804 7.24791 10.6327 6.8002 10.0804 6.8002C9.5281 6.8002 9.08038 7.24791 9.08038 7.80019C9.08038 8.35248 9.5281 8.80019 10.0804 8.80019C10.6327 8.80019 11.0804 8.35248 11.0804 7.8002Z",
        fill: "white"
      })), /*#__PURE__*/react.createElement("span", null, length)));
    };
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", _extends({
      className: "post-item".concat(noPad ? " no-gap" : ""),
      "data-idx": idx,
      "data-type": data === null || data === void 0 ? void 0 : data.type
    }, isOutlink, isHorizontalType, {
      "data-category": data === null || data === void 0 ? void 0 : data.category
    }, inmotion && {
      "data-inmotion": true
    }), /*#__PURE__*/react.createElement("div", {
      className: "img-wrap",
      "data-size": txtSize,
      onClick: function onClick() {
        clickCallback();
      }
    }, data !== null && data !== void 0 && data.link && !data.popup ? /*#__PURE__*/react.createElement("a", {
      href: data === null || data === void 0 ? void 0 : data.link,
      target: isOutlink ? "_blank" : ""
    }, /*#__PURE__*/react.createElement(Img, null)) : /*#__PURE__*/react.createElement(react.Fragment, null), data !== null && data !== void 0 && data.popup ? /*#__PURE__*/react.createElement(Img, null) : /*#__PURE__*/react.createElement(react.Fragment, null), (data === null || data === void 0 || (_data$img = data.img) === null || _data$img === void 0 ? void 0 : _data$img.count) == 0 || !(data !== null && data !== void 0 && (_data$img2 = data.img) !== null && _data$img2 !== void 0 && _data$img2.count) ? "" : /*#__PURE__*/react.createElement(Count, {
      length: data === null || data === void 0 || (_data$img3 = data.img) === null || _data$img3 === void 0 ? void 0 : _data$img3.count
    })), /*#__PURE__*/react.createElement("div", {
      className: "txt-wrap",
      "data-size": txtSize
    }, hasSubData && /*#__PURE__*/react.createElement("div", {
      className: "sub"
    }, (data === null || data === void 0 ? void 0 : data.txt.category) && /*#__PURE__*/react.createElement("div", {
      className: "category"
    }, /*#__PURE__*/react.createElement(CategoryText, {
      size: "sm",
      theme: "orange",
      font: "off",
      social: data === null || data === void 0 ? void 0 : data.social,
      icon: data !== null && data !== void 0 && data.social ? "on" : "off"
    }, data === null || data === void 0 ? void 0 : data.txt.category.replace("한화", '<i class="font-hanwha">한화</i>'))), (data === null || data === void 0 ? void 0 : data.txt.date) && /*#__PURE__*/react.createElement("div", {
      className: "date"
    }, data === null || data === void 0 ? void 0 : data.txt.date), data.outlink && /*#__PURE__*/react.createElement("div", {
      className: "outlink"
    }, /*#__PURE__*/react.createElement(ArrowIcon, {
      type: "arrow_top-right_l",
      color: "black"
    }))), horizontal ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("h3", {
      line: line,
      className: "title".concat(device == "mobile" ? " sub-title-5" : device == "tablet" ? " sub-title-2" : " sub-title-5"),
      onClick: function onClick() {
        clickCallback();
      }
    }, /*#__PURE__*/react.createElement(TitleTxt, null))) : /*#__PURE__*/react.createElement(Title, null), data !== null && data !== void 0 && data.hashtag ? !isDesktop && horizontal ? /*#__PURE__*/react.createElement(react.Fragment, null) : /*#__PURE__*/react.createElement(Hashtag, {
      data: data.hashtag,
      size: txtSize,
      tagging: isHashtagTagging && tagging,
      relatedConTit: data === null || data === void 0 || (_data$txt3 = data.txt) === null || _data$txt3 === void 0 ? void 0 : _data$txt3.title
    }) : /*#__PURE__*/react.createElement(react.Fragment, null)), (data === null || data === void 0 ? void 0 : data.hashtag) && !isDesktop && horizontal && /*#__PURE__*/react.createElement(Hashtag, {
      data: data.hashtag,
      size: txtSize,
      tagging: isHashtagTagging && tagging,
      relatedConTit: data === null || data === void 0 || (_data$txt4 = data.txt) === null || _data$txt4 === void 0 ? void 0 : _data$txt4.title
    })), openVideoPopup && /*#__PURE__*/react.createElement(PopupVideo, {
      seq: seq,
      popupData: videoPopupData,
      closeVideoPopup: closeVideoPopup
    }));
  }
  function Hashtag(_ref4) {
    var data = _ref4.data,
      size = _ref4.size,
      tagging = _ref4.tagging,
      relatedConTit = _ref4.relatedConTit;
    return /*#__PURE__*/react.createElement("div", {
      className: "hashtag",
      "data-size": size == "l" ? "md" : size
    }, /*#__PURE__*/react.createElement(BtnTagList, {
      size: size == "l" ? "md" : size
    }, data && data.map(function (el, idx) {
      return /*#__PURE__*/react.createElement(BtnTag, {
        tag: "a",
        href: "/search.do".concat(el.link),
        type: "primary",
        size: size == "l" ? "md" : size,
        font: "off",
        key: "hashtag".concat(idx),
        onClick: function onClick() {
          tagging && dataLayer.push({
            /* GA4 태깅 */
            event: tagging === null || tagging === void 0 ? void 0 : tagging.eventName,
            'click_data': PostItem_objectSpread({
              'categoryName': 'contents',
              'buttonType': 'hashtag',
              'contentsName': "".concat(unescapeHTML(relatedConTit)),
              'buttonName': "".concat(unescapeHTML(el.title))
            }, tagging === null || tagging === void 0 ? void 0 : tagging.clickData)
          });
        }
      }, "#", unescapeHTML(el.title));
    })));
  }
  function PopupVideo(_ref5) {
    var _popupData$hashtag;
    var popupData = _ref5.popupData,
      seq = _ref5.seq,
      closeVideoPopup = _ref5.closeVideoPopup;
    var _useAxios = useAxios("/api/v1/news/media/add-view-ajax.do?seq=".concat(seq)),
      data = _useAxios.data,
      loading = _useAxios.loading,
      error = _useAxios.error;
    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
      id: "popup-dim",
      onClick: function onClick() {
        closeVideoPopup();
      }
    }), /*#__PURE__*/react.createElement(motion.div, {
      initial: {
        opacity: 0
      },
      animate: {
        opacity: 1
      },
      exit: {
        opacity: 0
      },
      transition: {
        duration: 0.5
      },
      id: "popup-video",
      className: "popup"
    }, /*#__PURE__*/react.createElement("div", {
      className: "popup-container"
    }, /*#__PURE__*/react.createElement("button", {
      type: "button",
      className: "close",
      onClick: function onClick() {
        closeVideoPopup();
      }
    }, /*#__PURE__*/react.createElement(BasicIcon, {
      type: "delete",
      color: "white"
    })), /*#__PURE__*/react.createElement("div", {
      className: "popup-title"
    }), /*#__PURE__*/react.createElement("div", {
      className: "popup-content"
    }, /*#__PURE__*/react.createElement("div", {
      className: "video-wrap"
    }, /*#__PURE__*/react.createElement("div", {
      className: "video"
    }, /*#__PURE__*/react.createElement("iframe", {
      src: popupData.video.src,
      frameBorder: "0",
      allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",
      allowFullScreen: true
    })), popupData.video.poster && /*#__PURE__*/react.createElement("div", {
      className: "poster",
      onClick: function onClick(e) {
        e.currentTarget.remove();
      }
    }, /*#__PURE__*/react.createElement("img", {
      src: popupData.video.poster,
      alt: popupData.video.title
    }), /*#__PURE__*/react.createElement("button", {
      type: "button"
    }))), /*#__PURE__*/react.createElement("div", {
      className: "txt-wrap"
    }, /*#__PURE__*/react.createElement("div", {
      className: "title-wrap"
    }, popupData.category && /*#__PURE__*/react.createElement(CategoryText, {
      size: "sm",
      theme: "orange",
      font: "off"
    }, popupData.category), /*#__PURE__*/react.createElement("h3", {
      className: "title sub-title-3",
      dangerouslySetInnerHTML: {
        __html: popupData.title
      }
    }), (popupData === null || popupData === void 0 || (_popupData$hashtag = popupData.hashtag) === null || _popupData$hashtag === void 0 ? void 0 : _popupData$hashtag.length) > 0 && /*#__PURE__*/react.createElement("div", {
      className: "hashtag"
    }, /*#__PURE__*/react.createElement(BtnTagList, {
      size: "sm"
    }, popupData === null || popupData === void 0 ? void 0 : popupData.hashtag.map(function (el, idx) {
      return /*#__PURE__*/react.createElement(BtnTag, {
        tag: "a",
        href: el.link,
        type: "primary",
        size: "sm",
        font: "off",
        key: "hashtag".concat(idx)
      }, "#", el.title);
    })))), (popupData === null || popupData === void 0 ? void 0 : popupData.desc) && /*#__PURE__*/react.createElement("div", {
      className: "desc-wrap sub-body-4",
      "data-lenis-prevent": true
    }, /*#__PURE__*/react.createElement("div", {
      className: "desc",
      dangerouslySetInnerHTML: {
        __html: popupData.desc
      }
    })))), /*#__PURE__*/react.createElement("div", {
      className: "popup-bottom"
    }, (popupData === null || popupData === void 0 ? void 0 : popupData.link) && /*#__PURE__*/react.createElement(Button, {
      tag: "a",
      href: popupData.link,
      cate: "btn-2",
      size: "md",
      type: "outline-hug",
      theme: "light"
    }, popupData.btn)))));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/hooks/setInmotion.jsx
  
  
  
  function setInmotion() {
    function comparePos(a, b) {
      if (a.getBoundingClientRect().top !== b.getBoundingClientRect().top) {
        return a.getBoundingClientRect().top - b.getBoundingClientRect().top;
      } else {
        return a.getBoundingClientRect().left - b.getBoundingClientRect().left;
      }
    }
    function staggerRemoveAttribute() {
      this.targets()[0].removeAttribute("data-inmotion", "");
    }
    var array = document.querySelectorAll("[data-inmotion]");
    ScrollTrigger_ScrollTrigger.refresh();
    if (array && array.length > 0) {
      gsapWithCSS.set("[data-inmotion]", {
        autoAlpha: 0,
        y: "3rem"
      });
      var newElements = toConsumableArray_toConsumableArray(array);
      ScrollTrigger_ScrollTrigger.batch(newElements, {
        start: 'top 92%',
        // interval: 0.1,
        // invalidateOnRefresh: true,
        //batchMax: 3,
        //markers: true,
        onEnter: function onEnter(batch) {
          //const res = removeElementsWithDisplayNone(batch);
          batch.sort(comparePos);
          gsapWithCSS.to(batch, {
            autoAlpha: 1,
            y: 0,
            stagger: {
              each: 0.15,
              onComplete: staggerRemoveAttribute
            }
            //overwrite: true,
          });
        }
      });
    }
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/pages/Main/MainNewsroom.jsx
  
  
  
  
  
  function MainNewsroom(_ref) {
    var list = _ref.list;
    (0,react.useEffect)(function () {
      setInmotion();
    }, []);
    return /*#__PURE__*/react.createElement("div", {
      className: "__list"
    }, list.map(function (item, index) {
      return /*#__PURE__*/react.createElement(PostItem, {
        key: index,
        data: item,
        idx: index + 1,
        horizontal: true,
        blurBg: false,
        hold: true,
        inmotion: true
      });
    }));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/pages/Main/MainBusinessAreas.jsx
  
  
  
  
  function MainBusinessAreas_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function MainBusinessAreas_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? MainBusinessAreas_ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : MainBusinessAreas_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  
  
  
  
  
  
  
  
  gsapWithCSS.registerPlugin(ScrollTrigger_ScrollTrigger, ScrollToPlugin);
  var businessAreasData = [{
    index: 1,
    eng: 'SPACE',
    img: '/assets/img/pages/main/business-img-1.jpg',
    category: '우주항공 ∙ 방산 ∙ 기계',
    subject: '해저에서 우주로',
    description: '인류의 미래를 향한 담대한 도전으로 모두가 꿈꾸던 우주 시대를 앞당깁니다.',
    tags: []
  }, {
    index: 2,
    eng: 'ENERGE',
    img: '/assets/img/pages/main/business-img-2.jpg',
    category: '에너지 ∙ 오션',
    subject: '지구를 위한 에너지로',
    description: '인류의 내일을 위한 에너지 솔루션으로 지속가능한 에너지 전환을 이끌어갑니다.',
    tags: []
  }, {
    index: 3,
    eng: 'FINANCE',
    img: '/assets/img/pages/main/business-img-3.jpg',
    category: '금융',
    subject: '믿음직한 파트너로',
    description: '시대를 이끄는 디지털 혁신으로 금융의 미래를 새롭게 정의합니다.',
    tags: []
  }, {
    index: 4,
    eng: 'DISTRIBUTION',
    img: '/assets/img/pages/main/business-img-4.jpg',
    category: '유통 ∙ 서비스',
    subject: '차별화된 서비스로',
    description: '새로운 경험과 가치를 제공하는 라이프스타일 플랫폼 기업으로 도약합니다.',
    tags: []
  }];
  function MainBusinessAreas() {
    var _useState = (0,react.useState)({}),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      datas = _useState2[0],
      setDatas = _useState2[1];
    function getData() {
      return _getData.apply(this, arguments);
    }
    function _getData() {
      _getData = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var res, data;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return lib_axios.get("/api/v1/business/group-ajax.do");
            case 2:
              res = _context.sent;
              data = MainBusinessAreas_objectSpread({}, res.data);
              setDatas(data);
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return _getData.apply(this, arguments);
    }
    (0,react.useEffect)(function () {
      initMainFuture();
    }, []);
    (0,react.useLayoutEffect)(function () {
      getData();
      var ishold = true;
      var holdTimeout;
      var $businessAreas = document.querySelector("#mainBusiness .business-areas");
      gsapWithCSS.set('#mainBusiness .business-areas .business-area .__img', {
        opacity: 0,
        yPercent: 100
      });
      gsapWithCSS.timeline({
        scrollTrigger: {
          trigger: '#mainBusiness .business-areas',
          start: 'top 80%',
          end: 'top top'
        }
      }).to('#mainBusiness .business-areas .business-area .__img', {
        opacity: 1,
        yPercent: 0,
        duration: 2,
        ease: gsap_core_Quint.easeOut,
        stagger: .2,
        onComplete: function onComplete() {
          if (ishold) {
            clearTimeout(holdTimeout);
            holdTimeout = setTimeout(function () {
              ishold = false;
            }, 0);
          }
        }
      });
      if (ScrollTrigger_ScrollTrigger.isTouch) {
        $businessAreas.querySelectorAll('.business-area').forEach(function (area) {
          area.addEventListener('click', function (e) {
            $businessAreas.querySelectorAll('.business-area').forEach(function (el) {
              if (el !== area) {
                el.setAttribute('data-status', 'inactive');
              } else {
                el.setAttribute('data-status', 'active');
              }
            });
          });
        });
      } else {
        ScrollTrigger_ScrollTrigger.matchMedia({
          "(min-aspect-ratio: 1/1)": function minAspectRatio11() {
            var isInited = false;
            // document.querySelector('#mainBusiness .business-areas').classList.add('__disabled');
            var isScrolling = false;
            var areas = document.querySelectorAll('#mainBusiness .business-areas .business-area');
            // areas[0].setAttribute('data-status', 'active');
            areas.forEach(function (area) {
              area.addEventListener('mouseenter', function (e) {
                if (ishold) return;
                areas.forEach(function (el) {
                  if (el !== e) el.setAttribute('data-status', '');
                });
                area.setAttribute('data-status', 'active');
                __goTop();
              });
              area.addEventListener('mouseleave', function (e) {
                if (ishold) return;
                area.setAttribute('data-status', '');
              });
            });
            ScrollTrigger_ScrollTrigger.create({
              trigger: $businessAreas,
              start: 'top 50%',
              end: 'top top',
              onToggle: function onToggle(self) {
                if (self.isActive && self.direction === 1) {
                  __goTop();
                }
              }
            });
            function __goTop() {
              console.log("isScrolling", isScrolling);
              if (isScrolling) return;
              isScrolling = true;
              if (window.lenis) {
                window.lenis.scrollTo($businessAreas, {
                  duration: .8,
                  lock: true,
                  easing: gsap_core_Quint.easeInOut,
                  onComplete: function onComplete() {
                    isScrolling = false;
                    console.log('on Complete');
                  }
                });
              } else {
                gsapWithCSS.killTweensOf(window);
                gsapWithCSS.to(window, {
                  scrollTo: $businessAreas,
                  duration: .8,
                  ease: gsap_core_Quint.easeInOut,
                  onComplete: function onComplete() {
                    isScrolling = false;
                  }
                });
              }
            }
            // ScrollTrigger.addEventListener("scrollEnd", function() {
            //   const rect = $businessAreas.getBoundingClientRect();
            //   if(rect.top > window.innerHeight * -.3 && rect.top < window.innerHeight * .3) {
            // gsap.to(window, {scrollTo: $businessAreas, duration: .8, ease: "power2.inOut"});
            // if ( isInited ) return;
            // isInited = true;
            // document.querySelectorAll('#mainBusiness .business-areas .business-area').forEach(area => {
            //   area.addEventListener('mouseenter', (e)=>{
            //     area.setAttribute('data-status', 'active');
            //   });
            //   area.addEventListener('mouseleave', (e)=>{
            //     area.setAttribute('data-status', '');
            //   });
            // });
            //
            // requestAnimationFrame(()=>{
            //   document.querySelector('#mainBusiness .business-areas').classList.remove('__disabled');
            // })
            //   }
            // });
          }
        });
      }
    }, []);
    return /*#__PURE__*/react.createElement("div", {
      className: "business-areas"
    }, businessAreasData.map(function (data, index) {
      var _datas$data$eng;
      return /*#__PURE__*/react.createElement(BusinessArea, {
        data: data,
        key: "business-area-".concat(index),
        tags: (_datas$data$eng = datas[data.eng]) === null || _datas$data$eng === void 0 ? void 0 : _datas$data$eng.list
      });
    }));
  }
  function BusinessArea(_ref) {
    var data = _ref.data,
      tags = _ref.tags;
    return /*#__PURE__*/react.createElement("article", {
      className: "business-area",
      "data-index": data.index
    }, /*#__PURE__*/react.createElement("div", {
      className: "__img"
    }, /*#__PURE__*/react.createElement("img", {
      src: data.img,
      alt: ""
    })), /*#__PURE__*/react.createElement("div", {
      className: "__desc main-headline-5"
    }, /*#__PURE__*/react.createElement("h3", {
      className: "__title"
    }, /*#__PURE__*/react.createElement("small", {
      className: "main-category-1"
    }, data.category), /*#__PURE__*/react.createElement("strong", {
      className: "main-headline-5"
    }, /*#__PURE__*/react.createElement("span", null, data.subject))), /*#__PURE__*/react.createElement("div", {
      className: "__more"
    }, /*#__PURE__*/react.createElement("div", {
      className: "__more-inner"
    }, /*#__PURE__*/react.createElement("p", {
      className: "main-body-2"
    }, data.description), /*#__PURE__*/react.createElement("div", {
      className: "__tags"
    }, tags === null || tags === void 0 ? void 0 : tags.map(function (tag, index) {
      return /*#__PURE__*/react.createElement(Button, {
        tag: 'a',
        href: tag.href,
        cate: "btn-1",
        size: "sm",
        type: "outline-fix",
        theme: "dark",
        key: "tag-".concat(index)
      }, tag.title, /*#__PURE__*/react.createElement(ArrowIcon, {
        type: "arrow",
        direction: "right"
      }));
    }))))));
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Banner.module.scss
  // extracted by mini-css-extract-plugin
  /* harmony default export */ const Banner_module = ({"banner-list":"Banner-module__banner-list--FUeX4","banner-item":"Banner-module__banner-item--gzOuI","title-wrap":"Banner-module__title-wrap--qF2Wx","title":"Banner-module__title--UdsLV","subtitle":"Banner-module__subtitle--yWEIV"});
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/Banner.jsx
  
  
  
  
  function Banner(_ref) {
    var data = _ref.data;
    var _useState = useState(_toConsumableArray(data)),
      _useState2 = _slicedToArray(_useState, 2),
      bannerData = _useState2[0],
      setBannerData = _useState2[1];
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("ul", {
      className: "".concat(styles['banner-list'])
    }, bannerData.map(function (data) {
      return BannerEl(data);
    })));
  }
  function BannerEl(params) {
    return /*#__PURE__*/React.createElement("li", {
      className: "".concat(styles['banner-item']),
      key: params.title
    }, /*#__PURE__*/React.createElement("a", {
      href: params.href,
      onClick: function onClick() {
        return setTagging(params.tagging);
      }
    }, /*#__PURE__*/React.createElement("img", {
      src: params.src,
      alt: params.title
    }), /*#__PURE__*/React.createElement("div", {
      className: "".concat(styles['title-wrap'])
    }, /*#__PURE__*/React.createElement("p", {
      className: "".concat(styles['subtitle'], " sub-body-4"),
      dangerouslySetInnerHTML: {
        __html: params.subtitle
      }
    }), /*#__PURE__*/React.createElement("h5", {
      className: "".concat(styles['title'], " sub-title-5"),
      dangerouslySetInnerHTML: {
        __html: params.title
      }
    }))));
  }
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/update-swiper.mjs
  /* underscore in name -> watch for changes */
  const paramsList = ['eventsPrefix', 'injectStyles', 'injectStylesUrls', 'modules', 'init', '_direction', 'oneWayMovement', 'touchEventsTarget', 'initialSlide', '_speed', 'cssMode', 'updateOnWindowResize', 'resizeObserver', 'nested', 'focusableElements', '_enabled', '_width', '_height', 'preventInteractionOnTransition', 'userAgent', 'url', '_edgeSwipeDetection', '_edgeSwipeThreshold', '_freeMode', '_autoHeight', 'setWrapperSize', 'virtualTranslate', '_effect', 'breakpoints', 'breakpointsBase', '_spaceBetween', '_slidesPerView', 'maxBackfaceHiddenSlides', '_grid', '_slidesPerGroup', '_slidesPerGroupSkip', '_slidesPerGroupAuto', '_centeredSlides', '_centeredSlidesBounds', '_slidesOffsetBefore', '_slidesOffsetAfter', 'normalizeSlideIndex', '_centerInsufficientSlides', '_watchOverflow', 'roundLengths', 'touchRatio', 'touchAngle', 'simulateTouch', '_shortSwipes', '_longSwipes', 'longSwipesRatio', 'longSwipesMs', '_followFinger', 'allowTouchMove', '_threshold', 'touchMoveStopPropagation', 'touchStartPreventDefault', 'touchStartForcePreventDefault', 'touchReleaseOnEdges', 'uniqueNavElements', '_resistance', '_resistanceRatio', '_watchSlidesProgress', '_grabCursor', 'preventClicks', 'preventClicksPropagation', '_slideToClickedSlide', '_loop', 'loopAdditionalSlides', 'loopAddBlankSlides', 'loopPreventsSliding', '_rewind', '_allowSlidePrev', '_allowSlideNext', '_swipeHandler', '_noSwiping', 'noSwipingClass', 'noSwipingSelector', 'passiveListeners', 'containerModifierClass', 'slideClass', 'slideActiveClass', 'slideVisibleClass', 'slideFullyVisibleClass', 'slideNextClass', 'slidePrevClass', 'slideBlankClass', 'wrapperClass', 'lazyPreloaderClass', 'lazyPreloadPrevNext', 'runCallbacksOnInit', 'observer', 'observeParents', 'observeSlideChildren',
  // modules
  'a11y', '_autoplay', '_controller', 'coverflowEffect', 'cubeEffect', 'fadeEffect', 'flipEffect', 'creativeEffect', 'cardsEffect', 'hashNavigation', 'history', 'keyboard', 'mousewheel', '_navigation', '_pagination', 'parallax', '_scrollbar', '_thumbs', 'virtual', 'zoom', 'control'];
  
  function update_swiper_isObject(o) {
    return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object' && !o.__swiper__;
  }
  function update_swiper_extend(target, src) {
    const noExtend = ['__proto__', 'constructor', 'prototype'];
    Object.keys(src).filter(key => noExtend.indexOf(key) < 0).forEach(key => {
      if (typeof target[key] === 'undefined') target[key] = src[key];else if (update_swiper_isObject(src[key]) && update_swiper_isObject(target[key]) && Object.keys(src[key]).length > 0) {
        if (src[key].__swiper__) target[key] = src[key];else update_swiper_extend(target[key], src[key]);
      } else {
        target[key] = src[key];
      }
    });
  }
  function needsNavigation(params) {
    if (params === void 0) {
      params = {};
    }
    return params.navigation && typeof params.navigation.nextEl === 'undefined' && typeof params.navigation.prevEl === 'undefined';
  }
  function needsPagination(params) {
    if (params === void 0) {
      params = {};
    }
    return params.pagination && typeof params.pagination.el === 'undefined';
  }
  function needsScrollbar(params) {
    if (params === void 0) {
      params = {};
    }
    return params.scrollbar && typeof params.scrollbar.el === 'undefined';
  }
  function uniqueClasses(classNames) {
    if (classNames === void 0) {
      classNames = '';
    }
    const classes = classNames.split(' ').map(c => c.trim()).filter(c => !!c);
    const unique = [];
    classes.forEach(c => {
      if (unique.indexOf(c) < 0) unique.push(c);
    });
    return unique.join(' ');
  }
  function attrToProp(attrName) {
    if (attrName === void 0) {
      attrName = '';
    }
    return attrName.replace(/-[a-z]/g, l => l.toUpperCase().replace('-', ''));
  }
  function wrapperClass(className) {
    if (className === void 0) {
      className = '';
    }
    if (!className) return 'swiper-wrapper';
    if (!className.includes('swiper-wrapper')) return `swiper-wrapper ${className}`;
    return className;
  }
  
  function updateSwiper(_ref) {
    let {
      swiper,
      slides,
      passedParams,
      changedParams,
      nextEl,
      prevEl,
      scrollbarEl,
      paginationEl
    } = _ref;
    const updateParams = changedParams.filter(key => key !== 'children' && key !== 'direction' && key !== 'wrapperClass');
    const {
      params: currentParams,
      pagination,
      navigation,
      scrollbar,
      virtual,
      thumbs
    } = swiper;
    let needThumbsInit;
    let needControllerInit;
    let needPaginationInit;
    let needScrollbarInit;
    let needNavigationInit;
    let loopNeedDestroy;
    let loopNeedEnable;
    let loopNeedReloop;
    if (changedParams.includes('thumbs') && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {
      needThumbsInit = true;
    }
    if (changedParams.includes('controller') && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {
      needControllerInit = true;
    }
    if (changedParams.includes('pagination') && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {
      needPaginationInit = true;
    }
    if (changedParams.includes('scrollbar') && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {
      needScrollbarInit = true;
    }
    if (changedParams.includes('navigation') && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {
      needNavigationInit = true;
    }
    const destroyModule = mod => {
      if (!swiper[mod]) return;
      swiper[mod].destroy();
      if (mod === 'navigation') {
        if (swiper.isElement) {
          swiper[mod].prevEl.remove();
          swiper[mod].nextEl.remove();
        }
        currentParams[mod].prevEl = undefined;
        currentParams[mod].nextEl = undefined;
        swiper[mod].prevEl = undefined;
        swiper[mod].nextEl = undefined;
      } else {
        if (swiper.isElement) {
          swiper[mod].el.remove();
        }
        currentParams[mod].el = undefined;
        swiper[mod].el = undefined;
      }
    };
    if (changedParams.includes('loop') && swiper.isElement) {
      if (currentParams.loop && !passedParams.loop) {
        loopNeedDestroy = true;
      } else if (!currentParams.loop && passedParams.loop) {
        loopNeedEnable = true;
      } else {
        loopNeedReloop = true;
      }
    }
    updateParams.forEach(key => {
      if (update_swiper_isObject(currentParams[key]) && update_swiper_isObject(passedParams[key])) {
        Object.assign(currentParams[key], passedParams[key]);
        if ((key === 'navigation' || key === 'pagination' || key === 'scrollbar') && 'enabled' in passedParams[key] && !passedParams[key].enabled) {
          destroyModule(key);
        }
      } else {
        const newValue = passedParams[key];
        if ((newValue === true || newValue === false) && (key === 'navigation' || key === 'pagination' || key === 'scrollbar')) {
          if (newValue === false) {
            destroyModule(key);
          }
        } else {
          currentParams[key] = passedParams[key];
        }
      }
    });
    if (updateParams.includes('controller') && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {
      swiper.controller.control = currentParams.controller.control;
    }
    if (changedParams.includes('children') && slides && virtual && currentParams.virtual.enabled) {
      virtual.slides = slides;
      virtual.update(true);
    } else if (changedParams.includes('virtual') && virtual && currentParams.virtual.enabled) {
      if (slides) virtual.slides = slides;
      virtual.update(true);
    }
    if (changedParams.includes('children') && slides && currentParams.loop) {
      loopNeedReloop = true;
    }
    if (needThumbsInit) {
      const initialized = thumbs.init();
      if (initialized) thumbs.update(true);
    }
    if (needControllerInit) {
      swiper.controller.control = currentParams.controller.control;
    }
    if (needPaginationInit) {
      if (swiper.isElement && (!paginationEl || typeof paginationEl === 'string')) {
        paginationEl = document.createElement('div');
        paginationEl.classList.add('swiper-pagination');
        paginationEl.part.add('pagination');
        swiper.el.appendChild(paginationEl);
      }
      if (paginationEl) currentParams.pagination.el = paginationEl;
      pagination.init();
      pagination.render();
      pagination.update();
    }
    if (needScrollbarInit) {
      if (swiper.isElement && (!scrollbarEl || typeof scrollbarEl === 'string')) {
        scrollbarEl = document.createElement('div');
        scrollbarEl.classList.add('swiper-scrollbar');
        scrollbarEl.part.add('scrollbar');
        swiper.el.appendChild(scrollbarEl);
      }
      if (scrollbarEl) currentParams.scrollbar.el = scrollbarEl;
      scrollbar.init();
      scrollbar.updateSize();
      scrollbar.setTranslate();
    }
    if (needNavigationInit) {
      if (swiper.isElement) {
        if (!nextEl || typeof nextEl === 'string') {
          nextEl = document.createElement('div');
          nextEl.classList.add('swiper-button-next');
          nextEl.innerHTML = swiper.hostEl.constructor.nextButtonSvg;
          nextEl.part.add('button-next');
          swiper.el.appendChild(nextEl);
        }
        if (!prevEl || typeof prevEl === 'string') {
          prevEl = document.createElement('div');
          prevEl.classList.add('swiper-button-prev');
          prevEl.innerHTML = swiper.hostEl.constructor.prevButtonSvg;
          prevEl.part.add('button-prev');
          swiper.el.appendChild(prevEl);
        }
      }
      if (nextEl) currentParams.navigation.nextEl = nextEl;
      if (prevEl) currentParams.navigation.prevEl = prevEl;
      navigation.init();
      navigation.update();
    }
    if (changedParams.includes('allowSlideNext')) {
      swiper.allowSlideNext = passedParams.allowSlideNext;
    }
    if (changedParams.includes('allowSlidePrev')) {
      swiper.allowSlidePrev = passedParams.allowSlidePrev;
    }
    if (changedParams.includes('direction')) {
      swiper.changeDirection(passedParams.direction, false);
    }
    if (loopNeedDestroy || loopNeedReloop) {
      swiper.loopDestroy();
    }
    if (loopNeedEnable || loopNeedReloop) {
      swiper.loopCreate();
    }
    swiper.update();
  }
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/shared/update-on-virtual-data.mjs
  
  
  
  function getParams(obj, splitEvents) {
    if (obj === void 0) {
      obj = {};
    }
    if (splitEvents === void 0) {
      splitEvents = true;
    }
    const params = {
      on: {}
    };
    const events = {};
    const passedParams = {};
    update_swiper_extend(params, swiper_core_defaults);
    params._emitClasses = true;
    params.init = false;
    const rest = {};
    const allowedParams = paramsList.map(key => key.replace(/_/, ''));
    const plainObj = Object.assign({}, obj);
    Object.keys(plainObj).forEach(key => {
      if (typeof obj[key] === 'undefined') return;
      if (allowedParams.indexOf(key) >= 0) {
        if (update_swiper_isObject(obj[key])) {
          params[key] = {};
          passedParams[key] = {};
          update_swiper_extend(params[key], obj[key]);
          update_swiper_extend(passedParams[key], obj[key]);
        } else {
          params[key] = obj[key];
          passedParams[key] = obj[key];
        }
      } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === 'function') {
        if (splitEvents) {
          events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];
        } else {
          params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];
        }
      } else {
        rest[key] = obj[key];
      }
    });
    ['navigation', 'pagination', 'scrollbar'].forEach(key => {
      if (params[key] === true) params[key] = {};
      if (params[key] === false) delete params[key];
    });
    return {
      params,
      passedParams,
      rest,
      events
    };
  }
  
  function mountSwiper(_ref, swiperParams) {
    let {
      el,
      nextEl,
      prevEl,
      paginationEl,
      scrollbarEl,
      swiper
    } = _ref;
    if (needsNavigation(swiperParams) && nextEl && prevEl) {
      swiper.params.navigation.nextEl = nextEl;
      swiper.originalParams.navigation.nextEl = nextEl;
      swiper.params.navigation.prevEl = prevEl;
      swiper.originalParams.navigation.prevEl = prevEl;
    }
    if (needsPagination(swiperParams) && paginationEl) {
      swiper.params.pagination.el = paginationEl;
      swiper.originalParams.pagination.el = paginationEl;
    }
    if (needsScrollbar(swiperParams) && scrollbarEl) {
      swiper.params.scrollbar.el = scrollbarEl;
      swiper.originalParams.scrollbar.el = scrollbarEl;
    }
    swiper.init(el);
  }
  
  function getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {
    const keys = [];
    if (!oldParams) return keys;
    const addKey = key => {
      if (keys.indexOf(key) < 0) keys.push(key);
    };
    if (children && oldChildren) {
      const oldChildrenKeys = oldChildren.map(getKey);
      const childrenKeys = children.map(getKey);
      if (oldChildrenKeys.join('') !== childrenKeys.join('')) addKey('children');
      if (oldChildren.length !== children.length) addKey('children');
    }
    const watchParams = paramsList.filter(key => key[0] === '_').map(key => key.replace(/_/, ''));
    watchParams.forEach(key => {
      if (key in swiperParams && key in oldParams) {
        if (update_swiper_isObject(swiperParams[key]) && update_swiper_isObject(oldParams[key])) {
          const newKeys = Object.keys(swiperParams[key]);
          const oldKeys = Object.keys(oldParams[key]);
          if (newKeys.length !== oldKeys.length) {
            addKey(key);
          } else {
            newKeys.forEach(newKey => {
              if (swiperParams[key][newKey] !== oldParams[key][newKey]) {
                addKey(key);
              }
            });
            oldKeys.forEach(oldKey => {
              if (swiperParams[key][oldKey] !== oldParams[key][oldKey]) addKey(key);
            });
          }
        } else if (swiperParams[key] !== oldParams[key]) {
          addKey(key);
        }
      }
    });
    return keys;
  }
  
  const updateOnVirtualData = swiper => {
    if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled) return;
    swiper.updateSlides();
    swiper.updateProgress();
    swiper.updateSlidesClasses();
    if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {
      swiper.parallax.setTranslate();
    }
  };
  
  
  
  ;// CONCATENATED MODULE: ./node_modules/swiper/swiper-react.mjs
  /**
   * Swiper React 11.0.3
   * Most modern mobile touch slider and framework with hardware accelerated transitions
   * https://swiperjs.com
   *
   * Copyright 2014-2023 Vladimir Kharlampidi
   *
   * Released under the MIT License
   *
   * Released on: October 26, 2023
   */
  
  
  
  
  
  
  function swiper_react_extends() {
    swiper_react_extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return swiper_react_extends.apply(this, arguments);
  }
  
  function isChildSwiperSlide(child) {
    return child.type && child.type.displayName && child.type.displayName.includes('SwiperSlide');
  }
  function processChildren(c) {
    const slides = [];
    react.Children.toArray(c).forEach(child => {
      if (isChildSwiperSlide(child)) {
        slides.push(child);
      } else if (child.props && child.props.children) {
        processChildren(child.props.children).forEach(slide => slides.push(slide));
      }
    });
    return slides;
  }
  function getChildren(c) {
    const slides = [];
    const slots = {
      'container-start': [],
      'container-end': [],
      'wrapper-start': [],
      'wrapper-end': []
    };
    react.Children.toArray(c).forEach(child => {
      if (isChildSwiperSlide(child)) {
        slides.push(child);
      } else if (child.props && child.props.slot && slots[child.props.slot]) {
        slots[child.props.slot].push(child);
      } else if (child.props && child.props.children) {
        const foundSlides = processChildren(child.props.children);
        if (foundSlides.length > 0) {
          foundSlides.forEach(slide => slides.push(slide));
        } else {
          slots['container-end'].push(child);
        }
      } else {
        slots['container-end'].push(child);
      }
    });
    return {
      slides,
      slots
    };
  }
  
  function renderVirtual(swiper, slides, virtualData) {
    if (!virtualData) return null;
    const getSlideIndex = index => {
      let slideIndex = index;
      if (index < 0) {
        slideIndex = slides.length + index;
      } else if (slideIndex >= slides.length) {
        // eslint-disable-next-line
        slideIndex = slideIndex - slides.length;
      }
      return slideIndex;
    };
    const style = swiper.isHorizontal() ? {
      [swiper.rtlTranslate ? 'right' : 'left']: `${virtualData.offset}px`
    } : {
      top: `${virtualData.offset}px`
    };
    const {
      from,
      to
    } = virtualData;
    const loopFrom = swiper.params.loop ? -slides.length : 0;
    const loopTo = swiper.params.loop ? slides.length * 2 : slides.length;
    const slidesToRender = [];
    for (let i = loopFrom; i < loopTo; i += 1) {
      if (i >= from && i <= to) {
        slidesToRender.push(slides[getSlideIndex(i)]);
      }
    }
    return slidesToRender.map((child, index) => {
      return /*#__PURE__*/react.cloneElement(child, {
        swiper,
        style,
        key: `slide-${index}`
      });
    });
  }
  
  function swiper_react_useIsomorphicLayoutEffect(callback, deps) {
    // eslint-disable-next-line
    if (typeof window === 'undefined') return (0,react.useEffect)(callback, deps);
    return (0,react.useLayoutEffect)(callback, deps);
  }
  
  const SwiperSlideContext = /*#__PURE__*/(0,react.createContext)(null);
  const useSwiperSlide = () => {
    return useContext(SwiperSlideContext);
  };
  const SwiperContext = /*#__PURE__*/(0,react.createContext)(null);
  const useSwiper = () => {
    return useContext(SwiperContext);
  };
  
  const swiper_react_Swiper = /*#__PURE__*/(0,react.forwardRef)(function (_temp, externalElRef) {
    let {
      className,
      tag: Tag = 'div',
      wrapperTag: WrapperTag = 'div',
      children,
      onSwiper,
      ...rest
    } = _temp === void 0 ? {} : _temp;
    let eventsAssigned = false;
    const [containerClasses, setContainerClasses] = (0,react.useState)('swiper');
    const [virtualData, setVirtualData] = (0,react.useState)(null);
    const [breakpointChanged, setBreakpointChanged] = (0,react.useState)(false);
    const initializedRef = (0,react.useRef)(false);
    const swiperElRef = (0,react.useRef)(null);
    const swiperRef = (0,react.useRef)(null);
    const oldPassedParamsRef = (0,react.useRef)(null);
    const oldSlides = (0,react.useRef)(null);
    const nextElRef = (0,react.useRef)(null);
    const prevElRef = (0,react.useRef)(null);
    const paginationElRef = (0,react.useRef)(null);
    const scrollbarElRef = (0,react.useRef)(null);
    const {
      params: swiperParams,
      passedParams,
      rest: restProps,
      events
    } = getParams(rest);
    const {
      slides,
      slots
    } = getChildren(children);
    const onBeforeBreakpoint = () => {
      setBreakpointChanged(!breakpointChanged);
    };
    Object.assign(swiperParams.on, {
      _containerClasses(swiper, classes) {
        setContainerClasses(classes);
      }
    });
    const initSwiper = () => {
      // init swiper
      Object.assign(swiperParams.on, events);
      eventsAssigned = true;
      const passParams = {
        ...swiperParams
      };
      delete passParams.wrapperClass;
      swiperRef.current = new Swiper(passParams);
      if (swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {
        swiperRef.current.virtual.slides = slides;
        const extendWith = {
          cache: false,
          slides,
          renderExternal: setVirtualData,
          renderExternalUpdate: false
        };
        update_swiper_extend(swiperRef.current.params.virtual, extendWith);
        update_swiper_extend(swiperRef.current.originalParams.virtual, extendWith);
      }
    };
    if (!swiperElRef.current) {
      initSwiper();
    }
  
    // Listen for breakpoints change
    if (swiperRef.current) {
      swiperRef.current.on('_beforeBreakpoint', onBeforeBreakpoint);
    }
    const attachEvents = () => {
      if (eventsAssigned || !events || !swiperRef.current) return;
      Object.keys(events).forEach(eventName => {
        swiperRef.current.on(eventName, events[eventName]);
      });
    };
    const detachEvents = () => {
      if (!events || !swiperRef.current) return;
      Object.keys(events).forEach(eventName => {
        swiperRef.current.off(eventName, events[eventName]);
      });
    };
    (0,react.useEffect)(() => {
      return () => {
        if (swiperRef.current) swiperRef.current.off('_beforeBreakpoint', onBeforeBreakpoint);
      };
    });
  
    // set initialized flag
    (0,react.useEffect)(() => {
      if (!initializedRef.current && swiperRef.current) {
        swiperRef.current.emitSlidesClasses();
        initializedRef.current = true;
      }
    });
  
    // mount swiper
    swiper_react_useIsomorphicLayoutEffect(() => {
      if (externalElRef) {
        externalElRef.current = swiperElRef.current;
      }
      if (!swiperElRef.current) return;
      if (swiperRef.current.destroyed) {
        initSwiper();
      }
      mountSwiper({
        el: swiperElRef.current,
        nextEl: nextElRef.current,
        prevEl: prevElRef.current,
        paginationEl: paginationElRef.current,
        scrollbarEl: scrollbarElRef.current,
        swiper: swiperRef.current
      }, swiperParams);
      if (onSwiper) onSwiper(swiperRef.current);
      // eslint-disable-next-line
      return () => {
        if (swiperRef.current && !swiperRef.current.destroyed) {
          swiperRef.current.destroy(true, false);
        }
      };
    }, []);
  
    // watch for params change
    swiper_react_useIsomorphicLayoutEffect(() => {
      attachEvents();
      const changedParams = getChangedParams(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, c => c.key);
      oldPassedParamsRef.current = passedParams;
      oldSlides.current = slides;
      if (changedParams.length && swiperRef.current && !swiperRef.current.destroyed) {
        updateSwiper({
          swiper: swiperRef.current,
          slides,
          passedParams,
          changedParams,
          nextEl: nextElRef.current,
          prevEl: prevElRef.current,
          scrollbarEl: scrollbarElRef.current,
          paginationEl: paginationElRef.current
        });
      }
      return () => {
        detachEvents();
      };
    });
  
    // update on virtual update
    swiper_react_useIsomorphicLayoutEffect(() => {
      updateOnVirtualData(swiperRef.current);
    }, [virtualData]);
  
    // bypass swiper instance to slides
    function renderSlides() {
      if (swiperParams.virtual) {
        return renderVirtual(swiperRef.current, slides, virtualData);
      }
      return slides.map((child, index) => {
        return /*#__PURE__*/react.cloneElement(child, {
          swiper: swiperRef.current,
          swiperSlideIndex: index
        });
      });
    }
    return /*#__PURE__*/react.createElement(Tag, swiper_react_extends({
      ref: swiperElRef,
      className: uniqueClasses(`${containerClasses}${className ? ` ${className}` : ''}`)
    }, restProps), /*#__PURE__*/react.createElement(SwiperContext.Provider, {
      value: swiperRef.current
    }, slots['container-start'], /*#__PURE__*/react.createElement(WrapperTag, {
      className: wrapperClass(swiperParams.wrapperClass)
    }, slots['wrapper-start'], renderSlides(), slots['wrapper-end']), needsNavigation(swiperParams) && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
      ref: prevElRef,
      className: "swiper-button-prev"
    }), /*#__PURE__*/react.createElement("div", {
      ref: nextElRef,
      className: "swiper-button-next"
    })), needsScrollbar(swiperParams) && /*#__PURE__*/react.createElement("div", {
      ref: scrollbarElRef,
      className: "swiper-scrollbar"
    }), needsPagination(swiperParams) && /*#__PURE__*/react.createElement("div", {
      ref: paginationElRef,
      className: "swiper-pagination"
    }), slots['container-end']));
  });
  swiper_react_Swiper.displayName = 'Swiper';
  
  const SwiperSlide = /*#__PURE__*/(0,react.forwardRef)(function (_temp, externalRef) {
    let {
      tag: Tag = 'div',
      children,
      className = '',
      swiper,
      zoom,
      lazy,
      virtualIndex,
      swiperSlideIndex,
      ...rest
    } = _temp === void 0 ? {} : _temp;
    const slideElRef = (0,react.useRef)(null);
    const [slideClasses, setSlideClasses] = (0,react.useState)('swiper-slide');
    const [lazyLoaded, setLazyLoaded] = (0,react.useState)(false);
    function updateClasses(_s, el, classNames) {
      if (el === slideElRef.current) {
        setSlideClasses(classNames);
      }
    }
    swiper_react_useIsomorphicLayoutEffect(() => {
      if (typeof swiperSlideIndex !== 'undefined') {
        slideElRef.current.swiperSlideIndex = swiperSlideIndex;
      }
      if (externalRef) {
        externalRef.current = slideElRef.current;
      }
      if (!slideElRef.current || !swiper) {
        return;
      }
      if (swiper.destroyed) {
        if (slideClasses !== 'swiper-slide') {
          setSlideClasses('swiper-slide');
        }
        return;
      }
      swiper.on('_slideClass', updateClasses);
      // eslint-disable-next-line
      return () => {
        if (!swiper) return;
        swiper.off('_slideClass', updateClasses);
      };
    });
    swiper_react_useIsomorphicLayoutEffect(() => {
      if (swiper && slideElRef.current && !swiper.destroyed) {
        setSlideClasses(swiper.getSlideClasses(slideElRef.current));
      }
    }, [swiper]);
    const slideData = {
      isActive: slideClasses.indexOf('swiper-slide-active') >= 0,
      isVisible: slideClasses.indexOf('swiper-slide-visible') >= 0,
      isPrev: slideClasses.indexOf('swiper-slide-prev') >= 0,
      isNext: slideClasses.indexOf('swiper-slide-next') >= 0
    };
    const renderChildren = () => {
      return typeof children === 'function' ? children(slideData) : children;
    };
    const onLoad = () => {
      setLazyLoaded(true);
    };
    return /*#__PURE__*/react.createElement(Tag, swiper_react_extends({
      ref: slideElRef,
      className: uniqueClasses(`${slideClasses}${className ? ` ${className}` : ''}`),
      "data-swiper-slide-index": virtualIndex,
      onLoad: onLoad
    }, rest), zoom && /*#__PURE__*/react.createElement(SwiperSlideContext.Provider, {
      value: slideData
    }, /*#__PURE__*/react.createElement("div", {
      className: "swiper-zoom-container",
      "data-swiper-zoom": typeof zoom === 'number' ? zoom : undefined
    }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/react.createElement("div", {
      className: "swiper-lazy-preloader"
    }))), !zoom && /*#__PURE__*/react.createElement(SwiperSlideContext.Provider, {
      value: slideData
    }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/react.createElement("div", {
      className: "swiper-lazy-preloader"
    })));
  });
  SwiperSlide.displayName = 'SwiperSlide';
  
  
  
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/components/MainPopup.jsx
  
  
  
  
  
  
  
  
  
  
  
  
  
  function MainPopup() {
    var swiperRef = (0,react.useRef)();
    var _useState = (0,react.useState)(),
      _useState2 = slicedToArray_slicedToArray(_useState, 2),
      isBeginning = _useState2[0],
      setIsBeginning = _useState2[1];
    var _useState3 = (0,react.useState)(),
      _useState4 = slicedToArray_slicedToArray(_useState3, 2),
      isEnd = _useState4[0],
      setIsEnd = _useState4[1];
    var _useState5 = (0,react.useState)('hide'),
      _useState6 = slicedToArray_slicedToArray(_useState5, 2),
      popupOpen = _useState6[0],
      setPopupOpen = _useState6[1];
    var _useState7 = (0,react.useState)(false),
      _useState8 = slicedToArray_slicedToArray(_useState7, 2),
      isChecked = _useState8[0],
      setIsChecked = _useState8[1];
    var device = hooks_useDeviceType();
    var isMobile = device == "mobile";
    var oneDayInMillis = 24 * 60 * 60 * 1000; // 1일을 밀리초로 나타낸 값
  
    var _useAxios = useAxios('/api/v1/main/popup.do'),
      data = _useAxios.data,
      loading = _useAxios.loading,
      error = _useAxios.error;
    function handleCheckbox() {
      setIsChecked(!isChecked);
    }
    function getCookie(name) {
      var value = "; ".concat(document.cookie);
      var parts = value.split("; ".concat(name, "="));
      if (parts.length === 2) return parts.pop().split(';').shift();
    }
    function hidePopup() {
      setPopupOpen('hide');
      window.lenis && window.lenis.start();
      if (isChecked) {
        // 쿠키에 'hide' 저장
        document.cookie = 'popupState=hide; max-age=' + oneDayInMillis / 1000;
      }
    }
    (0,react.useEffect)(function () {
      var lastPopupState = getCookie('popupState');
      if (lastPopupState !== 'hide') {
        setPopupOpen('open');
        // 쿠키에 'open' 저장
        document.cookie = 'popupState=show;';
      } else {
        setPopupOpen('hide');
      }
    }, []);
    (0,react.useEffect)(function () {
      var hasData = (data === null || data === void 0 ? void 0 : data.length) > 0;
      var isPopupOpen = popupOpen == 'open';
      if (hasData && isPopupOpen && isMobile) {
        var _window;
        (_window = window) === null || _window === void 0 || (_window = _window.lenis) === null || _window === void 0 || _window.stop();
      }
    }, [data]);
    function popupClickHandler(_x) {
      return _popupClickHandler.apply(this, arguments);
    }
    function _popupClickHandler() {
      _popupClickHandler = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(index) {
        var _data$index, _data$index2, respone;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return lib_axios.post("/api/v1/main/popup/add-view-ajax.do?seq=".concat((_data$index = data[index]) === null || _data$index === void 0 ? void 0 : _data$index.seq), {
                seq: (_data$index2 = data[index]) === null || _data$index2 === void 0 ? void 0 : _data$index2.seq
              });
            case 3:
              respone = _context.sent;
              _context.next = 9;
              break;
            case 6:
              _context.prev = 6;
              _context.t0 = _context["catch"](0);
              console.error('전송에 실패', _context.t0);
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 6]]);
      }));
      return _popupClickHandler.apply(this, arguments);
    }
    return /*#__PURE__*/react.createElement(react.Fragment, null, popupOpen == 'open' && !loading && (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/react.createElement("div", {
      className: "main-popup-wrapper ".concat(isMobile ? 'mo' : 'pc')
    }, /*#__PURE__*/react.createElement("div", {
      className: "main-popup"
    }, /*#__PURE__*/react.createElement("div", {
      className: "slider"
    }, /*#__PURE__*/react.createElement(swiper_react_Swiper, {
      pagination: {
        el: '.popup-swiper-pagination',
        clickable: true,
        type: 'fraction'
      },
      navigation: {
        nextEl: '.popup-swiper-button-next',
        prevEl: '.popup-swiper-button-prev'
      },
      modules: [Pagination],
      className: "mySwiper",
      slidesPerView: 1,
      spaceBetween: 10,
      onSlideChange: function onSlideChange(swiper) {
        swiperRef.current = swiper;
        setIsBeginning(swiperRef.current.isBeginning);
        setIsEnd(swiperRef.current.isEnd);
      },
      onBeforeInit: function onBeforeInit(swiper) {
        swiperRef.current = swiper;
        setIsBeginning(swiperRef.current.isBeginning);
        setIsEnd(swiperRef.current.isEnd);
      }
    }, data === null || data === void 0 ? void 0 : data.map(function (p, i) {
      return /*#__PURE__*/react.createElement(SwiperSlide, {
        key: i
      }, /*#__PURE__*/react.createElement("div", {
        className: "popup-slide",
        "data-lenis-prevent": true,
        onClick: function onClick() {
          return popupClickHandler(i);
        }
      }, /*#__PURE__*/react.createElement("a", {
        href: p.link,
        target: p.blank == 'Y' ? '_blank' : '_self'
      }, /*#__PURE__*/react.createElement("img", {
        src: p.img.src,
        alt: p.img.altText
      }))));
    }))), /*#__PURE__*/react.createElement("div", {
      className: "bottom"
    }, (data === null || data === void 0 ? void 0 : data.length) > 1 && /*#__PURE__*/react.createElement("div", {
      className: "indicator"
    }, /*#__PURE__*/react.createElement("div", {
      className: "popup-swiper-pagination ".concat(isEnd && 'disabled')
    }), /*#__PURE__*/react.createElement("div", {
      className: "popup-swiper-button-next"
    }, /*#__PURE__*/react.createElement(ArrowIcon, {
      type: 'chevron-s',
      direction: 'left',
      color: 'black',
      size: '20'
    })), /*#__PURE__*/react.createElement("div", {
      className: "popup-swiper-button-prev"
    }, /*#__PURE__*/react.createElement(ArrowIcon, {
      type: 'chevron-s',
      direction: 'right',
      color: 'black',
      size: '20'
    }))), /*#__PURE__*/react.createElement("div", {
      className: "util"
    }, /*#__PURE__*/react.createElement("div", {
      className: "util-wrap"
    }, /*#__PURE__*/react.createElement(Checkbox, {
      txt: '오늘 하루 보지 않기',
      checked: isChecked,
      onChange: handleCheckbox
    }), /*#__PURE__*/react.createElement("button", {
      className: "close-btn",
      onClick: hidePopup
    }, /*#__PURE__*/react.createElement(BasicIcon, {
      type: "delete",
      color: "black",
      size: "18"
    }))))))));
  }
  var initMainPopup = function initMainPopup() {
    var container = document.createElement('div');
    container.setAttribute("id", "main-popup-container");
    document.body.appendChild(container);
    var root = (0,client/* createRoot */.s)(container);
    root.render( /*#__PURE__*/react.createElement(MainPopup, null));
  };
  
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/react/pages/Main/MainIndex.jsx
  
  
  
  
  
  
  
  
  
  function MainIndex(data) {
    var rootEl = document.querySelector("[data-current-page]");
    var current = rootEl.dataset.currentPage;
    // rootEl.id = 'page-' + current
    // let root = createRoot(rootEl);
    // root.render(
    //     <>
    //     
    //     </>
    // );
  
    var newsroomList = data ? data.newsroom : null;
    var mainNewsroomRoot = document.getElementById('mainNewsroomRoot');
    (0,client/* createRoot */.s)(mainNewsroomRoot).render( /*#__PURE__*/react.createElement(MainNewsroom, {
      list: newsroomList
    }));
    var mainBusinessAreasRoot = document.getElementById('mainBusinessAreasRoot');
    (0,client/* createRoot */.s)(mainBusinessAreasRoot).render( /*#__PURE__*/react.createElement(MainBusinessAreas, null));
    initMainPopup();
  
    // const mainBannerRoot = document.getElementById('mainBannerRoot');
    // const bannerList = data ? data.banner : null;
    // createRoot(mainBannerRoot).render(<Banner data={bannerList}/>);
  }
  ;// CONCATENATED MODULE: ./src/main/webapp/scripts/main.js
  
  
  document.addEventListener('DOMContentLoaded', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
    var isMobileView, res, data, kvList;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          isMobileView = document.documentElement.clientWidth <= 1024; // const res = await axios.get("/assets/_dummy/data/main.json");
          _context.next = 3;
          return lib_axios.get("/api/v1/main.do".concat(isMobileView ? '?dvc=m' : ''));
        case 3:
          res = _context.sent;
          if (res.status !== 200) {
            console.error("Failed to load main-kv.json");
          }
          data = res.status === 200 ? res.data : null;
          kvList = data ? data.kv : null;
          loadPage(function () {
            MainIndex(data);
            initMainSection();
            initMainKV(kvList);
            initMainSlogan();
            // initMainFuture();
            initMainBanner();
          });
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  })();
  
  // This entry need to be wrapped in an IIFE because it need to be in strict mode.
  (() => {
  "use strict";
  // extracted by mini-css-extract-plugin
  
  })();
  
  /******/ })()
  ;